{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5","program":"/Users/kroos/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","lock_api","--edition=2018","/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=b0ff5238abb569bf","-C","extra-filename=-b0ff5238abb569bf","--out-dir","/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps","-L","dependency=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps","--extern","scopeguard=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libscopeguard-e162165729eb7c48.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/kroos/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/liblock_api-b0ff5238abb569bf.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[2506446756001904584,0]},"crate_root":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src","external_crates":[{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[10550174156715778454,0]}},{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[8770346864682343241,0]}},{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[8196830942918118636,0]}},{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[840363116583998361,0]}}],"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":333,"byte_end":4297,"line_start":8,"line_end":116,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":4215,"byte_end":4216,"line_start":110,"line_end":110,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":4256,"byte_end":4257,"line_start":113,"line_end":113,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":4295,"byte_end":4296,"line_start":116,"line_end":116,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":333,"byte_end":4297,"line_start":8,"line_end":116,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":925}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2098,"byte_end":2116,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/             .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2117,"byte_end":2201,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"/             .is_ok()","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2202,"byte_end":2226,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2227,"byte_end":2236,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2237,"byte_end":2240,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/     unsafe fn unlock(&self) {","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2241,"byte_end":2274,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2275,"byte_end":2326,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2327,"byte_end":2336,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2337,"byte_end":2342,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2343,"byte_end":2346,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2347,"byte_end":2431,"line_start":60,"line_end":60,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2432,"byte_end":2491,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2492,"byte_end":2569,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2570,"byte_end":2577,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2578,"byte_end":2581,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2582,"byte_end":2604,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2605,"byte_end":2608,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2609,"byte_end":2688,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2689,"byte_end":2764,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2765,"byte_end":2834,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2835,"byte_end":2838,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2839,"byte_end":2893,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2894,"byte_end":2949,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":2950,"byte_end":3006,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3007,"byte_end":3056,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3057,"byte_end":3105,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3106,"byte_end":3109,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3110,"byte_end":3189,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3190,"byte_end":3263,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3264,"byte_end":3267,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3268,"byte_end":3288,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3289,"byte_end":3292,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This crate supports three cargo features:","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3293,"byte_end":3338,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3339,"byte_end":3342,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3343,"byte_end":3425,"line_start":84,"line_end":84,"column_start":1,"column_end":83}},{"value":"/ - `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3426,"byte_end":3533,"line_start":85,"line_end":85,"column_start":1,"column_end":108}},{"value":"/   requires the `alloc` crate to be present.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3534,"byte_end":3581,"line_start":86,"line_end":86,"column_start":1,"column_end":48}},{"value":"/ - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3582,"byte_end":3657,"line_start":87,"line_end":87,"column_start":1,"column_end":76}},{"value":"/   feature is `const fn` constructors for lock types.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3658,"byte_end":3714,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3716,"byte_end":3726,"line_start":90,"line_end":90,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3727,"byte_end":3749,"line_start":91,"line_end":91,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3750,"byte_end":3776,"line_start":92,"line_end":92,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":4017,"byte_end":4026,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":3932,"byte_end":4005,"line_start":101,"line_end":101,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":4122,"byte_end":4133,"line_start":105,"line_end":105,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":4033,"byte_end":4110,"line_start":104,"line_end":104,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5397,"byte_end":5405,"line_start":36,"line_end":36,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5063,"byte_end":5096,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5097,"byte_end":5100,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5101,"byte_end":5176,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5177,"byte_end":5210,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5211,"byte_end":5214,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5215,"byte_end":5227,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5228,"byte_end":5231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5232,"byte_end":5304,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5305,"byte_end":5379,"line_start":35,"line_end":35,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":33},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5708,"byte_end":5712,"line_start":41,"line_end":41,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5412,"byte_end":5452,"line_start":37,"line_end":37,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5649,"byte_end":5697,"line_start":40,"line_end":40,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5877,"byte_end":5888,"line_start":45,"line_end":45,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5725,"byte_end":5800,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5805,"byte_end":5867,"line_start":44,"line_end":44,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5982,"byte_end":5986,"line_start":48,"line_end":48,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":5895,"byte_end":5974,"line_start":47,"line_end":47,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6144,"byte_end":6152,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6000,"byte_end":6067,"line_start":50,"line_end":50,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6072,"byte_end":6136,"line_start":51,"line_end":51,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6682,"byte_end":6688,"line_start":65,"line_end":65,"column_start":15,"column_end":21},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub unsafe fn unlock(&Self)","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Unlocks this mutex.","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6174,"byte_end":6197,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6202,"byte_end":6205,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6210,"byte_end":6222,"line_start":56,"line_end":56,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6227,"byte_end":6230,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, i.e. it must","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6235,"byte_end":6327,"line_start":58,"line_end":58,"column_start":5,"column_end":97}},{"value":"/ be paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6332,"byte_end":6435,"line_start":59,"line_end":59,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6440,"byte_end":6443,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ [`lock`]: #tymethod.lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6448,"byte_end":6476,"line_start":61,"line_end":61,"column_start":5,"column_end":33}},{"value":"/ [`try_lock`]: #tymethod.try_lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6481,"byte_end":6517,"line_start":62,"line_end":62,"column_start":5,"column_end":41}},{"value":"/ [`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6522,"byte_end":6590,"line_start":63,"line_end":63,"column_start":5,"column_end":73}},{"value":"/ [`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6595,"byte_end":6667,"line_start":64,"line_end":64,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6773,"byte_end":6782,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::mutex::RawMutex::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6702,"byte_end":6751,"line_start":67,"line_end":67,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":6756,"byte_end":6765,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7430,"byte_end":7442,"line_start":87,"line_end":87,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7050,"byte_end":7114,"line_start":81,"line_end":81,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7115,"byte_end":7118,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7119,"byte_end":7199,"line_start":83,"line_end":83,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7200,"byte_end":7275,"line_start":84,"line_end":84,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7276,"byte_end":7350,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7351,"byte_end":7412,"line_start":86,"line_end":86,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7752,"byte_end":7763,"line_start":96,"line_end":96,"column_start":15,"column_end":26},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7459,"byte_end":7511,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7516,"byte_end":7519,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7524,"byte_end":7536,"line_start":90,"line_end":90,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7541,"byte_end":7544,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7549,"byte_end":7632,"line_start":92,"line_end":92,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7637,"byte_end":7673,"line_start":93,"line_end":93,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7678,"byte_end":7681,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7686,"byte_end":7737,"line_start":95,"line_end":95,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8289,"byte_end":8293,"line_start":110,"line_end":110,"column_start":15,"column_end":19},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub unsafe fn bump(&Self)","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7777,"byte_end":7846,"line_start":98,"line_end":98,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7851,"byte_end":7854,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7859,"byte_end":7935,"line_start":100,"line_end":100,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7940,"byte_end":8016,"line_start":101,"line_end":101,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8021,"byte_end":8048,"line_start":102,"line_end":102,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8053,"byte_end":8056,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8061,"byte_end":8073,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8078,"byte_end":8081,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8086,"byte_end":8169,"line_start":106,"line_end":106,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8174,"byte_end":8210,"line_start":107,"line_end":107,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8215,"byte_end":8218,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8223,"byte_end":8274,"line_start":109,"line_end":109,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8591,"byte_end":8604,"line_start":120,"line_end":120,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8361,"byte_end":8432,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8433,"byte_end":8436,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8437,"byte_end":8517,"line_start":118,"line_end":118,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8518,"byte_end":8573,"line_start":119,"line_end":119,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8673,"byte_end":8681,"line_start":122,"line_end":122,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8621,"byte_end":8663,"line_start":121,"line_end":121,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8741,"byte_end":8748,"line_start":125,"line_end":125,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8688,"byte_end":8731,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8824,"byte_end":8836,"line_start":128,"line_end":128,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8755,"byte_end":8816,"line_start":127,"line_end":127,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8952,"byte_end":8966,"line_start":131,"line_end":131,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8883,"byte_end":8944,"line_start":130,"line_end":130,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9520,"byte_end":9525,"line_start":142,"line_end":142,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9010,"byte_end":9076,"line_start":134,"line_end":134,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9077,"byte_end":9080,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9081,"byte_end":9160,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9161,"byte_end":9228,"line_start":137,"line_end":137,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9229,"byte_end":9308,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9309,"byte_end":9384,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9385,"byte_end":9464,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9465,"byte_end":9508,"line_start":141,"line_end":141,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10147,"byte_end":10150,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10025,"byte_end":10084,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10089,"byte_end":10121,"line_start":162,"line_end":162,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10126,"byte_end":10135,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10360,"byte_end":10370,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10279,"byte_end":10334,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10339,"byte_end":10348,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10626,"byte_end":10635,"line_start":183,"line_end":183,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"pub const fn const_new(R, T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"/ Creates a new mutex based on a pre-existing raw mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10453,"byte_end":10511,"line_start":179,"line_end":179,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10516,"byte_end":10519,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10524,"byte_end":10594,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10599,"byte_end":10608,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11607,"byte_end":11611,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11069,"byte_end":11145,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11150,"byte_end":11153,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11158,"byte_end":11236,"line_start":205,"line_end":205,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11241,"byte_end":11316,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11321,"byte_end":11397,"line_start":207,"line_end":207,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11402,"byte_end":11462,"line_start":208,"line_end":208,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11467,"byte_end":11470,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11475,"byte_end":11551,"line_start":210,"line_end":210,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11556,"byte_end":11581,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11586,"byte_end":11595,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12065,"byte_end":12073,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11763,"byte_end":11797,"line_start":219,"line_end":219,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11802,"byte_end":11805,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11810,"byte_end":11886,"line_start":221,"line_end":221,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11891,"byte_end":11967,"line_start":222,"line_end":222,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11972,"byte_end":11993,"line_start":223,"line_end":223,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":11998,"byte_end":12001,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12006,"byte_end":12039,"line_start":225,"line_end":225,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12044,"byte_end":12053,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12546,"byte_end":12553,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12299,"byte_end":12354,"line_start":236,"line_end":236,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12359,"byte_end":12362,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12367,"byte_end":12442,"line_start":238,"line_end":238,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12447,"byte_end":12520,"line_start":239,"line_end":239,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12525,"byte_end":12534,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12704,"byte_end":12713,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12629,"byte_end":12678,"line_start":245,"line_end":245,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12683,"byte_end":12692,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13279,"byte_end":13291,"line_start":263,"line_end":263,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12771,"byte_end":12802,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12807,"byte_end":12810,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12815,"byte_end":12889,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12894,"byte_end":12964,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12969,"byte_end":12990,"line_start":255,"line_end":255,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":12995,"byte_end":12998,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13003,"byte_end":13015,"line_start":257,"line_end":257,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13020,"byte_end":13023,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13028,"byte_end":13102,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13107,"byte_end":13176,"line_start":260,"line_end":260,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13181,"byte_end":13246,"line_start":261,"line_end":261,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13251,"byte_end":13260,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13728,"byte_end":13731,"line_start":277,"line_end":277,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13339,"byte_end":13383,"line_start":267,"line_end":267,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13388,"byte_end":13391,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13396,"byte_end":13471,"line_start":269,"line_end":269,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13476,"byte_end":13537,"line_start":270,"line_end":270,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13542,"byte_end":13545,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13550,"byte_end":13562,"line_start":272,"line_end":272,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13567,"byte_end":13570,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13575,"byte_end":13642,"line_start":274,"line_end":274,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13647,"byte_end":13695,"line_start":275,"line_end":275,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13700,"byte_end":13709,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":14301,"byte_end":14309,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<Mutex<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13776,"byte_end":13825,"line_start":281,"line_end":281,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13830,"byte_end":13833,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13838,"byte_end":13912,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13917,"byte_end":13987,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":13992,"byte_end":14013,"line_start":285,"line_end":285,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":14018,"byte_end":14021,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":14026,"byte_end":14038,"line_start":287,"line_end":287,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":14043,"byte_end":14046,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":14051,"byte_end":14122,"line_start":289,"line_end":289,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":14127,"byte_end":14197,"line_start":290,"line_end":290,"column_start":5,"column_end":75}},{"value":"/ a `MutexGuard` but that guard has been discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":14202,"byte_end":14275,"line_start":291,"line_end":291,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":14280,"byte_end":14289,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16284,"byte_end":16301,"line_start":350,"line_end":350,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":15747,"byte_end":15807,"line_start":338,"line_end":338,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":15812,"byte_end":15815,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":15820,"byte_end":15894,"line_start":340,"line_end":340,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":15899,"byte_end":15969,"line_start":341,"line_end":341,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":15974,"byte_end":15995,"line_start":342,"line_end":342,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16000,"byte_end":16003,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16008,"byte_end":16020,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16025,"byte_end":16028,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16033,"byte_end":16107,"line_start":346,"line_end":346,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16112,"byte_end":16181,"line_start":347,"line_end":347,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16186,"byte_end":16251,"line_start":348,"line_end":348,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16256,"byte_end":16265,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16701,"byte_end":16713,"line_start":362,"line_end":362,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16404,"byte_end":16465,"line_start":356,"line_end":356,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16470,"byte_end":16473,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16478,"byte_end":16548,"line_start":358,"line_end":358,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16553,"byte_end":16628,"line_start":359,"line_end":359,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16633,"byte_end":16675,"line_start":360,"line_end":360,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16680,"byte_end":16689,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":17269,"byte_end":17283,"line_start":377,"line_end":377,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16972,"byte_end":17033,"line_start":371,"line_end":371,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":17038,"byte_end":17041,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":17046,"byte_end":17116,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":17121,"byte_end":17196,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":17201,"byte_end":17243,"line_start":375,"line_end":375,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":17248,"byte_end":17257,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20755,"byte_end":20765,"line_start":489,"line_end":489,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20415,"byte_end":20495,"line_start":483,"line_end":483,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20496,"byte_end":20556,"line_start":484,"line_end":484,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20557,"byte_end":20560,"line_start":485,"line_end":485,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20561,"byte_end":20639,"line_start":486,"line_end":486,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20640,"byte_end":20683,"line_start":487,"line_end":487,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20684,"byte_end":20743,"line_start":488,"line_end":488,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21116,"byte_end":21121,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21049,"byte_end":21104,"line_start":497,"line_end":497,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21586,"byte_end":21589,"line_start":511,"line_end":511,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21180,"byte_end":21250,"line_start":502,"line_end":502,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21255,"byte_end":21258,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21263,"byte_end":21320,"line_start":504,"line_end":504,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21325,"byte_end":21357,"line_start":505,"line_end":505,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21362,"byte_end":21365,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21370,"byte_end":21421,"line_start":507,"line_end":507,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21426,"byte_end":21502,"line_start":508,"line_end":508,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21507,"byte_end":21560,"line_start":509,"line_end":509,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21565,"byte_end":21574,"line_start":510,"line_end":510,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22424,"byte_end":22431,"line_start":535,"line_end":535,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21933,"byte_end":22001,"line_start":525,"line_end":525,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22006,"byte_end":22084,"line_start":526,"line_end":526,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22089,"byte_end":22092,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22097,"byte_end":22154,"line_start":528,"line_end":528,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22159,"byte_end":22191,"line_start":529,"line_end":529,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22196,"byte_end":22199,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22204,"byte_end":22255,"line_start":531,"line_end":531,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22260,"byte_end":22340,"line_start":532,"line_end":532,"column_start":5,"column_end":85}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22345,"byte_end":22398,"line_start":533,"line_end":533,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22403,"byte_end":22412,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23112,"byte_end":23120,"line_start":557,"line_end":557,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22886,"byte_end":22950,"line_start":552,"line_end":552,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22955,"byte_end":22958,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":22963,"byte_end":23031,"line_start":554,"line_end":554,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23036,"byte_end":23086,"line_start":555,"line_end":555,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23091,"byte_end":23100,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24222,"byte_end":24233,"line_start":584,"line_end":584,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23441,"byte_end":23492,"line_start":571,"line_end":571,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23497,"byte_end":23500,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23505,"byte_end":23579,"line_start":573,"line_end":573,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23584,"byte_end":23656,"line_start":574,"line_end":574,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23661,"byte_end":23735,"line_start":575,"line_end":575,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23740,"byte_end":23815,"line_start":576,"line_end":576,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23820,"byte_end":23891,"line_start":577,"line_end":577,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23896,"byte_end":23953,"line_start":578,"line_end":578,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23958,"byte_end":23961,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23966,"byte_end":24042,"line_start":580,"line_end":580,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24047,"byte_end":24123,"line_start":581,"line_end":581,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24128,"byte_end":24196,"line_start":582,"line_end":582,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24201,"byte_end":24210,"line_start":583,"line_end":583,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24695,"byte_end":24708,"line_start":599,"line_end":599,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24401,"byte_end":24465,"line_start":592,"line_end":592,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24470,"byte_end":24473,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24478,"byte_end":24533,"line_start":594,"line_end":594,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24538,"byte_end":24541,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24546,"byte_end":24614,"line_start":596,"line_end":596,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24619,"byte_end":24669,"line_start":597,"line_end":597,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24674,"byte_end":24683,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25259,"byte_end":25263,"line_start":617,"line_end":617,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":24962,"byte_end":25031,"line_start":611,"line_end":611,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25036,"byte_end":25039,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25044,"byte_end":25120,"line_start":613,"line_end":613,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25125,"byte_end":25201,"line_start":614,"line_end":614,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25206,"byte_end":25233,"line_start":615,"line_end":615,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25238,"byte_end":25247,"line_start":616,"line_end":616,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30248,"byte_end":30264,"line_start":783,"line_end":783,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":29812,"byte_end":29887,"line_start":775,"line_end":775,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":29888,"byte_end":29923,"line_start":776,"line_end":776,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":29924,"byte_end":29927,"line_start":777,"line_end":777,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":29928,"byte_end":30007,"line_start":778,"line_end":778,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30008,"byte_end":30083,"line_start":779,"line_end":779,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30084,"byte_end":30164,"line_start":780,"line_end":780,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30165,"byte_end":30176,"line_start":781,"line_end":781,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30177,"byte_end":30236,"line_start":782,"line_end":782,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31099,"byte_end":31102,"line_start":808,"line_end":808,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30681,"byte_end":30751,"line_start":799,"line_end":799,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30756,"byte_end":30759,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30764,"byte_end":30827,"line_start":801,"line_end":801,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30832,"byte_end":30864,"line_start":802,"line_end":802,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30869,"byte_end":30872,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30877,"byte_end":30928,"line_start":804,"line_end":804,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30933,"byte_end":31015,"line_start":805,"line_end":805,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31020,"byte_end":31073,"line_start":806,"line_end":806,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31078,"byte_end":31087,"line_start":807,"line_end":807,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31930,"byte_end":31937,"line_start":832,"line_end":832,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31427,"byte_end":31495,"line_start":822,"line_end":822,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31500,"byte_end":31578,"line_start":823,"line_end":823,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31583,"byte_end":31586,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31591,"byte_end":31654,"line_start":825,"line_end":825,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31659,"byte_end":31691,"line_start":826,"line_end":826,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31696,"byte_end":31699,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31704,"byte_end":31755,"line_start":828,"line_end":828,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31760,"byte_end":31846,"line_start":829,"line_end":829,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31851,"byte_end":31904,"line_start":830,"line_end":830,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":31909,"byte_end":31918,"line_start":831,"line_end":831,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33232,"byte_end":33243,"line_start":864,"line_end":864,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32451,"byte_end":32502,"line_start":851,"line_end":851,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32507,"byte_end":32510,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32515,"byte_end":32589,"line_start":853,"line_end":853,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32594,"byte_end":32666,"line_start":854,"line_end":854,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32671,"byte_end":32745,"line_start":855,"line_end":855,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32750,"byte_end":32825,"line_start":856,"line_end":856,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32830,"byte_end":32901,"line_start":857,"line_end":857,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32906,"byte_end":32963,"line_start":858,"line_end":858,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32968,"byte_end":32971,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32976,"byte_end":33052,"line_start":860,"line_end":860,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33057,"byte_end":33133,"line_start":861,"line_end":861,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33138,"byte_end":33206,"line_start":862,"line_end":862,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33211,"byte_end":33220,"line_start":863,"line_end":863,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":264},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35858,"byte_end":35869,"line_start":45,"line_end":45,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35457,"byte_end":35509,"line_start":35,"line_end":35,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35510,"byte_end":35513,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35514,"byte_end":35588,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35589,"byte_end":35615,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35616,"byte_end":35619,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35620,"byte_end":35632,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35633,"byte_end":35636,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35637,"byte_end":35715,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35716,"byte_end":35789,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35790,"byte_end":35840,"line_start":44,"line_end":44,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":265},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36150,"byte_end":36154,"line_start":50,"line_end":50,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":35876,"byte_end":35894,"line_start":46,"line_end":46,"column_start":5,"column_end":23}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36091,"byte_end":36139,"line_start":49,"line_end":49,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36265,"byte_end":36282,"line_start":54,"line_end":54,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> NonZeroUsize","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36167,"byte_end":36238,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36243,"byte_end":36257,"line_start":53,"line_end":53,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36850,"byte_end":36867,"line_start":67,"line_end":67,"column_start":12,"column_end":29},"name":"RawReentrantMutex","qualname":"::remutex::RawReentrantMutex","value":"RawReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" A raw mutex type that wraps another raw mutex to provide reentrancy.","sig":null,"attributes":[{"value":"/ A raw mutex type that wraps another raw mutex to provide reentrancy.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36310,"byte_end":36382,"line_start":57,"line_end":57,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36383,"byte_end":36386,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Although this has the same methods as the [`RawMutex`] trait, it does","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36387,"byte_end":36460,"line_start":59,"line_end":59,"column_start":1,"column_end":74}},{"value":"/ not implement it, and should not be used in the same way, since this","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36461,"byte_end":36533,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/ mutex can successfully acquire a lock multiple times in the same thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36534,"byte_end":36610,"line_start":61,"line_end":61,"column_start":1,"column_end":77}},{"value":"/ Only use this when you know you want a raw mutex that can be locked","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36611,"byte_end":36682,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/ reentrantly; you probably want [`ReentrantMutex`] instead.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36683,"byte_end":36745,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36746,"byte_end":36749,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`RawMutex`]: trait.RawMutex.html","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36750,"byte_end":36787,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/ [`ReentrantMutex`]: struct.ReentrantMutex.html","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":36788,"byte_end":36838,"line_start":66,"line_end":66,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":283},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37323,"byte_end":37327,"line_start":80,"line_end":80,"column_start":15,"column_end":19},"name":"INIT","qualname":"::remutex::RawReentrantMutex::<R, G>::INIT","value":"Self","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37215,"byte_end":37255,"line_start":78,"line_end":78,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37260,"byte_end":37308,"line_start":79,"line_end":79,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38263,"byte_end":38267,"line_start":110,"line_end":110,"column_start":12,"column_end":16},"name":"lock","qualname":"<RawReentrantMutex<R, G>>::lock","value":"pub fn lock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking if it's held by another thread.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking if it's held by another thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38172,"byte_end":38237,"line_start":108,"line_end":108,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38242,"byte_end":38251,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38542,"byte_end":38550,"line_start":120,"line_end":120,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<RawReentrantMutex<R, G>>::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38380,"byte_end":38447,"line_start":117,"line_end":117,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38452,"byte_end":38516,"line_start":118,"line_end":118,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38521,"byte_end":38530,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38909,"byte_end":38915,"line_start":131,"line_end":131,"column_start":19,"column_end":25},"name":"unlock","qualname":"<RawReentrantMutex<R, G>>::unlock","value":"pub unsafe fn unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex. The inner mutex may not be unlocked if\n this mutex was acquired previously in the current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex. The inner mutex may not be unlocked if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38632,"byte_end":38694,"line_start":124,"line_end":124,"column_start":5,"column_end":67}},{"value":"/ this mutex was acquired previously in the current thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38699,"byte_end":38760,"line_start":125,"line_end":125,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38765,"byte_end":38768,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38773,"byte_end":38785,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38790,"byte_end":38793,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38798,"byte_end":38876,"line_start":129,"line_end":129,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":38881,"byte_end":38890,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39228,"byte_end":39237,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RawReentrantMutex<R, G>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39153,"byte_end":39202,"line_start":140,"line_end":140,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39207,"byte_end":39216,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39392,"byte_end":39418,"line_start":148,"line_end":148,"column_start":12,"column_end":38},"name":"is_owned_by_current_thread","qualname":"<RawReentrantMutex<R, G>>::is_owned_by_current_thread","value":"pub fn is_owned_by_current_thread(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently held by the current thread.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently held by the current thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39297,"byte_end":39366,"line_start":146,"line_end":146,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39371,"byte_end":39380,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39939,"byte_end":39950,"line_start":163,"line_end":163,"column_start":19,"column_end":30},"name":"unlock_fair","qualname":"<RawReentrantMutex<R, G>>::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol. The inner mutex\n may not be unlocked if this mutex was acquired previously in the\n current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol. The inner mutex","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39625,"byte_end":39693,"line_start":155,"line_end":155,"column_start":5,"column_end":73}},{"value":"/ may not be unlocked if this mutex was acquired previously in the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39698,"byte_end":39766,"line_start":156,"line_end":156,"column_start":5,"column_end":73}},{"value":"/ current thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39771,"byte_end":39790,"line_start":157,"line_end":157,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39795,"byte_end":39798,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39803,"byte_end":39815,"line_start":159,"line_end":159,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39820,"byte_end":39823,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39828,"byte_end":39906,"line_start":161,"line_end":161,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39911,"byte_end":39920,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40613,"byte_end":40617,"line_start":182,"line_end":182,"column_start":19,"column_end":23},"name":"bump","qualname":"<RawReentrantMutex<R, G>>::bump","value":"pub unsafe fn bump(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40193,"byte_end":40262,"line_start":172,"line_end":172,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40267,"byte_end":40270,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40275,"byte_end":40351,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40356,"byte_end":40432,"line_start":175,"line_end":175,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40437,"byte_end":40464,"line_start":176,"line_end":176,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40469,"byte_end":40472,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40477,"byte_end":40489,"line_start":178,"line_end":178,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40494,"byte_end":40497,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40502,"byte_end":40580,"line_start":180,"line_end":180,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40585,"byte_end":40594,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41035,"byte_end":41049,"line_start":195,"line_end":195,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<RawReentrantMutex<R, G>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40948,"byte_end":41009,"line_start":193,"line_end":193,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41014,"byte_end":41023,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41252,"byte_end":41264,"line_start":201,"line_end":201,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<RawReentrantMutex<R, G>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41165,"byte_end":41226,"line_start":199,"line_end":199,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41231,"byte_end":41240,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":305},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41852,"byte_end":41866,"line_start":217,"line_end":217,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41377,"byte_end":41440,"line_start":206,"line_end":206,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41441,"byte_end":41444,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41445,"byte_end":41515,"line_start":208,"line_end":208,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41516,"byte_end":41519,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41520,"byte_end":41600,"line_start":210,"line_end":210,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41601,"byte_end":41619,"line_start":211,"line_end":211,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41620,"byte_end":41700,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41701,"byte_end":41740,"line_start":213,"line_end":213,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41741,"byte_end":41744,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41745,"byte_end":41825,"line_start":215,"line_end":215,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":41826,"byte_end":41840,"line_start":216,"line_end":216,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42846,"byte_end":42849,"line_start":250,"line_end":250,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42714,"byte_end":42783,"line_start":247,"line_end":247,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42788,"byte_end":42820,"line_start":248,"line_end":248,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42825,"byte_end":42834,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43264,"byte_end":43274,"line_start":264,"line_end":264,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43183,"byte_end":43238,"line_start":262,"line_end":262,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43243,"byte_end":43252,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43615,"byte_end":43624,"line_start":276,"line_end":276,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"pub const fn const_new(R, G, T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex based on a pre-existing raw mutex and a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43372,"byte_end":43445,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ helper to get the thread ID.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43450,"byte_end":43482,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43487,"byte_end":43490,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43495,"byte_end":43569,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ Rust.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43574,"byte_end":43583,"line_start":274,"line_end":274,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43588,"byte_end":43597,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44963,"byte_end":44967,"line_start":312,"line_end":312,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44324,"byte_end":44400,"line_start":301,"line_end":301,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44405,"byte_end":44418,"line_start":302,"line_end":302,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44423,"byte_end":44426,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44431,"byte_end":44507,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44512,"byte_end":44588,"line_start":305,"line_end":305,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44593,"byte_end":44669,"line_start":306,"line_end":306,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44674,"byte_end":44738,"line_start":307,"line_end":307,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44743,"byte_end":44814,"line_start":308,"line_end":308,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44819,"byte_end":44894,"line_start":309,"line_end":309,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44899,"byte_end":44937,"line_start":310,"line_end":310,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44942,"byte_end":44951,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45433,"byte_end":45441,"line_start":326,"line_end":326,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45131,"byte_end":45165,"line_start":318,"line_end":318,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45170,"byte_end":45173,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45178,"byte_end":45254,"line_start":320,"line_end":320,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45259,"byte_end":45335,"line_start":321,"line_end":321,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45340,"byte_end":45361,"line_start":322,"line_end":322,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45366,"byte_end":45369,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45374,"byte_end":45407,"line_start":324,"line_end":324,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45412,"byte_end":45421,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45935,"byte_end":45942,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45679,"byte_end":45734,"line_start":335,"line_end":335,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45739,"byte_end":45742,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45747,"byte_end":45831,"line_start":337,"line_end":337,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45836,"byte_end":45909,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":45914,"byte_end":45923,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46093,"byte_end":46102,"line_start":346,"line_end":346,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<ReentrantMutex<R, G, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46018,"byte_end":46067,"line_start":344,"line_end":344,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46072,"byte_end":46081,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46255,"byte_end":46281,"line_start":352,"line_end":352,"column_start":12,"column_end":38},"name":"is_owned_by_current_thread","qualname":"<ReentrantMutex<R, G, T>>::is_owned_by_current_thread","value":"pub fn is_owned_by_current_thread(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently held by the current thread.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently held by the current thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46160,"byte_end":46229,"line_start":350,"line_end":350,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46234,"byte_end":46243,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46882,"byte_end":46894,"line_start":368,"line_end":368,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46356,"byte_end":46387,"line_start":356,"line_end":356,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46392,"byte_end":46395,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46400,"byte_end":46474,"line_start":358,"line_end":358,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46479,"byte_end":46558,"line_start":359,"line_end":359,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46563,"byte_end":46584,"line_start":360,"line_end":360,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46589,"byte_end":46592,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46597,"byte_end":46609,"line_start":362,"line_end":362,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46614,"byte_end":46617,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46622,"byte_end":46696,"line_start":364,"line_end":364,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46701,"byte_end":46779,"line_start":365,"line_end":365,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46784,"byte_end":46849,"line_start":366,"line_end":366,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46854,"byte_end":46863,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47340,"byte_end":47343,"line_start":382,"line_end":382,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46942,"byte_end":46986,"line_start":372,"line_end":372,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46991,"byte_end":46994,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":46999,"byte_end":47074,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47079,"byte_end":47140,"line_start":375,"line_end":375,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47145,"byte_end":47148,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47153,"byte_end":47165,"line_start":377,"line_end":377,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47170,"byte_end":47173,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47178,"byte_end":47245,"line_start":379,"line_end":379,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47250,"byte_end":47307,"line_start":380,"line_end":380,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47312,"byte_end":47321,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47945,"byte_end":47953,"line_start":399,"line_end":399,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<ReentrantMutex<R, G, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47394,"byte_end":47443,"line_start":386,"line_end":386,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47448,"byte_end":47451,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47456,"byte_end":47530,"line_start":388,"line_end":388,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47535,"byte_end":47609,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ when dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47614,"byte_end":47640,"line_start":390,"line_end":390,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47645,"byte_end":47648,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47653,"byte_end":47665,"line_start":392,"line_end":392,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47670,"byte_end":47673,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47678,"byte_end":47749,"line_start":394,"line_end":394,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47754,"byte_end":47826,"line_start":395,"line_end":395,"column_start":5,"column_end":77}},{"value":"/ `ReentrantMutexGuard` but that guard has been discarded using","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47831,"byte_end":47896,"line_start":396,"line_end":396,"column_start":5,"column_end":70}},{"value":"/ `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47901,"byte_end":47919,"line_start":397,"line_end":397,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":47924,"byte_end":47933,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50035,"byte_end":50052,"line_start":456,"line_end":456,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49480,"byte_end":49540,"line_start":444,"line_end":444,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49545,"byte_end":49548,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49553,"byte_end":49627,"line_start":446,"line_end":446,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49632,"byte_end":49711,"line_start":447,"line_end":447,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49716,"byte_end":49737,"line_start":448,"line_end":448,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49742,"byte_end":49745,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49750,"byte_end":49762,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49767,"byte_end":49770,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49775,"byte_end":49849,"line_start":452,"line_end":452,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49854,"byte_end":49932,"line_start":453,"line_end":453,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49937,"byte_end":50002,"line_start":454,"line_end":454,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50007,"byte_end":50016,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50480,"byte_end":50492,"line_start":468,"line_end":468,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50183,"byte_end":50244,"line_start":462,"line_end":462,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50249,"byte_end":50252,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50257,"byte_end":50327,"line_start":464,"line_end":464,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50332,"byte_end":50407,"line_start":465,"line_end":465,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50412,"byte_end":50454,"line_start":466,"line_end":466,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50459,"byte_end":50468,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":51060,"byte_end":51074,"line_start":483,"line_end":483,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50763,"byte_end":50824,"line_start":477,"line_end":477,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50829,"byte_end":50832,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50837,"byte_end":50907,"line_start":479,"line_end":479,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50912,"byte_end":50987,"line_start":480,"line_end":480,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50992,"byte_end":51034,"line_start":481,"line_end":481,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":51039,"byte_end":51048,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":373},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":54858,"byte_end":54877,"line_start":597,"line_end":597,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":54515,"byte_end":54602,"line_start":591,"line_end":591,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":54603,"byte_end":54666,"line_start":592,"line_end":592,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":54667,"byte_end":54670,"line_start":593,"line_end":593,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":54671,"byte_end":54749,"line_start":594,"line_end":594,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":54750,"byte_end":54777,"line_start":595,"line_end":595,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":54778,"byte_end":54846,"line_start":596,"line_end":596,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55338,"byte_end":55345,"line_start":609,"line_end":609,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55262,"byte_end":55326,"line_start":608,"line_end":608,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55851,"byte_end":55854,"line_start":622,"line_end":622,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55418,"byte_end":55497,"line_start":613,"line_end":613,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55502,"byte_end":55505,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55510,"byte_end":55576,"line_start":615,"line_end":615,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55581,"byte_end":55613,"line_start":616,"line_end":616,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55618,"byte_end":55621,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55626,"byte_end":55677,"line_start":618,"line_end":618,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55682,"byte_end":55767,"line_start":619,"line_end":619,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55772,"byte_end":55825,"line_start":620,"line_end":620,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55830,"byte_end":55839,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56724,"byte_end":56731,"line_start":646,"line_end":646,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56211,"byte_end":56289,"line_start":636,"line_end":636,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56294,"byte_end":56370,"line_start":637,"line_end":637,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56375,"byte_end":56378,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56383,"byte_end":56449,"line_start":639,"line_end":639,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56454,"byte_end":56486,"line_start":640,"line_end":640,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56491,"byte_end":56494,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56499,"byte_end":56550,"line_start":642,"line_end":642,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56555,"byte_end":56640,"line_start":643,"line_end":643,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56645,"byte_end":56698,"line_start":644,"line_end":644,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":56703,"byte_end":56712,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57460,"byte_end":57468,"line_start":671,"line_end":671,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57234,"byte_end":57298,"line_start":666,"line_end":666,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57303,"byte_end":57306,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57311,"byte_end":57379,"line_start":668,"line_end":668,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57384,"byte_end":57434,"line_start":669,"line_end":669,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57439,"byte_end":57448,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58629,"byte_end":58640,"line_start":700,"line_end":700,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57839,"byte_end":57890,"line_start":687,"line_end":687,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57895,"byte_end":57898,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57903,"byte_end":57977,"line_start":689,"line_end":689,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57982,"byte_end":58054,"line_start":690,"line_end":690,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58059,"byte_end":58133,"line_start":691,"line_end":691,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58138,"byte_end":58213,"line_start":692,"line_end":692,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58218,"byte_end":58289,"line_start":693,"line_end":693,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58294,"byte_end":58351,"line_start":694,"line_end":694,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58356,"byte_end":58359,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58364,"byte_end":58440,"line_start":696,"line_end":696,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58445,"byte_end":58521,"line_start":697,"line_end":697,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58526,"byte_end":58603,"line_start":698,"line_end":698,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58608,"byte_end":58617,"line_start":699,"line_end":699,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59106,"byte_end":59119,"line_start":715,"line_end":715,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58818,"byte_end":58882,"line_start":708,"line_end":708,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58887,"byte_end":58890,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58895,"byte_end":58944,"line_start":710,"line_end":710,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58949,"byte_end":58952,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":58957,"byte_end":59025,"line_start":712,"line_end":712,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59030,"byte_end":59080,"line_start":713,"line_end":713,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59085,"byte_end":59094,"line_start":714,"line_end":714,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59682,"byte_end":59686,"line_start":733,"line_end":733,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59385,"byte_end":59454,"line_start":727,"line_end":727,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59459,"byte_end":59462,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59467,"byte_end":59543,"line_start":729,"line_end":729,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59548,"byte_end":59624,"line_start":730,"line_end":730,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59629,"byte_end":59656,"line_start":731,"line_end":731,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59661,"byte_end":59670,"line_start":732,"line_end":732,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":435},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64829,"byte_end":64854,"line_start":902,"line_end":902,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64357,"byte_end":64441,"line_start":894,"line_end":894,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64442,"byte_end":64477,"line_start":895,"line_end":895,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64478,"byte_end":64481,"line_start":896,"line_end":896,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64482,"byte_end":64579,"line_start":897,"line_end":897,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64580,"byte_end":64655,"line_start":898,"line_end":898,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64656,"byte_end":64736,"line_start":899,"line_end":899,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64737,"byte_end":64748,"line_start":900,"line_end":900,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":64749,"byte_end":64817,"line_start":901,"line_end":901,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65701,"byte_end":65704,"line_start":925,"line_end":925,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65256,"byte_end":65335,"line_start":916,"line_end":916,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65340,"byte_end":65343,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65348,"byte_end":65420,"line_start":918,"line_end":918,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65425,"byte_end":65457,"line_start":919,"line_end":919,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65462,"byte_end":65465,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65470,"byte_end":65521,"line_start":921,"line_end":921,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65526,"byte_end":65617,"line_start":922,"line_end":922,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65622,"byte_end":65675,"line_start":923,"line_end":923,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65680,"byte_end":65689,"line_start":924,"line_end":924,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66563,"byte_end":66570,"line_start":949,"line_end":949,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66038,"byte_end":66116,"line_start":939,"line_end":939,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66121,"byte_end":66197,"line_start":940,"line_end":940,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66202,"byte_end":66205,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66210,"byte_end":66282,"line_start":942,"line_end":942,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66287,"byte_end":66319,"line_start":943,"line_end":943,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66324,"byte_end":66327,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66332,"byte_end":66383,"line_start":945,"line_end":945,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66388,"byte_end":66479,"line_start":946,"line_end":946,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66484,"byte_end":66537,"line_start":947,"line_end":947,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":66542,"byte_end":66551,"line_start":948,"line_end":948,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67943,"byte_end":67954,"line_start":986,"line_end":986,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67153,"byte_end":67204,"line_start":973,"line_end":973,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67209,"byte_end":67212,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67217,"byte_end":67291,"line_start":975,"line_end":975,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67296,"byte_end":67368,"line_start":976,"line_end":976,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67373,"byte_end":67447,"line_start":977,"line_end":977,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67452,"byte_end":67527,"line_start":978,"line_end":978,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67532,"byte_end":67603,"line_start":979,"line_end":979,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67608,"byte_end":67665,"line_start":980,"line_end":980,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67670,"byte_end":67673,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67678,"byte_end":67754,"line_start":982,"line_end":982,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67759,"byte_end":67835,"line_start":983,"line_end":983,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67840,"byte_end":67917,"line_start":984,"line_end":984,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67922,"byte_end":67931,"line_start":985,"line_end":985,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":511},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70505,"byte_end":70514,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70058,"byte_end":70104,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70105,"byte_end":70108,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70109,"byte_end":70185,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70186,"byte_end":70222,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70223,"byte_end":70226,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70227,"byte_end":70239,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70240,"byte_end":70243,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70244,"byte_end":70319,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70320,"byte_end":70399,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70400,"byte_end":70475,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70476,"byte_end":70487,"line_start":37,"line_end":37,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":512},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70820,"byte_end":70824,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70521,"byte_end":70564,"line_start":39,"line_end":39,"column_start":5,"column_end":48}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70761,"byte_end":70809,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70989,"byte_end":71000,"line_start":47,"line_end":47,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70837,"byte_end":70912,"line_start":45,"line_end":45,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":70917,"byte_end":70979,"line_start":46,"line_end":46,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71097,"byte_end":71108,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71007,"byte_end":71089,"line_start":49,"line_end":49,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71185,"byte_end":71200,"line_start":53,"line_end":53,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71122,"byte_end":71177,"line_start":52,"line_end":52,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71385,"byte_end":71398,"line_start":60,"line_end":60,"column_start":15,"column_end":28},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub unsafe fn unlock_shared(&Self)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Releases a shared lock.","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71222,"byte_end":71249,"line_start":55,"line_end":55,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71254,"byte_end":71257,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71262,"byte_end":71274,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71279,"byte_end":71282,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71287,"byte_end":71370,"line_start":59,"line_end":59,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71506,"byte_end":71520,"line_start":63,"line_end":63,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71412,"byte_end":71498,"line_start":62,"line_end":62,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71601,"byte_end":71619,"line_start":66,"line_end":66,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71534,"byte_end":71593,"line_start":65,"line_end":65,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71812,"byte_end":71828,"line_start":73,"line_end":73,"column_start":15,"column_end":31},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub unsafe fn unlock_exclusive(&Self)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71641,"byte_end":71672,"line_start":68,"line_end":68,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71677,"byte_end":71680,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71685,"byte_end":71697,"line_start":70,"line_end":70,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71702,"byte_end":71705,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71710,"byte_end":71797,"line_start":72,"line_end":72,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71923,"byte_end":71932,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::rwlock::RawRwLock::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Checks if this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks if this `RwLock` is currently locked in any way.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71842,"byte_end":71901,"line_start":75,"line_end":75,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":71906,"byte_end":71915,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":521},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72593,"byte_end":72606,"line_start":95,"line_end":95,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72213,"byte_end":72277,"line_start":89,"line_end":89,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72278,"byte_end":72281,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72282,"byte_end":72362,"line_start":91,"line_end":91,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72363,"byte_end":72438,"line_start":92,"line_end":92,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72439,"byte_end":72513,"line_start":93,"line_end":93,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72514,"byte_end":72575,"line_start":94,"line_end":94,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72816,"byte_end":72834,"line_start":101,"line_end":101,"column_start":15,"column_end":33},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub unsafe fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":521},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72624,"byte_end":72680,"line_start":96,"line_end":96,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72685,"byte_end":72688,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72693,"byte_end":72705,"line_start":98,"line_end":98,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72710,"byte_end":72713,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72718,"byte_end":72801,"line_start":100,"line_end":100,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73048,"byte_end":73069,"line_start":108,"line_end":108,"column_start":15,"column_end":36},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub unsafe fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":521},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72848,"byte_end":72908,"line_start":103,"line_end":103,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72913,"byte_end":72916,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72921,"byte_end":72933,"line_start":105,"line_end":105,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72938,"byte_end":72941,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72946,"byte_end":73033,"line_start":107,"line_end":107,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73508,"byte_end":73519,"line_start":119,"line_end":119,"column_start":15,"column_end":26},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub unsafe fn bump_shared(&Self)","parent":{"krate":0,"index":521},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73083,"byte_end":73156,"line_start":110,"line_end":110,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73161,"byte_end":73164,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73169,"byte_end":73252,"line_start":112,"line_end":112,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73257,"byte_end":73340,"line_start":113,"line_end":113,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73345,"byte_end":73372,"line_start":114,"line_end":114,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73377,"byte_end":73380,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73385,"byte_end":73397,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73402,"byte_end":73405,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73410,"byte_end":73493,"line_start":118,"line_end":118,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74042,"byte_end":74056,"line_start":133,"line_end":133,"column_start":15,"column_end":29},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub unsafe fn bump_exclusive(&Self)","parent":{"krate":0,"index":521},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73603,"byte_end":73680,"line_start":124,"line_end":124,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73685,"byte_end":73688,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73693,"byte_end":73779,"line_start":126,"line_end":126,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73784,"byte_end":73870,"line_start":127,"line_end":127,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73875,"byte_end":73902,"line_start":128,"line_end":128,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73907,"byte_end":73910,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73915,"byte_end":73927,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73932,"byte_end":73935,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":73940,"byte_end":74027,"line_start":132,"line_end":132,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":526},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74273,"byte_end":74291,"line_start":141,"line_end":141,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":527}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74144,"byte_end":74218,"line_start":139,"line_end":139,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74219,"byte_end":74255,"line_start":140,"line_end":140,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74590,"byte_end":74599,"line_start":148,"line_end":148,"column_start":15,"column_end":24},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub unsafe fn downgrade(&Self)","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74309,"byte_end":74379,"line_start":142,"line_end":142,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74384,"byte_end":74450,"line_start":143,"line_end":143,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74455,"byte_end":74458,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74463,"byte_end":74475,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74480,"byte_end":74483,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74488,"byte_end":74575,"line_start":147,"line_end":147,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":528},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74841,"byte_end":74855,"line_start":155,"line_end":155,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74611,"byte_end":74682,"line_start":151,"line_end":151,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74683,"byte_end":74686,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74687,"byte_end":74767,"line_start":153,"line_end":153,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74768,"byte_end":74823,"line_start":154,"line_end":154,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":529},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74925,"byte_end":74933,"line_start":157,"line_end":157,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74873,"byte_end":74915,"line_start":156,"line_end":156,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":530},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74993,"byte_end":75000,"line_start":160,"line_end":160,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74940,"byte_end":74983,"line_start":159,"line_end":159,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75080,"byte_end":75099,"line_start":163,"line_end":163,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75007,"byte_end":75072,"line_start":162,"line_end":162,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75219,"byte_end":75240,"line_start":166,"line_end":166,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75146,"byte_end":75211,"line_start":165,"line_end":165,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75363,"byte_end":75385,"line_start":169,"line_end":169,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75286,"byte_end":75355,"line_start":168,"line_end":168,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75509,"byte_end":75533,"line_start":172,"line_end":172,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75432,"byte_end":75501,"line_start":171,"line_end":171,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":535},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75966,"byte_end":75984,"line_start":182,"line_end":182,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75577,"byte_end":75647,"line_start":175,"line_end":175,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75648,"byte_end":75651,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75652,"byte_end":75707,"line_start":177,"line_end":177,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75708,"byte_end":75783,"line_start":178,"line_end":178,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75784,"byte_end":75855,"line_start":179,"line_end":179,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75856,"byte_end":75930,"line_start":180,"line_end":180,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75931,"byte_end":75948,"line_start":181,"line_end":181,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76085,"byte_end":76106,"line_start":184,"line_end":184,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":535},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76002,"byte_end":76077,"line_start":183,"line_end":183,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76214,"byte_end":76239,"line_start":187,"line_end":187,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":535},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76120,"byte_end":76206,"line_start":186,"line_end":186,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":538},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76360,"byte_end":76383,"line_start":191,"line_end":191,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76259,"byte_end":76342,"line_start":190,"line_end":190,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76557,"byte_end":76586,"line_start":194,"line_end":194,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":538},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76427,"byte_end":76500,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76505,"byte_end":76549,"line_start":193,"line_end":193,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76763,"byte_end":76794,"line_start":198,"line_end":198,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":538},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76633,"byte_end":76706,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76711,"byte_end":76755,"line_start":197,"line_end":197,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":541},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77170,"byte_end":77186,"line_start":207,"line_end":207,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76838,"byte_end":76916,"line_start":201,"line_end":201,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76917,"byte_end":76947,"line_start":202,"line_end":202,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76948,"byte_end":76951,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76952,"byte_end":77025,"line_start":204,"line_end":204,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77026,"byte_end":77100,"line_start":205,"line_end":205,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77101,"byte_end":77152,"line_start":206,"line_end":206,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77299,"byte_end":77314,"line_start":209,"line_end":209,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77204,"byte_end":77291,"line_start":208,"line_end":208,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77396,"byte_end":77415,"line_start":212,"line_end":212,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77328,"byte_end":77388,"line_start":211,"line_end":211,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77610,"byte_end":77627,"line_start":219,"line_end":219,"column_start":15,"column_end":32},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub unsafe fn unlock_upgradable(&Self)","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77437,"byte_end":77469,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77474,"byte_end":77477,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77482,"byte_end":77494,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77499,"byte_end":77502,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77507,"byte_end":77595,"line_start":218,"line_end":218,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77835,"byte_end":77842,"line_start":226,"line_end":226,"column_start":15,"column_end":22},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub unsafe fn upgrade(&Self)","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77641,"byte_end":77694,"line_start":221,"line_end":221,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77699,"byte_end":77702,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77707,"byte_end":77719,"line_start":223,"line_end":223,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77724,"byte_end":77727,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77732,"byte_end":77820,"line_start":225,"line_end":225,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78086,"byte_end":78097,"line_start":234,"line_end":234,"column_start":15,"column_end":26},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub unsafe fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77856,"byte_end":77927,"line_start":228,"line_end":228,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77932,"byte_end":77945,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77950,"byte_end":77953,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77958,"byte_end":77970,"line_start":231,"line_end":231,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77975,"byte_end":77978,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77983,"byte_end":78071,"line_start":233,"line_end":233,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":547},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78224,"byte_end":78244,"line_start":239,"line_end":239,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78117,"byte_end":78191,"line_start":237,"line_end":237,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78192,"byte_end":78206,"line_start":238,"line_end":238,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78487,"byte_end":78509,"line_start":245,"line_end":245,"column_start":15,"column_end":37},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub unsafe fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":547},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78285,"byte_end":78346,"line_start":240,"line_end":240,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78351,"byte_end":78354,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78359,"byte_end":78371,"line_start":242,"line_end":242,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78376,"byte_end":78379,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78384,"byte_end":78472,"line_start":244,"line_end":244,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78966,"byte_end":78981,"line_start":256,"line_end":256,"column_start":15,"column_end":30},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub unsafe fn bump_upgradable(&Self)","parent":{"krate":0,"index":547},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78523,"byte_end":78601,"line_start":247,"line_end":247,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78606,"byte_end":78609,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78614,"byte_end":78701,"line_start":249,"line_end":249,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78706,"byte_end":78793,"line_start":250,"line_end":250,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78798,"byte_end":78825,"line_start":251,"line_end":251,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78830,"byte_end":78833,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78838,"byte_end":78850,"line_start":253,"line_end":253,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78855,"byte_end":78858,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78863,"byte_end":78951,"line_start":255,"line_end":255,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":550},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79180,"byte_end":79205,"line_start":264,"line_end":264,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79071,"byte_end":79145,"line_start":262,"line_end":262,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79146,"byte_end":79162,"line_start":263,"line_end":263,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79443,"byte_end":79463,"line_start":270,"line_end":270,"column_start":15,"column_end":35},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub unsafe fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":550},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79251,"byte_end":79302,"line_start":265,"line_end":265,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79307,"byte_end":79310,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79315,"byte_end":79327,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79332,"byte_end":79335,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79340,"byte_end":79428,"line_start":269,"line_end":269,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79672,"byte_end":79695,"line_start":277,"line_end":277,"column_start":15,"column_end":38},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub unsafe fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":550},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79477,"byte_end":79532,"line_start":272,"line_end":272,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79537,"byte_end":79540,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79545,"byte_end":79557,"line_start":274,"line_end":274,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79562,"byte_end":79565,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79570,"byte_end":79657,"line_start":276,"line_end":276,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":553},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79821,"byte_end":79842,"line_start":282,"line_end":282,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79707,"byte_end":79784,"line_start":280,"line_end":280,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79785,"byte_end":79803,"line_start":281,"line_end":281,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79962,"byte_end":79985,"line_start":284,"line_end":284,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":553},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79884,"byte_end":79954,"line_start":283,"line_end":283,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80110,"byte_end":80135,"line_start":287,"line_end":287,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":553},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80032,"byte_end":80102,"line_start":286,"line_end":286,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80421,"byte_end":80436,"line_start":295,"line_end":295,"column_start":15,"column_end":30},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub unsafe fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":553},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80181,"byte_end":80252,"line_start":289,"line_end":289,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80257,"byte_end":80280,"line_start":290,"line_end":290,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80285,"byte_end":80288,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80293,"byte_end":80305,"line_start":292,"line_end":292,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80310,"byte_end":80313,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80318,"byte_end":80406,"line_start":294,"line_end":294,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80723,"byte_end":80740,"line_start":303,"line_end":303,"column_start":15,"column_end":32},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub unsafe fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":553},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80483,"byte_end":80554,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80559,"byte_end":80582,"line_start":298,"line_end":298,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80587,"byte_end":80590,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80595,"byte_end":80607,"line_start":300,"line_end":300,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80612,"byte_end":80615,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80620,"byte_end":80708,"line_start":302,"line_end":302,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":558},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":81492,"byte_end":81498,"line_start":318,"line_end":318,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80784,"byte_end":80808,"line_start":306,"line_end":306,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80809,"byte_end":80812,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80813,"byte_end":80890,"line_start":308,"line_end":308,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80891,"byte_end":80970,"line_start":309,"line_end":309,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":80971,"byte_end":81050,"line_start":310,"line_end":310,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":81051,"byte_end":81109,"line_start":311,"line_end":311,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":81110,"byte_end":81113,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":81114,"byte_end":81191,"line_start":313,"line_end":313,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":81192,"byte_end":81272,"line_start":314,"line_end":314,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":81273,"byte_end":81351,"line_start":315,"line_end":315,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":81352,"byte_end":81430,"line_start":316,"line_end":316,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":81431,"byte_end":81480,"line_start":317,"line_end":317,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82773,"byte_end":82776,"line_start":369,"line_end":369,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82647,"byte_end":82710,"line_start":366,"line_end":366,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82715,"byte_end":82747,"line_start":367,"line_end":367,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82752,"byte_end":82761,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83019,"byte_end":83029,"line_start":379,"line_end":379,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82907,"byte_end":82965,"line_start":376,"line_end":376,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82970,"byte_end":82979,"line_start":377,"line_end":377,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82984,"byte_end":83007,"line_start":378,"line_end":378,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83349,"byte_end":83358,"line_start":391,"line_end":391,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"pub const fn const_new(R, T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"/ Creates a new new instance of an `RwLock<T>` based on a pre-existing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83124,"byte_end":83196,"line_start":385,"line_end":385,"column_start":5,"column_end":77}},{"value":"/ `RawRwLock<T>`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83201,"byte_end":83220,"line_start":386,"line_end":386,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83225,"byte_end":83228,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83233,"byte_end":83303,"line_start":388,"line_end":388,"column_start":5,"column_end":75}},{"value":"/ Rust.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83308,"byte_end":83317,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83322,"byte_end":83331,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84685,"byte_end":84689,"line_start":435,"line_end":435,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84077,"byte_end":84153,"line_start":422,"line_end":422,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84158,"byte_end":84187,"line_start":423,"line_end":423,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84192,"byte_end":84195,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84200,"byte_end":84276,"line_start":425,"line_end":425,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84281,"byte_end":84357,"line_start":426,"line_end":426,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84362,"byte_end":84386,"line_start":427,"line_end":427,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84391,"byte_end":84394,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84399,"byte_end":84475,"line_start":429,"line_end":429,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84480,"byte_end":84546,"line_start":430,"line_end":430,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84551,"byte_end":84554,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84559,"byte_end":84631,"line_start":432,"line_end":432,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84636,"byte_end":84659,"line_start":433,"line_end":433,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84664,"byte_end":84673,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85192,"byte_end":85200,"line_start":449,"line_end":449,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84858,"byte_end":84920,"line_start":441,"line_end":441,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84925,"byte_end":84928,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":84933,"byte_end":85010,"line_start":443,"line_end":443,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85015,"byte_end":85092,"line_start":444,"line_end":444,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85097,"byte_end":85120,"line_start":445,"line_end":445,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85125,"byte_end":85128,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85133,"byte_end":85166,"line_start":447,"line_end":447,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85171,"byte_end":85180,"line_start":448,"line_end":448,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85819,"byte_end":85824,"line_start":467,"line_end":467,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85443,"byte_end":85516,"line_start":458,"line_end":458,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85521,"byte_end":85557,"line_start":459,"line_end":459,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85562,"byte_end":85565,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85570,"byte_end":85640,"line_start":461,"line_end":461,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85645,"byte_end":85683,"line_start":462,"line_end":462,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85688,"byte_end":85691,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85696,"byte_end":85771,"line_start":464,"line_end":464,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85776,"byte_end":85793,"line_start":465,"line_end":465,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85798,"byte_end":85807,"line_start":466,"line_end":466,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86323,"byte_end":86332,"line_start":481,"line_end":481,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":85998,"byte_end":86061,"line_start":473,"line_end":473,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86066,"byte_end":86069,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86074,"byte_end":86150,"line_start":475,"line_end":475,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86155,"byte_end":86228,"line_start":476,"line_end":476,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86233,"byte_end":86251,"line_start":477,"line_end":477,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86256,"byte_end":86259,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86264,"byte_end":86297,"line_start":479,"line_end":479,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86302,"byte_end":86311,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86828,"byte_end":86835,"line_start":495,"line_end":495,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86580,"byte_end":86635,"line_start":490,"line_end":490,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86640,"byte_end":86643,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86648,"byte_end":86724,"line_start":492,"line_end":492,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86729,"byte_end":86802,"line_start":493,"line_end":493,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86807,"byte_end":86816,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87001,"byte_end":87010,"line_start":501,"line_end":501,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RwLock<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks whether this `RwLock` is currently locked in any way.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86911,"byte_end":86975,"line_start":499,"line_end":499,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":86980,"byte_end":86989,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87599,"byte_end":87616,"line_start":517,"line_end":517,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87068,"byte_end":87101,"line_start":505,"line_end":505,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87106,"byte_end":87109,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87114,"byte_end":87188,"line_start":507,"line_end":507,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87193,"byte_end":87268,"line_start":508,"line_end":508,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87273,"byte_end":87294,"line_start":509,"line_end":509,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87299,"byte_end":87302,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87307,"byte_end":87319,"line_start":511,"line_end":511,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87324,"byte_end":87327,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87332,"byte_end":87406,"line_start":513,"line_end":513,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87411,"byte_end":87485,"line_start":514,"line_end":514,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87490,"byte_end":87566,"line_start":515,"line_end":515,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87571,"byte_end":87580,"line_start":516,"line_end":516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88207,"byte_end":88225,"line_start":533,"line_end":533,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87671,"byte_end":87705,"line_start":521,"line_end":521,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87710,"byte_end":87713,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87718,"byte_end":87792,"line_start":523,"line_end":523,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87797,"byte_end":87873,"line_start":524,"line_end":524,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87878,"byte_end":87899,"line_start":525,"line_end":525,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87904,"byte_end":87907,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87912,"byte_end":87924,"line_start":527,"line_end":527,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87929,"byte_end":87932,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":87937,"byte_end":88011,"line_start":529,"line_end":529,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88016,"byte_end":88091,"line_start":530,"line_end":530,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88096,"byte_end":88174,"line_start":531,"line_end":531,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88179,"byte_end":88188,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88691,"byte_end":88694,"line_start":547,"line_end":547,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88283,"byte_end":88340,"line_start":537,"line_end":537,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88345,"byte_end":88348,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88353,"byte_end":88429,"line_start":539,"line_end":539,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88434,"byte_end":88488,"line_start":540,"line_end":540,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88493,"byte_end":88516,"line_start":541,"line_end":541,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88521,"byte_end":88524,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88529,"byte_end":88541,"line_start":543,"line_end":543,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88546,"byte_end":88549,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88554,"byte_end":88621,"line_start":545,"line_end":545,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88626,"byte_end":88672,"line_start":546,"line_end":546,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89326,"byte_end":89334,"line_start":564,"line_end":564,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<RwLock<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88739,"byte_end":88788,"line_start":551,"line_end":551,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88793,"byte_end":88796,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88801,"byte_end":88875,"line_start":553,"line_end":553,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88880,"byte_end":88953,"line_start":554,"line_end":554,"column_start":5,"column_end":78}},{"value":"/ alive, for example when dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":88958,"byte_end":89003,"line_start":555,"line_end":555,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89008,"byte_end":89011,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89016,"byte_end":89028,"line_start":557,"line_end":557,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89033,"byte_end":89036,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89041,"byte_end":89112,"line_start":559,"line_end":559,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89117,"byte_end":89189,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/ `RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89194,"byte_end":89271,"line_start":561,"line_end":561,"column_start":5,"column_end":82}},{"value":"/ using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89276,"byte_end":89300,"line_start":562,"line_end":562,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":89305,"byte_end":89314,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92820,"byte_end":92842,"line_start":660,"line_end":660,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92260,"byte_end":92322,"line_start":648,"line_end":648,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92327,"byte_end":92330,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92335,"byte_end":92409,"line_start":650,"line_end":650,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92414,"byte_end":92489,"line_start":651,"line_end":651,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92494,"byte_end":92515,"line_start":652,"line_end":652,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92520,"byte_end":92523,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92528,"byte_end":92540,"line_start":654,"line_end":654,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92545,"byte_end":92548,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92553,"byte_end":92627,"line_start":656,"line_end":656,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92632,"byte_end":92706,"line_start":657,"line_end":657,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92711,"byte_end":92787,"line_start":658,"line_end":658,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92792,"byte_end":92801,"line_start":659,"line_end":659,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93467,"byte_end":93490,"line_start":676,"line_end":676,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92902,"byte_end":92965,"line_start":664,"line_end":664,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92970,"byte_end":92973,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92978,"byte_end":93052,"line_start":666,"line_end":666,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93057,"byte_end":93133,"line_start":667,"line_end":667,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93138,"byte_end":93159,"line_start":668,"line_end":668,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93164,"byte_end":93167,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93172,"byte_end":93184,"line_start":670,"line_end":670,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93189,"byte_end":93192,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93197,"byte_end":93271,"line_start":672,"line_end":672,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93276,"byte_end":93351,"line_start":673,"line_end":673,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93356,"byte_end":93434,"line_start":674,"line_end":674,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93439,"byte_end":93448,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93942,"byte_end":93954,"line_start":689,"line_end":689,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93605,"byte_end":93682,"line_start":682,"line_end":682,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93687,"byte_end":93702,"line_start":683,"line_end":683,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93707,"byte_end":93710,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93715,"byte_end":93786,"line_start":685,"line_end":685,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93791,"byte_end":93862,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93867,"byte_end":93916,"line_start":687,"line_end":687,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93921,"byte_end":93930,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94567,"byte_end":94581,"line_start":705,"line_end":705,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94230,"byte_end":94307,"line_start":698,"line_end":698,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94312,"byte_end":94327,"line_start":699,"line_end":699,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94332,"byte_end":94335,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94340,"byte_end":94411,"line_start":701,"line_end":701,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94416,"byte_end":94487,"line_start":702,"line_end":702,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94492,"byte_end":94541,"line_start":703,"line_end":703,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94546,"byte_end":94555,"line_start":704,"line_end":704,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95202,"byte_end":95215,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94858,"byte_end":94931,"line_start":714,"line_end":714,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94936,"byte_end":94959,"line_start":715,"line_end":715,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94964,"byte_end":94967,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":94972,"byte_end":95043,"line_start":717,"line_end":717,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95048,"byte_end":95119,"line_start":718,"line_end":718,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95124,"byte_end":95176,"line_start":719,"line_end":719,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95181,"byte_end":95190,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95840,"byte_end":95855,"line_start":737,"line_end":737,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95496,"byte_end":95569,"line_start":730,"line_end":730,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95574,"byte_end":95597,"line_start":731,"line_end":731,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95602,"byte_end":95605,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95610,"byte_end":95681,"line_start":733,"line_end":733,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95686,"byte_end":95757,"line_start":734,"line_end":734,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95762,"byte_end":95814,"line_start":735,"line_end":735,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":95819,"byte_end":95828,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99644,"byte_end":99658,"line_start":824,"line_end":824,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":98851,"byte_end":98927,"line_start":808,"line_end":808,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":98932,"byte_end":98961,"line_start":809,"line_end":809,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":98966,"byte_end":98969,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":98974,"byte_end":99050,"line_start":811,"line_end":811,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99055,"byte_end":99131,"line_start":812,"line_end":812,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99136,"byte_end":99160,"line_start":813,"line_end":813,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99165,"byte_end":99168,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99173,"byte_end":99248,"line_start":815,"line_end":815,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99253,"byte_end":99328,"line_start":816,"line_end":816,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99333,"byte_end":99404,"line_start":817,"line_end":817,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99409,"byte_end":99483,"line_start":818,"line_end":818,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99488,"byte_end":99505,"line_start":819,"line_end":819,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99510,"byte_end":99513,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99518,"byte_end":99590,"line_start":821,"line_end":821,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99595,"byte_end":99618,"line_start":822,"line_end":822,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99623,"byte_end":99632,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":100342,"byte_end":100360,"line_start":841,"line_end":841,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99837,"byte_end":99899,"line_start":830,"line_end":830,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99904,"byte_end":99907,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99912,"byte_end":99989,"line_start":832,"line_end":832,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":99994,"byte_end":100071,"line_start":833,"line_end":833,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":100076,"byte_end":100099,"line_start":834,"line_end":834,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":100104,"byte_end":100107,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":100112,"byte_end":100188,"line_start":836,"line_end":836,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":100193,"byte_end":100270,"line_start":837,"line_end":837,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":100275,"byte_end":100278,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":100283,"byte_end":100316,"line_start":839,"line_end":839,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":100321,"byte_end":100330,"line_start":840,"line_end":840,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102365,"byte_end":102387,"line_start":890,"line_end":890,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":101832,"byte_end":101909,"line_start":879,"line_end":879,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":101914,"byte_end":101929,"line_start":880,"line_end":880,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":101934,"byte_end":101937,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":101942,"byte_end":102013,"line_start":882,"line_end":882,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102018,"byte_end":102089,"line_start":883,"line_end":883,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102094,"byte_end":102143,"line_start":884,"line_end":884,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102148,"byte_end":102151,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102156,"byte_end":102229,"line_start":886,"line_end":886,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102234,"byte_end":102301,"line_start":887,"line_end":887,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102306,"byte_end":102339,"line_start":888,"line_end":888,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102344,"byte_end":102353,"line_start":889,"line_end":889,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":103033,"byte_end":103057,"line_start":909,"line_end":909,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102696,"byte_end":102773,"line_start":902,"line_end":902,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102778,"byte_end":102793,"line_start":903,"line_end":903,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102798,"byte_end":102801,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102806,"byte_end":102877,"line_start":905,"line_end":905,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102882,"byte_end":102953,"line_start":906,"line_end":906,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":102958,"byte_end":103007,"line_start":907,"line_end":907,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":103012,"byte_end":103021,"line_start":908,"line_end":908,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105558,"byte_end":105573,"line_start":974,"line_end":974,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105080,"byte_end":105160,"line_start":964,"line_end":964,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105165,"byte_end":105194,"line_start":965,"line_end":965,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105199,"byte_end":105202,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105207,"byte_end":105286,"line_start":967,"line_end":967,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105291,"byte_end":105369,"line_start":968,"line_end":968,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105374,"byte_end":105419,"line_start":969,"line_end":969,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105424,"byte_end":105427,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105432,"byte_end":105504,"line_start":971,"line_end":971,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105509,"byte_end":105532,"line_start":972,"line_end":972,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105537,"byte_end":105546,"line_start":973,"line_end":973,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":106100,"byte_end":106119,"line_start":988,"line_end":988,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105762,"byte_end":105828,"line_start":980,"line_end":980,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105833,"byte_end":105836,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105841,"byte_end":105918,"line_start":982,"line_end":982,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":105923,"byte_end":106000,"line_start":983,"line_end":983,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":106005,"byte_end":106028,"line_start":984,"line_end":984,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":106033,"byte_end":106036,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":106041,"byte_end":106074,"line_start":986,"line_end":986,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":106079,"byte_end":106088,"line_start":987,"line_end":987,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108314,"byte_end":108337,"line_start":1045,"line_end":1045,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":107973,"byte_end":108054,"line_start":1038,"line_end":1038,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108059,"byte_end":108074,"line_start":1039,"line_end":1039,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108079,"byte_end":108082,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108087,"byte_end":108158,"line_start":1041,"line_end":1041,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108163,"byte_end":108234,"line_start":1042,"line_end":1042,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108239,"byte_end":108288,"line_start":1043,"line_end":1043,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108293,"byte_end":108302,"line_start":1044,"line_end":1044,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108997,"byte_end":109022,"line_start":1064,"line_end":1064,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108656,"byte_end":108737,"line_start":1057,"line_end":1057,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108742,"byte_end":108757,"line_start":1058,"line_end":1058,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108762,"byte_end":108765,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108770,"byte_end":108841,"line_start":1060,"line_end":1060,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108846,"byte_end":108917,"line_start":1061,"line_end":1061,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108922,"byte_end":108971,"line_start":1062,"line_end":1062,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":108976,"byte_end":108985,"line_start":1063,"line_end":1063,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":642},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":111952,"byte_end":111967,"line_start":1150,"line_end":1150,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":111794,"byte_end":111866,"line_start":1147,"line_end":1147,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":111867,"byte_end":111879,"line_start":1148,"line_end":1148,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":111880,"byte_end":111940,"line_start":1149,"line_end":1149,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112236,"byte_end":112242,"line_start":1157,"line_end":1157,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112158,"byte_end":112224,"line_start":1156,"line_end":1156,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112722,"byte_end":112725,"line_start":1170,"line_end":1170,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112303,"byte_end":112377,"line_start":1161,"line_end":1161,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112382,"byte_end":112385,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112390,"byte_end":112452,"line_start":1163,"line_end":1163,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112457,"byte_end":112488,"line_start":1164,"line_end":1164,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112493,"byte_end":112496,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112501,"byte_end":112552,"line_start":1166,"line_end":1166,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112557,"byte_end":112638,"line_start":1167,"line_end":1167,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112643,"byte_end":112696,"line_start":1168,"line_end":1168,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112701,"byte_end":112710,"line_start":1169,"line_end":1169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113569,"byte_end":113576,"line_start":1194,"line_end":1194,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113069,"byte_end":113143,"line_start":1184,"line_end":1184,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113148,"byte_end":113224,"line_start":1185,"line_end":1185,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113229,"byte_end":113232,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113237,"byte_end":113299,"line_start":1187,"line_end":1187,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113304,"byte_end":113335,"line_start":1188,"line_end":1188,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113340,"byte_end":113343,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113348,"byte_end":113399,"line_start":1190,"line_end":1190,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113404,"byte_end":113485,"line_start":1191,"line_end":1191,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113490,"byte_end":113543,"line_start":1192,"line_end":1192,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":113548,"byte_end":113557,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114328,"byte_end":114336,"line_start":1218,"line_end":1218,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114031,"byte_end":114098,"line_start":1211,"line_end":1211,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114103,"byte_end":114106,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114111,"byte_end":114163,"line_start":1213,"line_end":1213,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114168,"byte_end":114171,"line_start":1214,"line_end":1214,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114176,"byte_end":114244,"line_start":1215,"line_end":1215,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114249,"byte_end":114302,"line_start":1216,"line_end":1216,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114307,"byte_end":114316,"line_start":1217,"line_end":1217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115491,"byte_end":115502,"line_start":1245,"line_end":1245,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114690,"byte_end":114744,"line_start":1232,"line_end":1232,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114749,"byte_end":114752,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114757,"byte_end":114831,"line_start":1234,"line_end":1234,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114836,"byte_end":114911,"line_start":1235,"line_end":1235,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114916,"byte_end":114989,"line_start":1236,"line_end":1236,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114994,"byte_end":115063,"line_start":1237,"line_end":1237,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115068,"byte_end":115145,"line_start":1238,"line_end":1238,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115150,"byte_end":115217,"line_start":1239,"line_end":1239,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115222,"byte_end":115225,"line_start":1240,"line_end":1240,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115230,"byte_end":115306,"line_start":1241,"line_end":1241,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115311,"byte_end":115387,"line_start":1242,"line_end":1242,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115392,"byte_end":115465,"line_start":1243,"line_end":1243,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115470,"byte_end":115479,"line_start":1244,"line_end":1244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115986,"byte_end":115999,"line_start":1260,"line_end":1260,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115689,"byte_end":115756,"line_start":1253,"line_end":1253,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115761,"byte_end":115764,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115769,"byte_end":115821,"line_start":1255,"line_end":1255,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115826,"byte_end":115829,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115834,"byte_end":115902,"line_start":1257,"line_end":1257,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115907,"byte_end":115960,"line_start":1258,"line_end":1258,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":115965,"byte_end":115974,"line_start":1259,"line_end":1259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116580,"byte_end":116584,"line_start":1278,"line_end":1278,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116280,"byte_end":116352,"line_start":1272,"line_end":1272,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116357,"byte_end":116360,"line_start":1273,"line_end":1273,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116365,"byte_end":116441,"line_start":1274,"line_end":1274,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116446,"byte_end":116522,"line_start":1275,"line_end":1275,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116527,"byte_end":116554,"line_start":1276,"line_end":1276,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116559,"byte_end":116568,"line_start":1277,"line_end":1277,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":692},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121525,"byte_end":121541,"line_start":1440,"line_end":1440,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121363,"byte_end":121439,"line_start":1437,"line_end":1437,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121440,"byte_end":121452,"line_start":1438,"line_end":1438,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121453,"byte_end":121513,"line_start":1439,"line_end":1439,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121815,"byte_end":121821,"line_start":1447,"line_end":1447,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121737,"byte_end":121803,"line_start":1446,"line_end":1446,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122304,"byte_end":122307,"line_start":1460,"line_end":1460,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121882,"byte_end":121957,"line_start":1451,"line_end":1451,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121962,"byte_end":121965,"line_start":1452,"line_end":1452,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121970,"byte_end":122033,"line_start":1453,"line_end":1453,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122038,"byte_end":122069,"line_start":1454,"line_end":1454,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122074,"byte_end":122077,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122082,"byte_end":122133,"line_start":1456,"line_end":1456,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122138,"byte_end":122220,"line_start":1457,"line_end":1457,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122225,"byte_end":122278,"line_start":1458,"line_end":1458,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122283,"byte_end":122292,"line_start":1459,"line_end":1459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123168,"byte_end":123175,"line_start":1484,"line_end":1484,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122665,"byte_end":122740,"line_start":1474,"line_end":1474,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122745,"byte_end":122821,"line_start":1475,"line_end":1475,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122826,"byte_end":122829,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122834,"byte_end":122897,"line_start":1477,"line_end":1477,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122902,"byte_end":122933,"line_start":1478,"line_end":1478,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122938,"byte_end":122941,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":122946,"byte_end":122997,"line_start":1480,"line_end":1480,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123002,"byte_end":123084,"line_start":1481,"line_end":1481,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123089,"byte_end":123142,"line_start":1482,"line_end":1482,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123147,"byte_end":123156,"line_start":1483,"line_end":1483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123876,"byte_end":123884,"line_start":1506,"line_end":1506,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123644,"byte_end":123711,"line_start":1501,"line_end":1501,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123716,"byte_end":123719,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123724,"byte_end":123792,"line_start":1503,"line_end":1503,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123797,"byte_end":123850,"line_start":1504,"line_end":1504,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":123855,"byte_end":123864,"line_start":1505,"line_end":1505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124592,"byte_end":124601,"line_start":1526,"line_end":1526,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124250,"byte_end":124326,"line_start":1520,"line_end":1520,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124331,"byte_end":124396,"line_start":1521,"line_end":1521,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124401,"byte_end":124404,"line_start":1522,"line_end":1522,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124409,"byte_end":124482,"line_start":1523,"line_end":1523,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124487,"byte_end":124560,"line_start":1524,"line_end":1524,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124565,"byte_end":124580,"line_start":1525,"line_end":1525,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125378,"byte_end":125401,"line_start":1547,"line_end":1547,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125024,"byte_end":125112,"line_start":1541,"line_end":1541,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125117,"byte_end":125182,"line_start":1542,"line_end":1542,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125187,"byte_end":125190,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125195,"byte_end":125268,"line_start":1544,"line_end":1544,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125273,"byte_end":125346,"line_start":1545,"line_end":1545,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125351,"byte_end":125366,"line_start":1546,"line_end":1546,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126648,"byte_end":126659,"line_start":1575,"line_end":1575,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125846,"byte_end":125900,"line_start":1562,"line_end":1562,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125905,"byte_end":125908,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125913,"byte_end":125987,"line_start":1564,"line_end":1564,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125992,"byte_end":126067,"line_start":1565,"line_end":1565,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126072,"byte_end":126145,"line_start":1566,"line_end":1566,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126150,"byte_end":126219,"line_start":1567,"line_end":1567,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126224,"byte_end":126301,"line_start":1568,"line_end":1568,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126306,"byte_end":126373,"line_start":1569,"line_end":1569,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126378,"byte_end":126381,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126386,"byte_end":126462,"line_start":1571,"line_end":1571,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126467,"byte_end":126543,"line_start":1572,"line_end":1572,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126548,"byte_end":126622,"line_start":1573,"line_end":1573,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126627,"byte_end":126636,"line_start":1574,"line_end":1574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127151,"byte_end":127164,"line_start":1590,"line_end":1590,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126854,"byte_end":126921,"line_start":1583,"line_end":1583,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126926,"byte_end":126929,"line_start":1584,"line_end":1584,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126934,"byte_end":126986,"line_start":1585,"line_end":1585,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126991,"byte_end":126994,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":126999,"byte_end":127067,"line_start":1587,"line_end":1587,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127072,"byte_end":127125,"line_start":1588,"line_end":1588,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127130,"byte_end":127139,"line_start":1589,"line_end":1589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127757,"byte_end":127761,"line_start":1608,"line_end":1608,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127456,"byte_end":127528,"line_start":1602,"line_end":1602,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127533,"byte_end":127536,"line_start":1603,"line_end":1603,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127541,"byte_end":127617,"line_start":1604,"line_end":1604,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127622,"byte_end":127699,"line_start":1605,"line_end":1605,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127704,"byte_end":127731,"line_start":1606,"line_end":1606,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127736,"byte_end":127745,"line_start":1607,"line_end":1607,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":757},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":134864,"byte_end":134889,"line_start":1830,"line_end":1830,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":134702,"byte_end":134778,"line_start":1827,"line_end":1827,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":134779,"byte_end":134791,"line_start":1828,"line_end":1828,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":134792,"byte_end":134852,"line_start":1829,"line_end":1829,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135301,"byte_end":135307,"line_start":1842,"line_end":1842,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135223,"byte_end":135289,"line_start":1841,"line_end":1841,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135600,"byte_end":135608,"line_start":1851,"line_end":1851,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135368,"byte_end":135435,"line_start":1846,"line_end":1846,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135440,"byte_end":135443,"line_start":1847,"line_end":1847,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135448,"byte_end":135516,"line_start":1848,"line_end":1848,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135521,"byte_end":135574,"line_start":1849,"line_end":1849,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135579,"byte_end":135588,"line_start":1850,"line_end":1850,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":136062,"byte_end":136069,"line_start":1865,"line_end":1865,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135907,"byte_end":135988,"line_start":1863,"line_end":1863,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135993,"byte_end":136050,"line_start":1864,"line_end":1864,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":136608,"byte_end":136619,"line_start":1881,"line_end":1881,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":136411,"byte_end":136495,"line_start":1878,"line_end":1878,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":136500,"byte_end":136503,"line_start":1879,"line_end":1879,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":136508,"byte_end":136596,"line_start":1880,"line_end":1880,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137943,"byte_end":137954,"line_start":1910,"line_end":1910,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137132,"byte_end":137186,"line_start":1897,"line_end":1897,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137191,"byte_end":137194,"line_start":1898,"line_end":1898,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137199,"byte_end":137273,"line_start":1899,"line_end":1899,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137278,"byte_end":137353,"line_start":1900,"line_end":1900,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137358,"byte_end":137431,"line_start":1901,"line_end":1901,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137436,"byte_end":137505,"line_start":1902,"line_end":1902,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137510,"byte_end":137587,"line_start":1903,"line_end":1903,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137592,"byte_end":137659,"line_start":1904,"line_end":1904,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137664,"byte_end":137667,"line_start":1905,"line_end":1905,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137672,"byte_end":137748,"line_start":1906,"line_end":1906,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137753,"byte_end":137829,"line_start":1907,"line_end":1907,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137834,"byte_end":137917,"line_start":1908,"line_end":1908,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137922,"byte_end":137931,"line_start":1909,"line_end":1909,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138457,"byte_end":138470,"line_start":1925,"line_end":1925,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138160,"byte_end":138227,"line_start":1918,"line_end":1918,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138232,"byte_end":138235,"line_start":1919,"line_end":1919,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138240,"byte_end":138292,"line_start":1920,"line_end":1920,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138297,"byte_end":138300,"line_start":1921,"line_end":1921,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138305,"byte_end":138373,"line_start":1922,"line_end":1922,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138378,"byte_end":138431,"line_start":1923,"line_end":1923,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138436,"byte_end":138445,"line_start":1924,"line_end":1924,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139085,"byte_end":139089,"line_start":1943,"line_end":1943,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138774,"byte_end":138846,"line_start":1937,"line_end":1937,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138851,"byte_end":138854,"line_start":1938,"line_end":1938,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138859,"byte_end":138935,"line_start":1939,"line_end":1939,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":138940,"byte_end":139027,"line_start":1940,"line_end":1940,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139032,"byte_end":139059,"line_start":1941,"line_end":1941,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139064,"byte_end":139073,"line_start":1942,"line_end":1942,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139742,"byte_end":139751,"line_start":1959,"line_end":1959,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139369,"byte_end":139447,"line_start":1952,"line_end":1952,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139452,"byte_end":139528,"line_start":1953,"line_end":1953,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139533,"byte_end":139546,"line_start":1954,"line_end":1954,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139551,"byte_end":139554,"line_start":1955,"line_end":1955,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139559,"byte_end":139632,"line_start":1956,"line_end":1956,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139637,"byte_end":139710,"line_start":1957,"line_end":1957,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139715,"byte_end":139730,"line_start":1958,"line_end":1958,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140455,"byte_end":140470,"line_start":1979,"line_end":1979,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140200,"byte_end":140272,"line_start":1974,"line_end":1974,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140277,"byte_end":140320,"line_start":1975,"line_end":1975,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140325,"byte_end":140328,"line_start":1976,"line_end":1976,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140333,"byte_end":140404,"line_start":1977,"line_end":1977,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140409,"byte_end":140443,"line_start":1978,"line_end":1978,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141213,"byte_end":141230,"line_start":2002,"line_end":2002,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140944,"byte_end":141016,"line_start":1996,"line_end":1996,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141021,"byte_end":141064,"line_start":1997,"line_end":1997,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141069,"byte_end":141072,"line_start":1998,"line_end":1998,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141077,"byte_end":141148,"line_start":1999,"line_end":1999,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141153,"byte_end":141187,"line_start":2000,"line_end":2000,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141192,"byte_end":141201,"line_start":2001,"line_end":2001,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":818},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151323,"byte_end":151344,"line_start":2303,"line_end":2303,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":150867,"byte_end":150951,"line_start":2295,"line_end":2295,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":150952,"byte_end":150987,"line_start":2296,"line_end":2296,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":150988,"byte_end":150991,"line_start":2297,"line_end":2297,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":150992,"byte_end":151081,"line_start":2298,"line_end":2298,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151082,"byte_end":151157,"line_start":2299,"line_end":2299,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151158,"byte_end":151238,"line_start":2300,"line_end":2300,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151239,"byte_end":151250,"line_start":2301,"line_end":2301,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151251,"byte_end":151311,"line_start":2302,"line_end":2302,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152197,"byte_end":152200,"line_start":2325,"line_end":2325,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151766,"byte_end":151840,"line_start":2316,"line_end":2316,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151845,"byte_end":151848,"line_start":2317,"line_end":2317,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151853,"byte_end":151921,"line_start":2318,"line_end":2318,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151926,"byte_end":151957,"line_start":2319,"line_end":2319,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151962,"byte_end":151965,"line_start":2320,"line_end":2320,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151970,"byte_end":152021,"line_start":2321,"line_end":2321,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152026,"byte_end":152113,"line_start":2322,"line_end":2322,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152118,"byte_end":152171,"line_start":2323,"line_end":2323,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152176,"byte_end":152185,"line_start":2324,"line_end":2324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153035,"byte_end":153042,"line_start":2349,"line_end":2349,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152523,"byte_end":152597,"line_start":2339,"line_end":2339,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152602,"byte_end":152678,"line_start":2340,"line_end":2340,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152683,"byte_end":152686,"line_start":2341,"line_end":2341,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152691,"byte_end":152759,"line_start":2342,"line_end":2342,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152764,"byte_end":152795,"line_start":2343,"line_end":2343,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152800,"byte_end":152803,"line_start":2344,"line_end":2344,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152808,"byte_end":152859,"line_start":2345,"line_end":2345,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152864,"byte_end":152951,"line_start":2346,"line_end":2346,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":152956,"byte_end":153009,"line_start":2347,"line_end":2347,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153014,"byte_end":153023,"line_start":2348,"line_end":2348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154367,"byte_end":154378,"line_start":2381,"line_end":2381,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153560,"byte_end":153614,"line_start":2368,"line_end":2368,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153619,"byte_end":153622,"line_start":2369,"line_end":2369,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153627,"byte_end":153701,"line_start":2370,"line_end":2370,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153706,"byte_end":153781,"line_start":2371,"line_end":2371,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153786,"byte_end":153859,"line_start":2372,"line_end":2372,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153864,"byte_end":153933,"line_start":2373,"line_end":2373,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153938,"byte_end":154015,"line_start":2374,"line_end":2374,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154020,"byte_end":154087,"line_start":2375,"line_end":2375,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154092,"byte_end":154095,"line_start":2376,"line_end":2376,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154100,"byte_end":154176,"line_start":2377,"line_end":2377,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154181,"byte_end":154257,"line_start":2378,"line_end":2378,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154262,"byte_end":154341,"line_start":2379,"line_end":2379,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154346,"byte_end":154355,"line_start":2380,"line_end":2380,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":869},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156052,"byte_end":156074,"line_start":2438,"line_end":2438,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155592,"byte_end":155678,"line_start":2430,"line_end":2430,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155679,"byte_end":155714,"line_start":2431,"line_end":2431,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155715,"byte_end":155718,"line_start":2432,"line_end":2432,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155719,"byte_end":155810,"line_start":2433,"line_end":2433,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155811,"byte_end":155886,"line_start":2434,"line_end":2434,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155887,"byte_end":155967,"line_start":2435,"line_end":2435,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155968,"byte_end":155979,"line_start":2436,"line_end":2436,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155980,"byte_end":156040,"line_start":2437,"line_end":2437,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156940,"byte_end":156943,"line_start":2463,"line_end":2463,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156506,"byte_end":156581,"line_start":2454,"line_end":2454,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156586,"byte_end":156589,"line_start":2455,"line_end":2455,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156594,"byte_end":156663,"line_start":2456,"line_end":2456,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156668,"byte_end":156699,"line_start":2457,"line_end":2457,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156704,"byte_end":156707,"line_start":2458,"line_end":2458,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156712,"byte_end":156763,"line_start":2459,"line_end":2459,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156768,"byte_end":156856,"line_start":2460,"line_end":2460,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156861,"byte_end":156914,"line_start":2461,"line_end":2461,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156919,"byte_end":156928,"line_start":2462,"line_end":2462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157795,"byte_end":157802,"line_start":2487,"line_end":2487,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157280,"byte_end":157355,"line_start":2477,"line_end":2477,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157360,"byte_end":157436,"line_start":2478,"line_end":2478,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157441,"byte_end":157444,"line_start":2479,"line_end":2479,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157449,"byte_end":157518,"line_start":2480,"line_end":2480,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157523,"byte_end":157554,"line_start":2481,"line_end":2481,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157559,"byte_end":157562,"line_start":2482,"line_end":2482,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157567,"byte_end":157618,"line_start":2483,"line_end":2483,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157623,"byte_end":157711,"line_start":2484,"line_end":2484,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157716,"byte_end":157769,"line_start":2485,"line_end":2485,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":157774,"byte_end":157783,"line_start":2486,"line_end":2486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159143,"byte_end":159154,"line_start":2519,"line_end":2519,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158335,"byte_end":158389,"line_start":2506,"line_end":2506,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158394,"byte_end":158397,"line_start":2507,"line_end":2507,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158402,"byte_end":158476,"line_start":2508,"line_end":2508,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158481,"byte_end":158556,"line_start":2509,"line_end":2509,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158561,"byte_end":158634,"line_start":2510,"line_end":2510,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158639,"byte_end":158708,"line_start":2511,"line_end":2511,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158713,"byte_end":158790,"line_start":2512,"line_end":2512,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158795,"byte_end":158862,"line_start":2513,"line_end":2513,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158867,"byte_end":158870,"line_start":2514,"line_end":2514,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158875,"byte_end":158951,"line_start":2515,"line_end":2515,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158956,"byte_end":159032,"line_start":2516,"line_end":2516,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159037,"byte_end":159117,"line_start":2517,"line_end":2517,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159122,"byte_end":159131,"line_start":2518,"line_end":2518,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":4166,"byte_end":4177,"line_start":107,"line_end":107,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9641,"byte_end":9646,"line_start":147,"line_end":147,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9715,"byte_end":9720,"line_start":148,"line_end":148,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9752,"byte_end":9757,"line_start":150,"line_end":150,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10435,"byte_end":10440,"line_start":178,"line_end":178,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10807,"byte_end":10812,"line_start":191,"line_end":191,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":15729,"byte_end":15734,"line_start":337,"line_end":337,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16386,"byte_end":16391,"line_start":355,"line_end":355,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":18856,"byte_end":18861,"line_start":420,"line_end":420,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":18999,"byte_end":19004,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":19150,"byte_end":19155,"line_start":434,"line_end":434,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":19444,"byte_end":19461,"line_start":440,"line_end":440,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20954,"byte_end":20964,"line_start":494,"line_end":494,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21022,"byte_end":21032,"line_start":496,"line_end":496,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23414,"byte_end":23424,"line_start":570,"line_end":570,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25456,"byte_end":25466,"line_start":625,"line_end":625,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25650,"byte_end":25660,"line_start":633,"line_end":633,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25835,"byte_end":25845,"line_start":640,"line_end":640,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":26096,"byte_end":26106,"line_start":650,"line_end":650,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":26302,"byte_end":26312,"line_start":656,"line_end":656,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30445,"byte_end":30461,"line_start":790,"line_end":790,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30542,"byte_end":30558,"line_start":793,"line_end":793,"column_start":67,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30648,"byte_end":30664,"line_start":798,"line_end":798,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32418,"byte_end":32434,"line_start":850,"line_end":850,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33456,"byte_end":33472,"line_start":873,"line_end":873,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33644,"byte_end":33660,"line_start":881,"line_end":881,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33823,"byte_end":33839,"line_start":888,"line_end":888,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":34090,"byte_end":34106,"line_start":898,"line_end":898,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":34306,"byte_end":34322,"line_start":905,"line_end":905,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37032,"byte_end":37049,"line_start":74,"line_end":74,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37123,"byte_end":37140,"line_start":75,"line_end":75,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37185,"byte_end":37202,"line_start":77,"line_end":77,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39595,"byte_end":39612,"line_start":154,"line_end":154,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40918,"byte_end":40935,"line_start":192,"line_end":192,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42034,"byte_end":42048,"line_start":223,"line_end":223,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42148,"byte_end":42162,"line_start":227,"line_end":227,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42214,"byte_end":42228,"line_start":231,"line_end":231,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43342,"byte_end":43356,"line_start":269,"line_end":269,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44026,"byte_end":44040,"line_start":289,"line_end":289,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49450,"byte_end":49464,"line_start":443,"line_end":443,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50153,"byte_end":50167,"line_start":461,"line_end":461,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":52698,"byte_end":52712,"line_start":523,"line_end":523,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":52890,"byte_end":52904,"line_start":530,"line_end":530,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":53090,"byte_end":53104,"line_start":537,"line_end":537,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":53456,"byte_end":53473,"line_start":546,"line_end":546,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55121,"byte_end":55140,"line_start":603,"line_end":603,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55223,"byte_end":55242,"line_start":607,"line_end":607,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57800,"byte_end":57819,"line_start":685,"line_end":685,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59915,"byte_end":59934,"line_start":743,"line_end":743,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":60144,"byte_end":60163,"line_start":753,"line_end":753,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":60453,"byte_end":60472,"line_start":765,"line_end":765,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":60696,"byte_end":60715,"line_start":773,"line_end":773,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65099,"byte_end":65124,"line_start":909,"line_end":909,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65211,"byte_end":65236,"line_start":914,"line_end":914,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67108,"byte_end":67133,"line_start":971,"line_end":971,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":68206,"byte_end":68231,"line_start":996,"line_end":996,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":68427,"byte_end":68452,"line_start":1006,"line_end":1006,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":68740,"byte_end":68765,"line_start":1018,"line_end":1018,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":68989,"byte_end":69014,"line_start":1026,"line_end":1026,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82245,"byte_end":82251,"line_start":352,"line_end":352,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82328,"byte_end":82334,"line_start":353,"line_end":353,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82367,"byte_end":82373,"line_start":355,"line_end":355,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83105,"byte_end":83111,"line_start":384,"line_end":384,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83535,"byte_end":83541,"line_start":399,"line_end":399,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92241,"byte_end":92247,"line_start":647,"line_end":647,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93586,"byte_end":93592,"line_start":681,"line_end":681,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":98832,"byte_end":98838,"line_start":807,"line_end":807,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":101813,"byte_end":101819,"line_start":878,"line_end":878,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":104775,"byte_end":104781,"line_start":952,"line_end":952,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":107954,"byte_end":107960,"line_start":1037,"line_end":1037,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":110849,"byte_end":110855,"line_start":1113,"line_end":1113,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":110996,"byte_end":111002,"line_start":1120,"line_end":1120,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":111151,"byte_end":111157,"line_start":1127,"line_end":1127,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":111447,"byte_end":111464,"line_start":1133,"line_end":1133,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112126,"byte_end":112141,"line_start":1155,"line_end":1155,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114658,"byte_end":114673,"line_start":1231,"line_end":1231,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116797,"byte_end":116812,"line_start":1286,"line_end":1286,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116994,"byte_end":117009,"line_start":1294,"line_end":1294,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":117280,"byte_end":117295,"line_start":1304,"line_end":1304,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":117496,"byte_end":117511,"line_start":1311,"line_end":1311,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121704,"byte_end":121720,"line_start":1445,"line_end":1445,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124217,"byte_end":124233,"line_start":1519,"line_end":1519,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124991,"byte_end":125007,"line_start":1540,"line_end":1540,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125813,"byte_end":125829,"line_start":1561,"line_end":1561,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127982,"byte_end":127998,"line_start":1616,"line_end":1616,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":128184,"byte_end":128200,"line_start":1624,"line_end":1624,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":128377,"byte_end":128393,"line_start":1631,"line_end":1631,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":128672,"byte_end":128688,"line_start":1641,"line_end":1641,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":128889,"byte_end":128905,"line_start":1648,"line_end":1648,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135089,"byte_end":135114,"line_start":1836,"line_end":1836,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135181,"byte_end":135206,"line_start":1840,"line_end":1840,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137090,"byte_end":137115,"line_start":1896,"line_end":1896,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139327,"byte_end":139352,"line_start":1951,"line_end":1951,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140158,"byte_end":140183,"line_start":1973,"line_end":1973,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141764,"byte_end":141789,"line_start":2020,"line_end":2020,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141978,"byte_end":142003,"line_start":2028,"line_end":2028,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":142304,"byte_end":142329,"line_start":2039,"line_end":2039,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":142537,"byte_end":142562,"line_start":2047,"line_end":2047,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151514,"byte_end":151535,"line_start":2309,"line_end":2309,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151616,"byte_end":151637,"line_start":2310,"line_end":2310,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151728,"byte_end":151749,"line_start":2315,"line_end":2315,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153522,"byte_end":153543,"line_start":2367,"line_end":2367,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154615,"byte_end":154636,"line_start":2390,"line_end":2390,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154805,"byte_end":154826,"line_start":2398,"line_end":2398,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155099,"byte_end":155120,"line_start":2409,"line_end":2409,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155321,"byte_end":155342,"line_start":2417,"line_end":2417,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156250,"byte_end":156272,"line_start":2445,"line_end":2445,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156354,"byte_end":156376,"line_start":2448,"line_end":2448,"column_start":68,"column_end":90},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156467,"byte_end":156489,"line_start":2453,"line_end":2453,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158296,"byte_end":158318,"line_start":2505,"line_end":2505,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159399,"byte_end":159421,"line_start":2528,"line_end":2528,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159594,"byte_end":159616,"line_start":2536,"line_end":2536,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159780,"byte_end":159802,"line_start":2543,"line_end":2543,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":160083,"byte_end":160105,"line_start":2554,"line_end":2554,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":160306,"byte_end":160328,"line_start":2562,"line_end":2562,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/lib.rs","byte_start":4166,"byte_end":4177,"line_start":107,"line_end":107,"column_start":22,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":8},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":7444,"byte_end":7452,"line_start":87,"line_end":87,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":39}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":8606,"byte_end":8614,"line_start":120,"line_end":120,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":42}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9641,"byte_end":9646,"line_start":147,"line_end":147,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2880}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9715,"byte_end":9720,"line_start":148,"line_end":148,"column_start":60,"column_end":65},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":9752,"byte_end":9757,"line_start":150,"line_end":150,"column_start":22,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10435,"byte_end":10440,"line_start":178,"line_end":178,"column_start":12,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":10807,"byte_end":10812,"line_start":191,"line_end":191,"column_start":30,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":15729,"byte_end":15734,"line_start":337,"line_end":337,"column_start":34,"column_end":39},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":16386,"byte_end":16391,"line_start":355,"line_end":355,"column_start":35,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":18856,"byte_end":18861,"line_start":420,"line_end":420,"column_start":52,"column_end":57},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":18999,"byte_end":19004,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":19150,"byte_end":19155,"line_start":434,"line_end":434,"column_start":58,"column_end":63},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":19444,"byte_end":19461,"line_start":440,"line_end":440,"column_start":37,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":20954,"byte_end":20964,"line_start":494,"line_end":494,"column_start":74,"column_end":84},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":21022,"byte_end":21032,"line_start":496,"line_end":496,"column_start":44,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":23414,"byte_end":23424,"line_start":570,"line_end":570,"column_start":48,"column_end":58},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25456,"byte_end":25466,"line_start":625,"line_end":625,"column_start":54,"column_end":64},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25650,"byte_end":25660,"line_start":633,"line_end":633,"column_start":57,"column_end":67},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3104}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":25835,"byte_end":25845,"line_start":640,"line_end":640,"column_start":53,"column_end":63},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":26096,"byte_end":26106,"line_start":650,"line_end":650,"column_start":72,"column_end":82},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":26302,"byte_end":26312,"line_start":656,"line_end":656,"column_start":76,"column_end":86},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30445,"byte_end":30461,"line_start":790,"line_end":790,"column_start":9,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30542,"byte_end":30558,"line_start":793,"line_end":793,"column_start":67,"column_end":83},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":2880}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":30648,"byte_end":30664,"line_start":798,"line_end":798,"column_start":44,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":32418,"byte_end":32434,"line_start":850,"line_end":850,"column_start":48,"column_end":64},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33456,"byte_end":33472,"line_start":873,"line_end":873,"column_start":54,"column_end":70},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33644,"byte_end":33660,"line_start":881,"line_end":881,"column_start":57,"column_end":73},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3104}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":33823,"byte_end":33839,"line_start":888,"line_end":888,"column_start":53,"column_end":69},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":34090,"byte_end":34106,"line_start":898,"line_end":898,"column_start":72,"column_end":88},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/mutex.rs","byte_start":34306,"byte_end":34322,"line_start":905,"line_end":905,"column_start":9,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37032,"byte_end":37049,"line_start":74,"line_end":74,"column_start":65,"column_end":82},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":2880}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37123,"byte_end":37140,"line_start":75,"line_end":75,"column_start":65,"column_end":82},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":37185,"byte_end":37202,"line_start":77,"line_end":77,"column_start":35,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":39595,"byte_end":39612,"line_start":154,"line_end":154,"column_start":39,"column_end":56},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":40918,"byte_end":40935,"line_start":192,"line_end":192,"column_start":40,"column_end":57},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42034,"byte_end":42048,"line_start":223,"line_end":223,"column_start":9,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":2880}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42148,"byte_end":42162,"line_start":227,"line_end":227,"column_start":9,"column_end":23},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":42214,"byte_end":42228,"line_start":231,"line_end":231,"column_start":38,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":43342,"byte_end":43356,"line_start":269,"line_end":269,"column_start":15,"column_end":29},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":44026,"byte_end":44040,"line_start":289,"line_end":289,"column_start":46,"column_end":60},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":49450,"byte_end":49464,"line_start":443,"line_end":443,"column_start":50,"column_end":64},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":50153,"byte_end":50167,"line_start":461,"line_end":461,"column_start":51,"column_end":65},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":52698,"byte_end":52712,"line_start":523,"line_end":523,"column_start":68,"column_end":82},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":52890,"byte_end":52904,"line_start":530,"line_end":530,"column_start":50,"column_end":64},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":53090,"byte_end":53104,"line_start":537,"line_end":537,"column_start":74,"column_end":88},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":53456,"byte_end":53473,"line_start":546,"line_end":546,"column_start":37,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55121,"byte_end":55140,"line_start":603,"line_end":603,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":55223,"byte_end":55242,"line_start":607,"line_end":607,"column_start":65,"column_end":84},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":57800,"byte_end":57819,"line_start":685,"line_end":685,"column_start":5,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":59915,"byte_end":59934,"line_start":743,"line_end":743,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":60144,"byte_end":60163,"line_start":753,"line_end":753,"column_start":9,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":60453,"byte_end":60472,"line_start":765,"line_end":765,"column_start":9,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":60696,"byte_end":60715,"line_start":773,"line_end":773,"column_start":9,"column_end":28},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65099,"byte_end":65124,"line_start":909,"line_end":909,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":65211,"byte_end":65236,"line_start":914,"line_end":914,"column_start":5,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":67108,"byte_end":67133,"line_start":971,"line_end":971,"column_start":5,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":68206,"byte_end":68231,"line_start":996,"line_end":996,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":68427,"byte_end":68452,"line_start":1006,"line_end":1006,"column_start":9,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":68740,"byte_end":68765,"line_start":1018,"line_end":1018,"column_start":9,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/remutex.rs","byte_start":68989,"byte_end":69014,"line_start":1026,"line_end":1026,"column_start":9,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":72608,"byte_end":72617,"line_start":95,"line_end":95,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":521}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74293,"byte_end":74302,"line_start":141,"line_end":141,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":526}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":74857,"byte_end":74866,"line_start":155,"line_end":155,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":528}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":75986,"byte_end":75995,"line_start":182,"line_end":182,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":535}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76385,"byte_end":76403,"line_start":191,"line_end":191,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":535},"to":{"krate":0,"index":538}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":76406,"byte_end":76420,"line_start":191,"line_end":191,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":528},"to":{"krate":0,"index":538}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":77188,"byte_end":77197,"line_start":207,"line_end":207,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":541}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78246,"byte_end":78262,"line_start":239,"line_end":239,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":541},"to":{"krate":0,"index":547}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":78265,"byte_end":78278,"line_start":239,"line_end":239,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":521},"to":{"krate":0,"index":547}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79207,"byte_end":79223,"line_start":264,"line_end":264,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":541},"to":{"krate":0,"index":550}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79226,"byte_end":79244,"line_start":264,"line_end":264,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":526},"to":{"krate":0,"index":550}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79844,"byte_end":79860,"line_start":282,"line_end":282,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":541},"to":{"krate":0,"index":553}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":79863,"byte_end":79877,"line_start":282,"line_end":282,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":528},"to":{"krate":0,"index":553}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82245,"byte_end":82251,"line_start":352,"line_end":352,"column_start":61,"column_end":67},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":558},"to":{"krate":1,"index":2880}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82328,"byte_end":82334,"line_start":353,"line_end":353,"column_start":68,"column_end":74},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":558},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":82367,"byte_end":82373,"line_start":355,"line_end":355,"column_start":23,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83105,"byte_end":83111,"line_start":384,"line_end":384,"column_start":12,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":83535,"byte_end":83541,"line_start":399,"line_end":399,"column_start":31,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":92241,"byte_end":92247,"line_start":647,"line_end":647,"column_start":35,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":93586,"byte_end":93592,"line_start":681,"line_end":681,"column_start":36,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":98832,"byte_end":98838,"line_start":807,"line_end":807,"column_start":40,"column_end":46},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":101813,"byte_end":101819,"line_start":878,"line_end":878,"column_start":45,"column_end":51},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":104775,"byte_end":104781,"line_start":952,"line_end":952,"column_start":38,"column_end":44},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":107954,"byte_end":107960,"line_start":1037,"line_end":1037,"column_start":43,"column_end":49},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":110849,"byte_end":110855,"line_start":1113,"line_end":1113,"column_start":53,"column_end":59},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":558},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":110996,"byte_end":111002,"line_start":1120,"line_end":1120,"column_start":35,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":558},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":111151,"byte_end":111157,"line_start":1127,"line_end":1127,"column_start":59,"column_end":65},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":558},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":111447,"byte_end":111464,"line_start":1133,"line_end":1133,"column_start":37,"column_end":54},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":638},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":112126,"byte_end":112141,"line_start":1155,"line_end":1155,"column_start":45,"column_end":60},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":114658,"byte_end":114673,"line_start":1231,"line_end":1231,"column_start":49,"column_end":64},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116797,"byte_end":116812,"line_start":1286,"line_end":1286,"column_start":55,"column_end":70},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":116994,"byte_end":117009,"line_start":1294,"line_end":1294,"column_start":54,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":117280,"byte_end":117295,"line_start":1304,"line_end":1304,"column_start":73,"column_end":88},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":117496,"byte_end":117511,"line_start":1311,"line_end":1311,"column_start":9,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":121704,"byte_end":121720,"line_start":1445,"line_end":1445,"column_start":45,"column_end":61},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124217,"byte_end":124233,"line_start":1519,"line_end":1519,"column_start":54,"column_end":70},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":124991,"byte_end":125007,"line_start":1540,"line_end":1540,"column_start":61,"column_end":77},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":125813,"byte_end":125829,"line_start":1561,"line_end":1561,"column_start":49,"column_end":65},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":127982,"byte_end":127998,"line_start":1616,"line_end":1616,"column_start":55,"column_end":71},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":128184,"byte_end":128200,"line_start":1624,"line_end":1624,"column_start":58,"column_end":74},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":3104}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":128377,"byte_end":128393,"line_start":1631,"line_end":1631,"column_start":54,"column_end":70},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":128672,"byte_end":128688,"line_start":1641,"line_end":1641,"column_start":73,"column_end":89},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":128889,"byte_end":128905,"line_start":1648,"line_end":1648,"column_start":9,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135089,"byte_end":135114,"line_start":1836,"line_end":1836,"column_start":9,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":135181,"byte_end":135206,"line_start":1840,"line_end":1840,"column_start":52,"column_end":77},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":137090,"byte_end":137115,"line_start":1896,"line_end":1896,"column_start":56,"column_end":81},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":139327,"byte_end":139352,"line_start":1951,"line_end":1951,"column_start":61,"column_end":86},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":140158,"byte_end":140183,"line_start":1973,"line_end":1973,"column_start":57,"column_end":82},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141764,"byte_end":141789,"line_start":2020,"line_end":2020,"column_start":62,"column_end":87},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":141978,"byte_end":142003,"line_start":2028,"line_end":2028,"column_start":61,"column_end":86},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":142304,"byte_end":142329,"line_start":2039,"line_end":2039,"column_start":9,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":142537,"byte_end":142562,"line_start":2047,"line_end":2047,"column_start":9,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151514,"byte_end":151535,"line_start":2309,"line_end":2309,"column_start":68,"column_end":89},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":818},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151616,"byte_end":151637,"line_start":2310,"line_end":2310,"column_start":68,"column_end":89},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":818},"to":{"krate":1,"index":2880}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":151728,"byte_end":151749,"line_start":2315,"line_end":2315,"column_start":45,"column_end":66},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":153522,"byte_end":153543,"line_start":2367,"line_end":2367,"column_start":49,"column_end":70},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154615,"byte_end":154636,"line_start":2390,"line_end":2390,"column_start":55,"column_end":76},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":818},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":154805,"byte_end":154826,"line_start":2398,"line_end":2398,"column_start":54,"column_end":75},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":818},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155099,"byte_end":155120,"line_start":2409,"line_end":2409,"column_start":9,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":818},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":155321,"byte_end":155342,"line_start":2417,"line_end":2417,"column_start":9,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":818},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156250,"byte_end":156272,"line_start":2445,"line_end":2445,"column_start":9,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156354,"byte_end":156376,"line_start":2448,"line_end":2448,"column_start":68,"column_end":90},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":2880}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":156467,"byte_end":156489,"line_start":2453,"line_end":2453,"column_start":45,"column_end":67},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":158296,"byte_end":158318,"line_start":2505,"line_end":2505,"column_start":49,"column_end":71},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159399,"byte_end":159421,"line_start":2528,"line_end":2528,"column_start":55,"column_end":77},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159594,"byte_end":159616,"line_start":2536,"line_end":2536,"column_start":58,"column_end":80},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":3104}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":159780,"byte_end":159802,"line_start":2543,"line_end":2543,"column_start":54,"column_end":76},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":3115}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":160083,"byte_end":160105,"line_start":2554,"line_end":2554,"column_start":9,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/Users/kroos/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.5/src/rwlock.rs","byte_start":160306,"byte_end":160328,"line_start":2562,"line_end":2562,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":8969}}]}