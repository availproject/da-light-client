{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb","program":"/Users/kroos/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","dusk_plonk","--edition=2018","/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=50f8e497bb9addf9","-C","extra-filename=-50f8e497bb9addf9","--out-dir","/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps","-L","dependency=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps","--extern","anyhow=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libanyhow-daa4c8729dd999b8.rmeta","--extern","dusk_bls12_381=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libdusk_bls12_381-b9112d83343cc5ff.rmeta","--extern","dusk_jubjub=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libdusk_jubjub-f1f41be2d3a0bf57.rmeta","--extern","itertools=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libitertools-081b38b0d2a3ac77.rmeta","--extern","merlin=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libmerlin-a383799db1c47e20.rmeta","--extern","rand=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/librand-9f6d798d3858cc5a.rmeta","--extern","rand_chacha=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/librand_chacha-72437584519f17ae.rmeta","--extern","rand_core=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/librand_core-097b873ac98d62bf.rmeta","--extern","rayon=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/librayon-00540b0b74b1ee1e.rmeta","--extern","serde=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libserde-471ac5615e4d49c2.rmeta","--extern","thiserror=/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libthiserror-f8cd6f047e3df9fb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/kroos/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/kroos/Matic/pb-light/avail-rust-light-client/target/rls/debug/deps/libdusk_plonk-50f8e497bb9addf9.rmeta"},"prelude":{"crate_id":{"name":"dusk_plonk","disambiguator":[11686730181794841446,0]},"crate_root":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src","external_crates":[{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8947264418412078715,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","num":2,"id":{"name":"core","disambiguator":[16214626321829081561,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[14004541350322100676,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14513964228136080925,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[18071398054246242872,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9901929154766010641,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1992023595794582040,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3304853791930394566,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[16365657126326177412,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1295476454418234886,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2217975506173844539,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[10955358760156651288,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[17029152361031566612,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[4374745283242162134,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5422690374441455074,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[16158478199367640957,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3064376627870306792,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":18,"id":{"name":"anyhow","disambiguator":[8660150531451225237,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":19,"id":{"name":"dusk_bls12_381","disambiguator":[14474402780858909950,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","num":20,"id":{"name":"rand_core","disambiguator":[10699458724272895440,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":21,"id":{"name":"getrandom","disambiguator":[15581843875568610442,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":22,"id":{"name":"cfg_if","disambiguator":[18090141088928795859,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":23,"id":{"name":"libc","disambiguator":[18258192749890366442,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","num":24,"id":{"name":"serde","disambiguator":[17286082656170846439,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":25,"id":{"name":"serde_derive","disambiguator":[4073901304431225561,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":26,"id":{"name":"subtle","disambiguator":[9842889950388985165,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":27,"id":{"name":"byteorder","disambiguator":[13914814827881020239,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","num":28,"id":{"name":"rayon","disambiguator":[941528401622271904,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":29,"id":{"name":"either","disambiguator":[3183833843564012904,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":30,"id":{"name":"rayon_core","disambiguator":[17629749475349403079,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":31,"id":{"name":"crossbeam_channel","disambiguator":[11471705962413863702,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":32,"id":{"name":"crossbeam_utils","disambiguator":[5572696082850807199,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":33,"id":{"name":"lazy_static","disambiguator":[89345479795873267,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":34,"id":{"name":"crossbeam_deque","disambiguator":[18169996396578137147,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":35,"id":{"name":"crossbeam_epoch","disambiguator":[9505751493860650968,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":36,"id":{"name":"scopeguard","disambiguator":[17970148060099818384,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":37,"id":{"name":"memoffset","disambiguator":[12360758071551447829,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":38,"id":{"name":"num_cpus","disambiguator":[13689848000744781578,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":39,"id":{"name":"dusk_jubjub","disambiguator":[3892551240411409867,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":40,"id":{"name":"thiserror","disambiguator":[15126839553602506847,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","num":41,"id":{"name":"thiserror_impl","disambiguator":[11296703681700458294,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","num":42,"id":{"name":"merlin","disambiguator":[9385792270597451708,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","num":43,"id":{"name":"keccak","disambiguator":[14856086518722986384,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","num":44,"id":{"name":"zeroize","disambiguator":[2058055259282262362,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","num":45,"id":{"name":"zeroize_derive","disambiguator":[12480686919223923408,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","num":46,"id":{"name":"rand","disambiguator":[3854860900901374763,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","num":47,"id":{"name":"rand_chacha","disambiguator":[14659789396647159531,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","num":48,"id":{"name":"ppv_lite86","disambiguator":[18224827934828194507,0]}},{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/permutation/permutation.rs","num":49,"id":{"name":"itertools","disambiguator":[17906358331448578180,0]}}],"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":258,"byte_end":3828,"line_start":7,"line_end":99,"column_start":1,"column_end":31}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1961},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20623,"byte_end":20632,"line_start":12,"line_end":12,"column_start":15,"column_end":24},"alias_span":null,"name":"CommitKey","value":"","parent":{"krate":0,"index":74}},{"kind":"Use","ref_id":{"krate":0,"index":1951},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20634,"byte_end":20644,"line_start":12,"line_end":12,"column_start":26,"column_end":36},"alias_span":null,"name":"OpeningKey","value":"","parent":{"krate":0,"index":74}},{"kind":"Use","ref_id":{"krate":0,"index":1965},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20660,"byte_end":20676,"line_start":13,"line_end":13,"column_start":14,"column_end":30},"alias_span":null,"name":"PublicParameters","value":"","parent":{"krate":0,"index":74}},{"kind":"Use","ref_id":{"krate":0,"index":2015},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49191,"byte_end":49207,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"alias_span":null,"name":"StandardComposer","value":"","parent":{"krate":0,"index":287}},{"kind":"Use","ref_id":{"krate":0,"index":2046},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49228,"byte_end":49236,"line_start":29,"line_end":29,"column_start":20,"column_end":28},"alias_span":null,"name":"Variable","value":"","parent":{"krate":0,"index":287}},{"kind":"Use","ref_id":{"krate":0,"index":2047},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49228,"byte_end":49236,"line_start":29,"line_end":29,"column_start":20,"column_end":28},"alias_span":null,"name":"Variable","value":"","parent":{"krate":0,"index":287}},{"kind":"Use","ref_id":{"krate":0,"index":2064},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49238,"byte_end":49246,"line_start":29,"line_end":29,"column_start":30,"column_end":38},"alias_span":null,"name":"WireData","value":"","parent":{"krate":0,"index":287}},{"kind":"Use","ref_id":{"krate":0,"index":2118},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/mod.rs","byte_start":153165,"byte_end":153181,"line_start":15,"line_end":15,"column_start":17,"column_end":33},"alias_span":null,"name":"EvaluationDomain","value":"","parent":{"krate":0,"index":529}},{"kind":"Use","ref_id":{"krate":0,"index":2142},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/mod.rs","byte_start":153204,"byte_end":153215,"line_start":16,"line_end":16,"column_start":22,"column_end":33},"alias_span":null,"name":"Evaluations","value":"","parent":{"krate":0,"index":529}},{"kind":"Use","ref_id":{"krate":0,"index":2165},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/mod.rs","byte_start":153237,"byte_end":153247,"line_start":17,"line_end":17,"column_start":21,"column_end":31},"alias_span":null,"name":"Polynomial","value":"","parent":{"krate":0,"index":529}},{"kind":"Use","ref_id":{"krate":0,"index":46},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226643,"byte_end":226650,"line_start":13,"line_end":13,"column_start":34,"column_end":41},"alias_span":null,"name":"Circuit","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1923},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226652,"byte_end":226665,"line_start":13,"line_end":13,"column_start":43,"column_end":56},"alias_span":null,"name":"CircuitErrors","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1904},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226667,"byte_end":226678,"line_start":13,"line_end":13,"column_start":58,"column_end":69},"alias_span":null,"name":"PublicInput","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1961},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226734,"byte_end":226743,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"alias_span":null,"name":"CommitKey","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1951},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226745,"byte_end":226755,"line_start":15,"line_end":15,"column_start":22,"column_end":32},"alias_span":null,"name":"OpeningKey","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1965},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226762,"byte_end":226778,"line_start":16,"line_end":16,"column_start":5,"column_end":21},"alias_span":null,"name":"PublicParameters","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2015},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226818,"byte_end":226834,"line_start":18,"line_end":18,"column_start":36,"column_end":52},"alias_span":null,"name":"StandardComposer","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2046},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226836,"byte_end":226844,"line_start":18,"line_end":18,"column_start":54,"column_end":62},"alias_span":null,"name":"Variable","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2047},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226836,"byte_end":226844,"line_start":18,"line_end":18,"column_start":54,"column_end":62},"alias_span":null,"name":"Variable","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2451},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226891,"byte_end":226900,"line_start":20,"line_end":20,"column_start":14,"column_end":23},"alias_span":null,"name":"ProverKey","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2471},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226902,"byte_end":226913,"line_start":20,"line_end":20,"column_start":25,"column_end":36},"alias_span":null,"name":"VerifierKey","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2214},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226920,"byte_end":226925,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"alias_span":null,"name":"Proof","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1249},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226927,"byte_end":226933,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"alias_span":null,"name":"Prover","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1330},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226935,"byte_end":226943,"line_start":21,"line_end":21,"column_start":20,"column_end":28},"alias_span":null,"name":"Verifier","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":19,"index":1590},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227018,"byte_end":227027,"line_start":25,"line_end":25,"column_start":25,"column_end":34},"alias_span":null,"name":"BlsScalar","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":19,"index":1591},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227018,"byte_end":227027,"line_start":25,"line_end":25,"column_start":25,"column_end":34},"alias_span":null,"name":"BlsScalar","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":39,"index":461},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227096,"byte_end":227108,"line_start":28,"line_end":28,"column_start":22,"column_end":34},"alias_span":null,"name":"JubJubScalar","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1933},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227243,"byte_end":227254,"line_start":32,"line_end":32,"column_start":54,"column_end":65},"alias_span":null,"name":"KZG10Errors","value":"","parent":{"krate":0,"index":982}},{"kind":"Use","ref_id":{"krate":0,"index":2038},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227305,"byte_end":227323,"line_start":33,"line_end":33,"column_start":50,"column_end":68},"alias_span":null,"name":"PreProcessingError","value":"","parent":{"krate":0,"index":982}},{"kind":"Use","ref_id":{"krate":0,"index":2156},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227361,"byte_end":227370,"line_start":34,"line_end":34,"column_start":37,"column_end":46},"alias_span":null,"name":"FFTErrors","value":"","parent":{"krate":0,"index":982}},{"kind":"Use","ref_id":{"krate":0,"index":2253},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227426,"byte_end":227437,"line_start":35,"line_end":35,"column_start":55,"column_end":66},"alias_span":null,"name":"ProofErrors","value":"","parent":{"krate":0,"index":982}},{"kind":"Use","ref_id":{"krate":0,"index":2214},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":228017,"byte_end":228022,"line_start":22,"line_end":22,"column_start":16,"column_end":21},"alias_span":null,"name":"Proof","value":"","parent":{"krate":0,"index":995}},{"kind":"Use","ref_id":{"krate":0,"index":1249},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":228040,"byte_end":228046,"line_start":23,"line_end":23,"column_start":17,"column_end":23},"alias_span":null,"name":"Prover","value":"","parent":{"krate":0,"index":995}},{"kind":"Use","ref_id":{"krate":0,"index":1330},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":228066,"byte_end":228074,"line_start":24,"line_end":24,"column_start":19,"column_end":27},"alias_span":null,"name":"Verifier","value":"","parent":{"krate":0,"index":995}},{"kind":"Use","ref_id":{"krate":0,"index":2451},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":228093,"byte_end":228102,"line_start":25,"line_end":25,"column_start":18,"column_end":27},"alias_span":null,"name":"ProverKey","value":"","parent":{"krate":0,"index":995}},{"kind":"Use","ref_id":{"krate":0,"index":2471},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":228104,"byte_end":228115,"line_start":25,"line_end":25,"column_start":29,"column_end":40},"alias_span":null,"name":"VerifierKey","value":"","parent":{"krate":0,"index":995}},{"kind":"Use","ref_id":{"krate":19,"index":0},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":3734,"byte_end":3748,"line_start":96,"line_end":96,"column_start":9,"column_end":23},"alias_span":null,"name":"bls12_381","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":39,"index":0},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":3806,"byte_end":3817,"line_start":99,"line_end":99,"column_start":9,"column_end":20},"alias_span":null,"name":"jubjub","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":258,"byte_end":3828,"line_start":7,"line_end":99,"column_start":1,"column_end":31},"name":"","qualname":"::","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":5},{"krate":0,"index":10},{"krate":0,"index":71},{"krate":0,"index":287},{"krate":0,"index":529},{"krate":0,"index":830},{"krate":0,"index":930},{"krate":0,"index":995},{"krate":0,"index":1760},{"krate":0,"index":1815},{"krate":0,"index":1836},{"krate":0,"index":1878},{"krate":0,"index":1881}],"decl_id":null,"docs":"<a href=\"https://codecov.io/gh/dusk-network/plonk\">\n  <img src=\"https://codecov.io/gh/dusk-network/plonk/branch/master/graph/badge.svg\" />\n</a>\n <a href=\"https://travis-ci.com/dusk-network/plonk\">\n <img src=\"https://travis-ci.com/dusk-network/plonk.svg?branch=master\" />\n </a>\n <a href=\"https://github.com/dusk-network/plonk\">\n <img alt=\"GitHub issues\" src=\"https://img.shields.io/github/issues-raw/dusk-network/plonk?style=plastic\">\n </a>\n <a href=\"https://github.com/dusk-network/plonk/blob/master/LICENSE\">\n <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/dusk-network/plonk?color=%230E55EF\">\n </a>","sig":null,"attributes":[{"value":"/<a href=\"https://codecov.io/gh/dusk-network/plonk\">","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":547,"byte_end":601,"line_start":12,"line_end":12,"column_start":1,"column_end":55}},{"value":"/  <img src=\"https://codecov.io/gh/dusk-network/plonk/branch/master/graph/badge.svg\" />","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":602,"byte_end":691,"line_start":13,"line_end":13,"column_start":1,"column_end":90}},{"value":"/</a>","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":692,"byte_end":699,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ <a href=\"https://travis-ci.com/dusk-network/plonk\">","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":700,"byte_end":755,"line_start":15,"line_end":15,"column_start":1,"column_end":56}},{"value":"/ <img src=\"https://travis-ci.com/dusk-network/plonk.svg?branch=master\" />","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":756,"byte_end":832,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ </a>","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":833,"byte_end":841,"line_start":17,"line_end":17,"column_start":1,"column_end":9}},{"value":"/ <a href=\"https://github.com/dusk-network/plonk\">","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":842,"byte_end":894,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/ <img alt=\"GitHub issues\" src=\"https://img.shields.io/github/issues-raw/dusk-network/plonk?style=plastic\">","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":895,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":110}},{"value":"/ </a>","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1005,"byte_end":1013,"line_start":20,"line_end":20,"column_start":1,"column_end":9}},{"value":"/ <a href=\"https://github.com/dusk-network/plonk/blob/master/LICENSE\">","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1014,"byte_end":1086,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/dusk-network/plonk?color=%230E55EF\">","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1087,"byte_end":1188,"line_start":22,"line_end":22,"column_start":1,"column_end":102}},{"value":"/ </a>","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1189,"byte_end":1197,"line_start":23,"line_end":23,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1198,"byte_end":1201,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1202,"byte_end":1205,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Permutations over Lagrange-bases for Oecumenical Noninteractive","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1206,"byte_end":1273,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/ arguments of Knowledge (PLONK) is a zero knowledge proof system.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1274,"byte_end":1342,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1343,"byte_end":1346,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This protocol was created by:","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1347,"byte_end":1380,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/ - Ariel Gabizon (Protocol Labs),","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1381,"byte_end":1417,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/ - Zachary J. Williamson (Aztec Protocol)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1418,"byte_end":1462,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"/ - Oana Ciobotaru","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1463,"byte_end":1483,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1484,"byte_end":1487,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This crate contains a pure-rust implementation done by the [DuskNetwork team](dusk.network)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1488,"byte_end":1583,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ of this algorithm using as a reference implementation this one done","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1584,"byte_end":1655,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/ by the creators of the protocol:","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1656,"byte_end":1692,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1693,"byte_end":1696,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [https://github.com/AztecProtocol/barretenberg/blob/master/barretenberg/src/aztec/plonk/](https://github.com/AztecProtocol/barretenberg/blob/master/barretenberg/src/aztec/plonk/)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1697,"byte_end":1879,"line_start":38,"line_end":38,"column_start":1,"column_end":183}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1880,"byte_end":1883,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ If you want to see library usage examples, please check:","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1884,"byte_end":1944,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"/ [https://github.com/dusk-network/plonk/tree/v0.1.0/examples](https://github.com/dusk-network/plonk/tree/v0.1.0/examples)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":1945,"byte_end":2069,"line_start":41,"line_end":41,"column_start":1,"column_end":125}},{"value":"allow(clippy :: suspicious_arithmetic_impl)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2127,"byte_end":2172,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"allow(clippy :: suspicious_op_assign_impl)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2230,"byte_end":2274,"line_start":45,"line_end":45,"column_start":1,"column_end":45}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2336,"byte_end":2377,"line_start":47,"line_end":47,"column_start":1,"column_end":42}},{"value":"allow(clippy :: match_bool)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2441,"byte_end":2470,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"allow(unknown_lints)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2537,"byte_end":2561,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"deny(broken_intra_doc_links)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2562,"byte_end":2594,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2595,"byte_end":2634,"line_start":53,"line_end":53,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2635,"byte_end":2657,"line_start":54,"line_end":54,"column_start":1,"column_end":23}},{"value":"deny(unsafe_code)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2658,"byte_end":2679,"line_start":55,"line_end":55,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"circuit_builder","qualname":"::circuit_builder","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":1904},{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1927}],"decl_id":null,"docs":" Tools & traits for PLONK circuits\n","sig":null,"attributes":[{"value":"/ Tools & traits for PLONK circuits","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":8488,"byte_end":8525,"line_start":7,"line_end":7,"column_start":1,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1905},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":8904,"byte_end":8913,"line_start":21,"line_end":21,"column_start":5,"column_end":14},"name":"BlsScalar","qualname":"::circuit_builder::PublicInput::BlsScalar","value":"PublicInput::BlsScalar(BlsScalar, usize)","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" Scalar Input\n","sig":null,"attributes":[{"value":"/ Scalar Input","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":8883,"byte_end":8899,"line_start":20,"line_end":20,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1909},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":8967,"byte_end":8979,"line_start":23,"line_end":23,"column_start":5,"column_end":17},"name":"JubJubScalar","qualname":"::circuit_builder::PublicInput::JubJubScalar","value":"PublicInput::JubJubScalar(JubJubScalar, usize)","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" Embedded Scalar Input\n","sig":null,"attributes":[{"value":"/ Embedded Scalar Input","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":8937,"byte_end":8962,"line_start":22,"line_end":22,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1913},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9036,"byte_end":9047,"line_start":25,"line_end":25,"column_start":5,"column_end":16},"name":"AffinePoint","qualname":"::circuit_builder::PublicInput::AffinePoint","value":"PublicInput::AffinePoint(JubJubAffine, usize, usize)","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" Point as Public Input\n","sig":null,"attributes":[{"value":"/ Point as Public Input","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9006,"byte_end":9031,"line_start":24,"line_end":24,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":1904},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":8865,"byte_end":8876,"line_start":19,"line_end":19,"column_start":10,"column_end":21},"name":"PublicInput","qualname":"::circuit_builder::PublicInput","value":"pub enum PublicInput {\n    BlsScalar(BlsScalar, usize),\n    JubJubScalar(JubJubScalar, usize),\n    AffinePoint(JubJubAffine, usize, usize),\n}","parent":null,"children":[{"krate":0,"index":1905},{"krate":0,"index":1909},{"krate":0,"index":1913}],"decl_id":null,"docs":" Public Input\n","sig":null,"attributes":[{"value":"/ Public Input","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":8809,"byte_end":8825,"line_start":17,"line_end":17,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9160,"byte_end":9165,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"value","qualname":"<PublicInput>::value","value":"pub fn value(&Self) -> Vec<BlsScalar>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of a PublicInput struct\n","sig":null,"attributes":[{"value":"/ Returns the value of a PublicInput struct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9103,"byte_end":9148,"line_start":29,"line_end":29,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9538,"byte_end":9541,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"pos","qualname":"<PublicInput>::pos","value":"pub fn pos(&Self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the positions that of a PublicInput struct\n","sig":null,"attributes":[{"value":"/ Returns the positions that of a PublicInput struct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9472,"byte_end":9526,"line_start":38,"line_end":38,"column_start":5,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9905,"byte_end":9912,"line_start":50,"line_end":50,"column_start":11,"column_end":18},"name":"Circuit","qualname":"::circuit_builder::Circuit","value":"Circuit<'a>","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":67}],"decl_id":null,"docs":" Circuit representation for a gadget with all of the tools that it\n should implement.\n","sig":null,"attributes":[{"value":"/ Circuit representation for a gadget with all of the tools that it","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9803,"byte_end":9872,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ should implement.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9873,"byte_end":9894,"line_start":49,"line_end":49,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":10006,"byte_end":10012,"line_start":55,"line_end":55,"column_start":8,"column_end":14},"name":"gadget","qualname":"::circuit_builder::Circuit::gadget","value":"pub fn gadget(&mut Self, &mut StandardComposer) -> Result<()>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Gadget implementation used to fill the composer.\n","sig":null,"attributes":[{"value":"/ Gadget implementation used to fill the composer.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9946,"byte_end":9998,"line_start":54,"line_end":54,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":10218,"byte_end":10225,"line_start":58,"line_end":58,"column_start":8,"column_end":15},"name":"compile","qualname":"::circuit_builder::Circuit::compile","value":"pub fn compile(&mut Self, &PublicParameters)\n-> Result<(ProverKey, VerifierKey)>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Compiles the circuit by using a function that returns a `Result`\n with the `ProverKey`, `VerifierKey` and the circuit size.\n","sig":null,"attributes":[{"value":"/ Compiles the circuit by using a function that returns a `Result`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":10076,"byte_end":10144,"line_start":56,"line_end":56,"column_start":5,"column_end":73}},{"value":"/ with the `ProverKey`, `VerifierKey` and the circuit size.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":10149,"byte_end":10210,"line_start":57,"line_end":57,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":11236,"byte_end":11256,"line_start":82,"line_end":82,"column_start":8,"column_end":28},"name":"get_mut_pi_positions","qualname":"::circuit_builder::Circuit::get_mut_pi_positions","value":"pub fn get_mut_pi_positions(&mut Self) -> &mut Vec<PublicInput>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" /// Return a mutable reference to the Public Inputs storage of the circuit.\n","sig":null,"attributes":[{"value":"/ /// Return a mutable reference to the Public Inputs storage of the circuit.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":11149,"byte_end":11228,"line_start":81,"line_end":81,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":11374,"byte_end":11390,"line_start":85,"line_end":85,"column_start":8,"column_end":24},"name":"get_pi_positions","qualname":"::circuit_builder::Circuit::get_pi_positions","value":"pub fn get_pi_positions(&Self) -> &Vec<PublicInput>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Return a reference to the Public Inputs storage of the circuit.\n","sig":null,"attributes":[{"value":"/ Return a reference to the Public Inputs storage of the circuit.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":11299,"byte_end":11366,"line_start":84,"line_end":84,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":11477,"byte_end":11485,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"build_pi","qualname":"::circuit_builder::Circuit::build_pi","value":"pub fn build_pi(&Self, &[PublicInput]) -> Result<Vec<BlsScalar>>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Build PI vector for Proof verifications.\n","sig":null,"attributes":[{"value":"/ Build PI vector for Proof verifications.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":11425,"byte_end":11469,"line_start":87,"line_end":87,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12448,"byte_end":12461,"line_start":111,"line_end":111,"column_start":8,"column_end":21},"name":"get_trim_size","qualname":"::circuit_builder::Circuit::get_trim_size","value":"pub fn get_trim_size(&Self) -> usize","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Returns the size at which we trim the `PublicParameters`\n to compile the circuit or perform proving/verification\n actions.\n","sig":null,"attributes":[{"value":"/ Returns the size at which we trim the `PublicParameters`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12300,"byte_end":12360,"line_start":108,"line_end":108,"column_start":5,"column_end":65}},{"value":"/ to compile the circuit or perform proving/verification","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12365,"byte_end":12423,"line_start":109,"line_end":109,"column_start":5,"column_end":63}},{"value":"/ actions.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12428,"byte_end":12440,"line_start":110,"line_end":110,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12593,"byte_end":12606,"line_start":115,"line_end":115,"column_start":8,"column_end":21},"name":"set_trim_size","qualname":"::circuit_builder::Circuit::set_trim_size","value":"pub fn set_trim_size(&mut Self, usize)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Sets the trim size that will be used by this circuit when\n trimming the Public Parameters.\n","sig":null,"attributes":[{"value":"/ Sets the trim size that will be used by this circuit when","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12484,"byte_end":12545,"line_start":113,"line_end":113,"column_start":5,"column_end":66}},{"value":"/ trimming the Public Parameters.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12550,"byte_end":12585,"line_start":114,"line_end":114,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12726,"byte_end":12735,"line_start":118,"line_end":118,"column_start":8,"column_end":17},"name":"gen_proof","qualname":"::circuit_builder::Circuit::gen_proof","value":"pub fn gen_proof(&mut Self, &PublicParameters, &ProverKey, &'static [u8])\n-> Result<Proof>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Generates a proof using the provided `CircuitInputs` & `ProverKey` instances.\n","sig":null,"attributes":[{"value":"/ Generates a proof using the provided `CircuitInputs` & `ProverKey` instances.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":12637,"byte_end":12718,"line_start":117,"line_end":117,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":13393,"byte_end":13405,"line_start":136,"line_end":136,"column_start":8,"column_end":20},"name":"verify_proof","qualname":"::circuit_builder::Circuit::verify_proof","value":"pub fn verify_proof(&mut Self, &PublicParameters, &VerifierKey, &'static [u8],\n                    &Proof, &[PublicInput]) -> Result<()>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Verifies a proof using the provided `CircuitInputs` & `VerifierKey` instances.\n","sig":null,"attributes":[{"value":"/ Verifies a proof using the provided `CircuitInputs` & `VerifierKey` instances.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":13303,"byte_end":13385,"line_start":135,"line_end":135,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1929},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14324,"byte_end":14345,"line_start":161,"line_end":161,"column_start":5,"column_end":26},"name":"CircuitInputsNotFound","qualname":"::circuit_builder::CircuitErrors::CircuitInputsNotFound","value":"CircuitErrors::CircuitInputsNotFound","parent":{"krate":0,"index":1923},"children":[],"decl_id":null,"docs":" This error occurs when the circuit is not provided with all of the\n required inputs.\n","sig":null,"attributes":[{"value":"/ This error occurs when the circuit is not provided with all of the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14177,"byte_end":14247,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/ required inputs.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14252,"byte_end":14272,"line_start":159,"line_end":159,"column_start":5,"column_end":25}},{"value":"error(\"missing inputs for the circuit\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14277,"byte_end":14319,"line_start":160,"line_end":160,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1931},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14525,"byte_end":14549,"line_start":165,"line_end":165,"column_start":5,"column_end":29},"name":"UninitializedPIGenerator","qualname":"::circuit_builder::CircuitErrors::UninitializedPIGenerator","value":"CircuitErrors::UninitializedPIGenerator","parent":{"krate":0,"index":1923},"children":[],"decl_id":null,"docs":" This error occurs when we want to verify a Proof but the pi_constructor\n attribute is uninitialized.\n","sig":null,"attributes":[{"value":"/ This error occurs when we want to verify a Proof but the pi_constructor","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14351,"byte_end":14426,"line_start":162,"line_end":162,"column_start":5,"column_end":80}},{"value":"/ attribute is uninitialized.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14431,"byte_end":14462,"line_start":163,"line_end":163,"column_start":5,"column_end":36}},{"value":"error(\"PI constructor attribute is uninitialized\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14467,"byte_end":14520,"line_start":164,"line_end":164,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":1923},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14157,"byte_end":14170,"line_start":157,"line_end":157,"column_start":10,"column_end":23},"name":"CircuitErrors","qualname":"::circuit_builder::CircuitErrors","value":"pub enum CircuitErrors { CircuitInputsNotFound, UninitializedPIGenerator, }","parent":null,"children":[{"krate":0,"index":1929},{"krate":0,"index":1931}],"decl_id":null,"docs":" Represents an error in the PublicParameters creation and or modification.\n","sig":null,"attributes":[{"value":"/ Represents an error in the PublicParameters creation and or modification.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":14046,"byte_end":14123,"line_start":155,"line_end":155,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":71},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"commitment_scheme","qualname":"::commitment_scheme","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74}],"decl_id":null,"docs":" Ideally we should cleanly abstract away the polynomial commitment scheme\n We note that PLONK makes use of the linearisation technique\n conceived in SONIC [Mary Maller]. This technique implicitly requires the\n commitment scheme to be homomorphic. `Merkle Tree like` techniques such as FRI are not homomorphic\n and therefore for PLONK to be usable with all commitment schemes without modification, one would need to remove the lineariser\n","sig":null,"attributes":[{"value":"/ Ideally we should cleanly abstract away the polynomial commitment scheme","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","byte_start":19557,"byte_end":19633,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ We note that PLONK makes use of the linearisation technique","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","byte_start":19634,"byte_end":19697,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/ conceived in SONIC [Mary Maller]. This technique implicitly requires the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","byte_start":19698,"byte_end":19774,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ commitment scheme to be homomorphic. `Merkle Tree like` techniques such as FRI are not homomorphic","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","byte_start":19775,"byte_end":19877,"line_start":10,"line_end":10,"column_start":1,"column_end":103}},{"value":"/ and therefore for PLONK to be usable with all commitment schemes without modification, one would need to remove the lineariser","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","byte_start":19878,"byte_end":20008,"line_start":11,"line_end":11,"column_start":1,"column_end":131}}]},{"kind":"Type","id":{"krate":0,"index":73},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","byte_start":20220,"byte_end":20225,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"name":"Proof","qualname":"::commitment_scheme::CommitmentScheme::Proof","value":"type Proof;","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":74},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"kzg10","qualname":"::commitment_scheme::kzg10","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":79},{"krate":0,"index":184},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":1985},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1992},{"krate":0,"index":1994},{"krate":0,"index":1998},{"krate":0,"index":274},{"krate":0,"index":2000},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2006},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":281},{"krate":0,"index":285}],"decl_id":null,"docs":" Implementation of the KZG10 polynomial commitment scheme.\n","sig":null,"attributes":[{"value":"/ Implementation of the KZG10 polynomial commitment scheme.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20504,"byte_end":20565,"line_start":7,"line_end":7,"column_start":1,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":75},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"errors","qualname":"::commitment_scheme::kzg10::errors","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1937}],"decl_id":null,"docs":" Errors related to KZG10\n","sig":null,"attributes":[{"value":"/ Errors related to KZG10","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":24828,"byte_end":24855,"line_start":7,"line_end":7,"column_start":1,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1939},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25195,"byte_end":25207,"line_start":17,"line_end":17,"column_start":5,"column_end":17},"name":"DegreeIsZero","qualname":"::commitment_scheme::kzg10::errors::KZG10Errors::DegreeIsZero","value":"KZG10Errors::DegreeIsZero","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to create PublicParameters\n and supplies the max degree as zero.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to create PublicParameters","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25009,"byte_end":25077,"line_start":14,"line_end":14,"column_start":5,"column_end":73}},{"value":"/ and supplies the max degree as zero.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25082,"byte_end":25122,"line_start":15,"line_end":15,"column_start":5,"column_end":45}},{"value":"error(\"cannot create PublicParameters with max degree as 0\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25127,"byte_end":25190,"line_start":16,"line_end":16,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1941},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25401,"byte_end":25424,"line_start":21,"line_end":21,"column_start":5,"column_end":28},"name":"TruncatedDegreeTooLarge","qualname":"::commitment_scheme::kzg10::errors::KZG10Errors::TruncatedDegreeTooLarge","value":"KZG10Errors::TruncatedDegreeTooLarge","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to trim PublicParameters\n to a degree that is larger than the maximum degree.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to trim PublicParameters","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25213,"byte_end":25279,"line_start":18,"line_end":18,"column_start":5,"column_end":71}},{"value":"/ to a degree that is larger than the maximum degree.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25284,"byte_end":25339,"line_start":19,"line_end":19,"column_start":5,"column_end":60}},{"value":"error(\"cannot trim more than the maximum degree\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25344,"byte_end":25396,"line_start":20,"line_end":20,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1943},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25611,"byte_end":25632,"line_start":25,"line_end":25,"column_start":5,"column_end":26},"name":"TruncatedDegreeIsZero","qualname":"::commitment_scheme::kzg10::errors::KZG10Errors::TruncatedDegreeIsZero","value":"KZG10Errors::TruncatedDegreeIsZero","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to trim PublicParameters\n down to a degree that is zero.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to trim PublicParameters","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25430,"byte_end":25496,"line_start":22,"line_end":22,"column_start":5,"column_end":71}},{"value":"/ down to a degree that is zero.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25501,"byte_end":25535,"line_start":23,"line_end":23,"column_start":5,"column_end":39}},{"value":"error(\"cannot trim PublicParameters to a maximum size of zero\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25540,"byte_end":25606,"line_start":24,"line_end":24,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1945},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25866,"byte_end":25890,"line_start":29,"line_end":29,"column_start":5,"column_end":29},"name":"PolynomialDegreeTooLarge","qualname":"::commitment_scheme::kzg10::errors::KZG10Errors::PolynomialDegreeTooLarge","value":"KZG10Errors::PolynomialDegreeTooLarge","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to commit to a polynomial whose degree is larger than\n the supported degree for that proving key.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to commit to a polynomial whose degree is larger than","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25638,"byte_end":25733,"line_start":26,"line_end":26,"column_start":5,"column_end":100}},{"value":"/ the supported degree for that proving key.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25738,"byte_end":25784,"line_start":27,"line_end":27,"column_start":5,"column_end":51}},{"value":"error(\"proving key is not large enough to commit to said polynomial\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25789,"byte_end":25861,"line_start":28,"line_end":28,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1947},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":26049,"byte_end":26071,"line_start":32,"line_end":32,"column_start":5,"column_end":27},"name":"PolynomialDegreeIsZero","qualname":"::commitment_scheme::kzg10::errors::KZG10Errors::PolynomialDegreeIsZero","value":"KZG10Errors::PolynomialDegreeIsZero","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to commit to a polynomial whose degree is zero.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to commit to a polynomial whose degree is zero.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25896,"byte_end":25985,"line_start":30,"line_end":30,"column_start":5,"column_end":94}},{"value":"error(\"cannot commit to polynomial of zero degree\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":25990,"byte_end":26044,"line_start":31,"line_end":31,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1949},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":26207,"byte_end":26226,"line_start":35,"line_end":35,"column_start":5,"column_end":24},"name":"PairingCheckFailure","qualname":"::commitment_scheme::kzg10::errors::KZG10Errors::PairingCheckFailure","value":"KZG10Errors::PairingCheckFailure","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" This error occurs when the pairing check fails at being equal to the Identity point.\n","sig":null,"attributes":[{"value":"/ This error occurs when the pairing check fails at being equal to the Identity point.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":26077,"byte_end":26165,"line_start":33,"line_end":33,"column_start":5,"column_end":93}},{"value":"error(\"pairing check failed\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":26170,"byte_end":26202,"line_start":34,"line_end":34,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":1933},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":24991,"byte_end":25002,"line_start":13,"line_end":13,"column_start":10,"column_end":21},"name":"KZG10Errors","qualname":"::commitment_scheme::kzg10::errors::KZG10Errors","value":"pub enum KZG10Errors {\n    DegreeIsZero,\n    TruncatedDegreeTooLarge,\n    TruncatedDegreeIsZero,\n    PolynomialDegreeTooLarge,\n    PolynomialDegreeIsZero,\n    PairingCheckFailure,\n}","parent":null,"children":[{"krate":0,"index":1939},{"krate":0,"index":1941},{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1949}],"decl_id":null,"docs":" Represents an error in the PublicParameters creation and or modification.\n","sig":null,"attributes":[{"value":"/ Represents an error in the PublicParameters creation and or modification.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/errors.rs","byte_start":24880,"byte_end":24957,"line_start":11,"line_end":11,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":79},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"key","qualname":"::commitment_scheme::kzg10::key","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":1951},{"krate":0,"index":1957},{"krate":0,"index":1959},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":132},{"krate":0,"index":158},{"krate":0,"index":183}],"decl_id":null,"docs":" Key module contains the utilities and data structures\n that support the generation and usage of Commit and\n Opening keys.\n","sig":null,"attributes":[{"value":"/ Key module contains the utilities and data structures","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":26489,"byte_end":26546,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/ that support the generation and usage of Commit and","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":26547,"byte_end":26602,"line_start":8,"line_end":8,"column_start":1,"column_end":56}},{"value":"/ Opening keys.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":26603,"byte_end":26620,"line_start":9,"line_end":9,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1951},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27053,"byte_end":27063,"line_start":20,"line_end":20,"column_start":12,"column_end":22},"name":"OpeningKey","qualname":"::commitment_scheme::kzg10::key::OpeningKey","value":"OpeningKey { g, h, beta_h, prepared_h, prepared_beta_h }","parent":null,"children":[{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956}],"decl_id":null,"docs":" Opening Key is used to verify opening proofs made about a committed polynomial.\n","sig":null,"attributes":[{"value":"/ Opening Key is used to verify opening proofs made about a committed polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":26934,"byte_end":27017,"line_start":18,"line_end":18,"column_start":1,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":1952},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27103,"byte_end":27104,"line_start":22,"line_end":22,"column_start":9,"column_end":10},"name":"g","qualname":"::commitment_scheme::kzg10::key::OpeningKey::g","value":"dusk_bls12_381::G1Affine","parent":{"krate":0,"index":1951},"children":[],"decl_id":null,"docs":" The generator of G1.\n","sig":null,"attributes":[{"value":"/ The generator of G1.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27070,"byte_end":27094,"line_start":21,"line_end":21,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1953},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27153,"byte_end":27154,"line_start":24,"line_end":24,"column_start":9,"column_end":10},"name":"h","qualname":"::commitment_scheme::kzg10::key::OpeningKey::h","value":"dusk_bls12_381::G2Affine","parent":{"krate":0,"index":1951},"children":[],"decl_id":null,"docs":" The generator of G2.\n","sig":null,"attributes":[{"value":"/ The generator of G2.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27120,"byte_end":27144,"line_start":23,"line_end":23,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1954},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27221,"byte_end":27227,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"name":"beta_h","qualname":"::commitment_scheme::kzg10::key::OpeningKey::beta_h","value":"dusk_bls12_381::G2Affine","parent":{"krate":0,"index":1951},"children":[],"decl_id":null,"docs":" \\beta times the above generator of G2.\n","sig":null,"attributes":[{"value":"/ \\beta times the above generator of G2.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27170,"byte_end":27212,"line_start":25,"line_end":25,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1955},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27306,"byte_end":27316,"line_start":28,"line_end":28,"column_start":9,"column_end":19},"name":"prepared_h","qualname":"::commitment_scheme::kzg10::key::OpeningKey::prepared_h","value":"dusk_bls12_381::G2Prepared","parent":{"krate":0,"index":1951},"children":[],"decl_id":null,"docs":" The generator of G2, prepared for use in pairings.\n","sig":null,"attributes":[{"value":"/ The generator of G2, prepared for use in pairings.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27243,"byte_end":27297,"line_start":27,"line_end":27,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1956},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27415,"byte_end":27430,"line_start":30,"line_end":30,"column_start":9,"column_end":24},"name":"prepared_beta_h","qualname":"::commitment_scheme::kzg10::key::OpeningKey::prepared_beta_h","value":"dusk_bls12_381::G2Prepared","parent":{"krate":0,"index":1951},"children":[],"decl_id":null,"docs":" \\beta times the above generator of G2, prepared for use in pairings.\n","sig":null,"attributes":[{"value":"/ \\beta times the above generator of G2, prepared for use in pairings.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27334,"byte_end":27406,"line_start":29,"line_end":29,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1961},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27559,"byte_end":27568,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"CommitKey","qualname":"::commitment_scheme::kzg10::key::CommitKey","value":"CommitKey { powers_of_g }","parent":null,"children":[{"krate":0,"index":1962}],"decl_id":null,"docs":" CommitKey is used to commit to a polynomial which is bounded by the max_degree.\n","sig":null,"attributes":[{"value":"/ CommitKey is used to commit to a polynomial which is bounded by the max_degree.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27447,"byte_end":27530,"line_start":33,"line_end":33,"column_start":1,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":1962},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27668,"byte_end":27679,"line_start":37,"line_end":37,"column_start":9,"column_end":20},"name":"powers_of_g","qualname":"::commitment_scheme::kzg10::key::CommitKey::powers_of_g","value":"std::vec::Vec<dusk_bls12_381::G1Affine>","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Group elements of the form `{ \\beta^i G }`, where `i` ranges from 0 to `degree`.\n","sig":null,"attributes":[{"value":"/ Group elements of the form `{ \\beta^i G }`, where `i` ranges from 0 to `degree`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27575,"byte_end":27659,"line_start":36,"line_end":36,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27781,"byte_end":27789,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<CommitKey>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Serialises the commitment Key to a byte slice\n","sig":null,"attributes":[{"value":"/ Serialises the commitment Key to a byte slice","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27720,"byte_end":27769,"line_start":41,"line_end":41,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":28205,"byte_end":28215,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<CommitKey>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Result<CommitKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialises a bytes slice to a Commitment Key\n","sig":null,"attributes":[{"value":"/ Deserialises a bytes slice to a Commitment Key","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":28143,"byte_end":28193,"line_start":56,"line_end":56,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":28787,"byte_end":28797,"line_start":75,"line_end":75,"column_start":12,"column_end":22},"name":"max_degree","qualname":"<CommitKey>::max_degree","value":"pub fn max_degree(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum degree polynomial that you can commit to.\n","sig":null,"attributes":[{"value":"/ Returns the maximum degree polynomial that you can commit to.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":28710,"byte_end":28775,"line_start":74,"line_end":74,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":29066,"byte_end":29074,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"truncate","qualname":"<CommitKey>::truncate","value":"pub fn truncate(&Self, usize) -> Result<CommitKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Truncates the commit key to a lower max degree.\n Returns an error if the truncated degree is zero or if the truncated degree\n is larger than the max degree of the commit key.\n","sig":null,"attributes":[{"value":"/ Truncates the commit key to a lower max degree.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":28862,"byte_end":28913,"line_start":79,"line_end":79,"column_start":5,"column_end":56}},{"value":"/ Returns an error if the truncated degree is zero or if the truncated degree","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":28918,"byte_end":28997,"line_start":80,"line_end":80,"column_start":5,"column_end":84}},{"value":"/ is larger than the max degree of the commit key.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":29002,"byte_end":29054,"line_start":81,"line_end":81,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":30104,"byte_end":30110,"line_start":110,"line_end":110,"column_start":12,"column_end":18},"name":"commit","qualname":"<CommitKey>::commit","value":"pub fn commit(&Self, &Polynomial) -> Result<Commitment, Error>","parent":null,"children":[],"decl_id":null,"docs":" Commits to a polynomial returning the corresponding `Commitment`.","sig":null,"attributes":[{"value":"/ Commits to a polynomial returning the corresponding `Commitment`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":29916,"byte_end":29985,"line_start":107,"line_end":107,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":29990,"byte_end":29993,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the polynomial's degree is more than the max degree of the commit key.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":29998,"byte_end":30092,"line_start":109,"line_end":109,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":30928,"byte_end":30950,"line_start":125,"line_end":125,"column_start":12,"column_end":34},"name":"compute_single_witness","qualname":"<CommitKey>::compute_single_witness","value":"pub fn compute_single_witness(&Self, &Polynomial, &BlsScalar) -> Polynomial","parent":null,"children":[],"decl_id":null,"docs":" For a given polynomial `p` and a point `z`, compute the witness\n for p(z) using Ruffini's method for simplicity.\n The Witness is the quotient of f(x) - f(z) / x-z.\n However we note that the quotient polynomial is invariant under the value f(z)\n ie. only the remainder changes. We can therefore compute the witness as f(x) / x - z\n and only use the remainder term f(z) during verification.\n","sig":null,"attributes":[{"value":"/ For a given polynomial `p` and a point `z`, compute the witness","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":30489,"byte_end":30556,"line_start":119,"line_end":119,"column_start":5,"column_end":72}},{"value":"/ for p(z) using Ruffini's method for simplicity.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":30561,"byte_end":30612,"line_start":120,"line_end":120,"column_start":5,"column_end":56}},{"value":"/ The Witness is the quotient of f(x) - f(z) / x-z.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":30617,"byte_end":30670,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/ However we note that the quotient polynomial is invariant under the value f(z)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":30675,"byte_end":30757,"line_start":122,"line_end":122,"column_start":5,"column_end":87}},{"value":"/ ie. only the remainder changes. We can therefore compute the witness as f(x) / x - z","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":30762,"byte_end":30850,"line_start":123,"line_end":123,"column_start":5,"column_end":93}},{"value":"/ and only use the remainder term f(z) during verification.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":30855,"byte_end":30916,"line_start":124,"line_end":124,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":32189,"byte_end":32200,"line_start":155,"line_end":155,"column_start":12,"column_end":23},"name":"open_single","qualname":"<CommitKey>::open_single","value":"pub fn open_single(&Self, &Polynomial, &BlsScalar, &BlsScalar)\n-> Result<Proof, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates an opening proof that a polynomial `p` was correctly evaluated at p(z) and produced the value\n `v`. ie v = p(z).\n Returns an error if the polynomials degree is too large.\n","sig":null,"attributes":[{"value":"/ Creates an opening proof that a polynomial `p` was correctly evaluated at p(z) and produced the value","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":31981,"byte_end":32086,"line_start":152,"line_end":152,"column_start":5,"column_end":110}},{"value":"/ `v`. ie v = p(z).","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":32091,"byte_end":32112,"line_start":153,"line_end":153,"column_start":5,"column_end":26}},{"value":"/ Returns an error if the polynomials degree is too large.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":32117,"byte_end":32177,"line_start":154,"line_end":154,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":32863,"byte_end":32876,"line_start":172,"line_end":172,"column_start":12,"column_end":25},"name":"open_multiple","qualname":"<CommitKey>::open_multiple","value":"pub fn open_multiple(&Self, &[Polynomial], Vec<BlsScalar>, &BlsScalar,\n                     &mut Transcript) -> Result<AggregateProof, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates an opening proof that multiple polynomials were evaluated at the same point\n and that each evaluation produced the correct evaluation point.\n Returns an error if any of the polynomial's degrees are too large.\n","sig":null,"attributes":[{"value":"/ Creates an opening proof that multiple polynomials were evaluated at the same point","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":32617,"byte_end":32704,"line_start":169,"line_end":169,"column_start":5,"column_end":92}},{"value":"/ and that each evaluation produced the correct evaluation point.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":32709,"byte_end":32776,"line_start":170,"line_end":170,"column_start":5,"column_end":72}},{"value":"/ Returns an error if any of the polynomial's degrees are too large.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":32781,"byte_end":32851,"line_start":171,"line_end":171,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":34213,"byte_end":34221,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<OpeningKey>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Serialises an Opening Key to bytes\n","sig":null,"attributes":[{"value":"/ Serialises an Opening Key to bytes","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":34163,"byte_end":34201,"line_start":212,"line_end":212,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":34853,"byte_end":34863,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<OpeningKey>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Result<OpeningKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialises a byte slice into an Opening Key\n","sig":null,"attributes":[{"value":"/ Deserialises a byte slice into an Opening Key","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":34792,"byte_end":34841,"line_start":233,"line_end":233,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":35312,"byte_end":35317,"line_start":246,"line_end":246,"column_start":12,"column_end":17},"name":"check","qualname":"<OpeningKey>::check","value":"pub fn check(&Self, BlsScalar, Proof) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks that a polynomial `p` was evaluated at a point `z` and returned the value specified `v`.\n ie. v = p(z).\n","sig":null,"attributes":[{"value":"/ Checks that a polynomial `p` was evaluated at a point `z` and returned the value specified `v`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":35179,"byte_end":35278,"line_start":244,"line_end":244,"column_start":5,"column_end":104}},{"value":"/ ie. v = p(z).","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":35283,"byte_end":35300,"line_start":245,"line_end":245,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":36011,"byte_end":36022,"line_start":263,"line_end":263,"column_start":12,"column_end":23},"name":"batch_check","qualname":"<OpeningKey>::batch_check","value":"pub fn batch_check(&Self, &[BlsScalar], &[Proof], &mut Transcript)\n-> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether a batch of polynomials evaluated at different points, returned their specified value.\n","sig":null,"attributes":[{"value":"/ Checks whether a batch of polynomials evaluated at different points, returned their specified value.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":35895,"byte_end":35999,"line_start":262,"line_end":262,"column_start":5,"column_end":109}}]},{"kind":"Mod","id":{"krate":0,"index":184},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"srs","qualname":"::commitment_scheme::kzg10::srs","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":1965},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1973},{"krate":0,"index":238}],"decl_id":null,"docs":" The Public Parameters can also be referred to as the Structured Reference String (SRS).\n","sig":null,"attributes":[{"value":"/ The Public Parameters can also be referred to as the Structured Reference String (SRS).","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":43260,"byte_end":43351,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1965},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":43945,"byte_end":43961,"line_start":24,"line_end":24,"column_start":12,"column_end":28},"name":"PublicParameters","qualname":"::commitment_scheme::kzg10::srs::PublicParameters","value":"PublicParameters { commit_key, opening_key }","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1967}],"decl_id":null,"docs":" The Public Parameters can also be referred to as the Structured Reference String (SRS).\n It is available to both the prover and verifier and allows the verifier to\n efficiently verify and make claims about polynomials up to and including a configured degree.\n","sig":null,"attributes":[{"value":"/ The Public Parameters can also be referred to as the Structured Reference String (SRS).","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":43648,"byte_end":43739,"line_start":20,"line_end":20,"column_start":1,"column_end":92}},{"value":"/ It is available to both the prover and verifier and allows the verifier to","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":43740,"byte_end":43818,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ efficiently verify and make claims about polynomials up to and including a configured degree.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":43819,"byte_end":43916,"line_start":22,"line_end":22,"column_start":1,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":1966},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44031,"byte_end":44041,"line_start":26,"line_end":26,"column_start":9,"column_end":19},"name":"commit_key","qualname":"::commitment_scheme::kzg10::srs::PublicParameters::commit_key","value":"commitment_scheme::kzg10::key::CommitKey","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" Key used to generate proofs for composed circuits.\n","sig":null,"attributes":[{"value":"/ Key used to generate proofs for composed circuits.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":43968,"byte_end":44022,"line_start":25,"line_end":25,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1967},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44119,"byte_end":44130,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"name":"opening_key","qualname":"::commitment_scheme::kzg10::srs::PublicParameters::opening_key","value":"commitment_scheme::kzg10::key::OpeningKey","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" Key used to verify proofs for composed circuits.\n","sig":null,"attributes":[{"value":"/ Key used to verify proofs for composed circuits.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44058,"byte_end":44110,"line_start":27,"line_end":27,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44536,"byte_end":44541,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"setup","qualname":"<PublicParameters>::setup","value":"pub fn setup<R: RngCore>(usize, &mut R) -> Result<PublicParameters, Error>","parent":null,"children":[],"decl_id":null,"docs":" Setup generates the public parameters using a random number generator.\n This method will in most cases be used for testing and exploration.\n In reality, a `Trusted party` or a `Multiparty Computation` will used to generate the SRS.\n Returns an error if the configured degree is less than one.\n","sig":null,"attributes":[{"value":"/ Setup generates the public parameters using a random number generator.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44207,"byte_end":44281,"line_start":34,"line_end":34,"column_start":5,"column_end":79}},{"value":"/ This method will in most cases be used for testing and exploration.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44286,"byte_end":44357,"line_start":35,"line_end":35,"column_start":5,"column_end":76}},{"value":"/ In reality, a `Trusted party` or a `Multiparty Computation` will used to generate the SRS.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44362,"byte_end":44456,"line_start":36,"line_end":36,"column_start":5,"column_end":99}},{"value":"/ Returns an error if the configured degree is less than one.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44461,"byte_end":44524,"line_start":37,"line_end":37,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":46000,"byte_end":46010,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<PublicParameters>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Result<PublicParameters, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialise a slice of bytes into a Public Parameter struct\n","sig":null,"attributes":[{"value":"/ Deserialise a slice of bytes into a Public Parameter struct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":45925,"byte_end":45988,"line_start":75,"line_end":75,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":46544,"byte_end":46552,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<PublicParameters>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Serialises a Public Parameter struct into a slice of bytes\n","sig":null,"attributes":[{"value":"/ Serialises a Public Parameter struct into a slice of bytes","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":46470,"byte_end":46532,"line_start":91,"line_end":91,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":46950,"byte_end":46954,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"trim","qualname":"<PublicParameters>::trim","value":"pub fn trim(&Self, usize) -> Result<(CommitKey, OpeningKey), Error>","parent":null,"children":[],"decl_id":null,"docs":" Trim truncates the prover key to allow the prover to commit to polynomials up to the\n and including the truncated degree.\n Returns an error if the truncated degree is larger than the public parameters configured degree.\n","sig":null,"attributes":[{"value":"/ Trim truncates the prover key to allow the prover to commit to polynomials up to the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":46701,"byte_end":46789,"line_start":98,"line_end":98,"column_start":5,"column_end":93}},{"value":"/ and including the truncated degree.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":46794,"byte_end":46833,"line_start":99,"line_end":99,"column_start":5,"column_end":44}},{"value":"/ Returns an error if the truncated degree is larger than the public parameters configured degree.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":46838,"byte_end":46938,"line_start":100,"line_end":100,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":47317,"byte_end":47327,"line_start":108,"line_end":108,"column_start":12,"column_end":22},"name":"max_degree","qualname":"<PublicParameters>::max_degree","value":"pub fn max_degree(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Max degree specifies the largest polynomial that this prover key can commit to.\n","sig":null,"attributes":[{"value":"/ Max degree specifies the largest polynomial that this prover key can commit to.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":47222,"byte_end":47305,"line_start":107,"line_end":107,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":1985},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20984,"byte_end":20989,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Proof","qualname":"::commitment_scheme::kzg10::Proof","value":"Proof { commitment_to_witness, evaluated_point, commitment_to_polynomial }","parent":null,"children":[{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988}],"decl_id":null,"docs":" Proof that a polynomial `p` was correctly evaluated at a point `z`\n producing the evaluated point p(z).\n","sig":null,"attributes":[{"value":"/ Proof that a polynomial `p` was correctly evaluated at a point `z`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20862,"byte_end":20932,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ producing the evaluated point p(z).","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20933,"byte_end":20972,"line_start":22,"line_end":22,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1986},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21056,"byte_end":21077,"line_start":25,"line_end":25,"column_start":9,"column_end":30},"name":"commitment_to_witness","qualname":"::commitment_scheme::kzg10::Proof::commitment_to_witness","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" This is a commitment to the witness polynomial.\n","sig":null,"attributes":[{"value":"/ This is a commitment to the witness polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20996,"byte_end":21047,"line_start":24,"line_end":24,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1987},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21171,"byte_end":21186,"line_start":27,"line_end":27,"column_start":9,"column_end":24},"name":"evaluated_point","qualname":"::commitment_scheme::kzg10::Proof::evaluated_point","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" This is the result of evaluating a polynomial at the point `z`.\n","sig":null,"attributes":[{"value":"/ This is the result of evaluating a polynomial at the point `z`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21095,"byte_end":21162,"line_start":26,"line_end":26,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":1988},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21298,"byte_end":21322,"line_start":29,"line_end":29,"column_start":9,"column_end":33},"name":"commitment_to_polynomial","qualname":"::commitment_scheme::kzg10::Proof::commitment_to_polynomial","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" This is the commitment to the polynomial that you want to prove a statement about.\n","sig":null,"attributes":[{"value":"/ This is the commitment to the polynomial that you want to prove a statement about.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21203,"byte_end":21289,"line_start":28,"line_end":28,"column_start":5,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1994},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21505,"byte_end":21519,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"AggregateProof","qualname":"::commitment_scheme::kzg10::AggregateProof","value":"AggregateProof { commitment_to_witness, evaluated_points, commitments_to_polynomials }","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997}],"decl_id":null,"docs":" Proof that multiple polynomials were correctly evaluated at a point `z`,\n each producing their respective evaluated points p_i(z).\n","sig":null,"attributes":[{"value":"/ Proof that multiple polynomials were correctly evaluated at a point `z`,","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21339,"byte_end":21415,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ each producing their respective evaluated points p_i(z).","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21416,"byte_end":21476,"line_start":33,"line_end":33,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":1995},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21597,"byte_end":21618,"line_start":37,"line_end":37,"column_start":9,"column_end":30},"name":"commitment_to_witness","qualname":"::commitment_scheme::kzg10::AggregateProof::commitment_to_witness","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":1994},"children":[],"decl_id":null,"docs":" This is a commitment to the aggregated witness polynomial.\n","sig":null,"attributes":[{"value":"/ This is a commitment to the aggregated witness polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21526,"byte_end":21588,"line_start":36,"line_end":36,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":1996},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21722,"byte_end":21738,"line_start":39,"line_end":39,"column_start":9,"column_end":25},"name":"evaluated_points","qualname":"::commitment_scheme::kzg10::AggregateProof::evaluated_points","value":"std::vec::Vec<dusk_bls12_381::BlsScalar>","parent":{"krate":0,"index":1994},"children":[],"decl_id":null,"docs":" These are the results of the evaluating each polynomial at the point `z`.\n","sig":null,"attributes":[{"value":"/ These are the results of the evaluating each polynomial at the point `z`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21636,"byte_end":21713,"line_start":38,"line_end":38,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":1997},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21860,"byte_end":21886,"line_start":41,"line_end":41,"column_start":9,"column_end":35},"name":"commitments_to_polynomials","qualname":"::commitment_scheme::kzg10::AggregateProof::commitments_to_polynomials","value":"std::vec::Vec<commitment_scheme::kzg10::Commitment>","parent":{"krate":0,"index":1994},"children":[],"decl_id":null,"docs":" These are the commitments to the polynomials which you want to prove a statement about.\n","sig":null,"attributes":[{"value":"/ These are the commitments to the polynomials which you want to prove a statement about.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21760,"byte_end":21851,"line_start":40,"line_end":40,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":22018,"byte_end":22030,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"with_witness","qualname":"<AggregateProof>::with_witness","value":"pub fn with_witness(Commitment) -> AggregateProof","parent":null,"children":[],"decl_id":null,"docs":" Initialises an `AggregatedProof` with the commitment to the witness.\n","sig":null,"attributes":[{"value":"/ Initialises an `AggregatedProof` with the commitment to the witness.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21934,"byte_end":22006,"line_start":45,"line_end":45,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":22352,"byte_end":22360,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"add_part","qualname":"<AggregateProof>::add_part","value":"pub fn add_part(&mut Self, (BlsScalar, Commitment))","parent":null,"children":[],"decl_id":null,"docs":" Adds an evaluated point with the commitment to the polynomial which produced it.\n","sig":null,"attributes":[{"value":"/ Adds an evaluated point with the commitment to the polynomial which produced it.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":22256,"byte_end":22340,"line_start":54,"line_end":54,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":22700,"byte_end":22707,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"flatten","qualname":"<AggregateProof>::flatten","value":"pub fn flatten(&Self, &mut Transcript) -> Proof","parent":null,"children":[],"decl_id":null,"docs":" Flattens an `AggregateProof` into a `Proof`.\n The transcript must have the same view as the transcript that was used to aggregate the witness in the proving stage.\n","sig":null,"attributes":[{"value":"/ Flattens an `AggregateProof` into a `Proof`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":22514,"byte_end":22562,"line_start":60,"line_end":60,"column_start":5,"column_end":53}},{"value":"/ The transcript must have the same view as the transcript that was used to aggregate the witness in the proving stage.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":22567,"byte_end":22688,"line_start":61,"line_end":61,"column_start":5,"column_end":126}}]},{"kind":"Struct","id":{"krate":0,"index":2000},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":23905,"byte_end":23915,"line_start":91,"line_end":91,"column_start":12,"column_end":22},"name":"Commitment","qualname":"::commitment_scheme::kzg10::Commitment","value":"","parent":null,"children":[],"decl_id":null,"docs":" Holds a commitment to a polynomial in a form of a `G1Affine` Bls12_381 point.\n","sig":null,"attributes":[{"value":"/ Holds a commitment to a polynomial in a form of a `G1Affine` Bls12_381 point.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":23812,"byte_end":23893,"line_start":90,"line_end":90,"column_start":1,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":2002},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":23964,"byte_end":23976,"line_start":93,"line_end":93,"column_start":5,"column_end":17},"name":"0","qualname":"::commitment_scheme::kzg10::Commitment::0","value":"dusk_bls12_381::G1Affine","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" The commitment is a group element.\n","sig":null,"attributes":[{"value":"/ The commitment is a group element.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":23921,"byte_end":23959,"line_start":92,"line_end":92,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24080,"byte_end":24095,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"from_projective","qualname":"<Commitment>::from_projective","value":"pub fn from_projective(G1Projective) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a `Commitment` from a Bls12_381 `G1Projective` point.\n","sig":null,"attributes":[{"value":"/ Builds a `Commitment` from a Bls12_381 `G1Projective` point.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24004,"byte_end":24068,"line_start":97,"line_end":97,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24228,"byte_end":24239,"line_start":102,"line_end":102,"column_start":12,"column_end":23},"name":"from_affine","qualname":"<Commitment>::from_affine","value":"pub fn from_affine(G1Affine) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a `Commitment` from a Bls12_381 `G1Affine` point.\n","sig":null,"attributes":[{"value":"/ Builds a `Commitment` from a Bls12_381 `G1Affine` point.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24156,"byte_end":24216,"line_start":101,"line_end":101,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24408,"byte_end":24413,"line_start":107,"line_end":107,"column_start":12,"column_end":17},"name":"empty","qualname":"<Commitment>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds an empty `Commitment` which is equivalent to the\n `G1Affine` identity point in Bls12_381.\n","sig":null,"attributes":[{"value":"/ Builds an empty `Commitment` which is equivalent to the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24289,"byte_end":24348,"line_start":105,"line_end":105,"column_start":5,"column_end":64}},{"value":"/ `G1Affine` identity point in Bls12_381.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24353,"byte_end":24396,"line_start":106,"line_end":106,"column_start":5,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":287},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constraint_system","qualname":"::constraint_system","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":325},{"krate":0,"index":344},{"krate":0,"index":356},{"krate":0,"index":482},{"krate":0,"index":501},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":526}],"decl_id":null,"docs":" The constraint System module stores the implementation\n of the PLONK Standard Composer, as well as the circuit\n tools and abstractions, used by the Composer to generate,\n build, preprocess circuits.\n","sig":null,"attributes":[{"value":"/ The constraint System module stores the implementation","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":48653,"byte_end":48711,"line_start":7,"line_end":7,"column_start":1,"column_end":59}},{"value":"/ of the PLONK Standard Composer, as well as the circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":48712,"byte_end":48770,"line_start":8,"line_end":8,"column_start":1,"column_end":59}},{"value":"/ tools and abstractions, used by the Composer to generate,","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":48771,"byte_end":48832,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/ build, preprocess circuits.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":48833,"byte_end":48864,"line_start":10,"line_end":10,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2015},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":50470,"byte_end":50486,"line_start":31,"line_end":31,"column_start":12,"column_end":28},"name":"StandardComposer","qualname":"::constraint_system::composer::StandardComposer","value":"StandardComposer { public_inputs }","parent":null,"children":[{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035}],"decl_id":null,"docs":" A composer is a circuit builder\n and will dictate how a circuit is built\n We will have a default Composer called `StandardComposer`\n","sig":null,"attributes":[{"value":"/ A composer is a circuit builder","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":50300,"byte_end":50335,"line_start":27,"line_end":27,"column_start":1,"column_end":36}},{"value":"/ and will dictate how a circuit is built","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":50336,"byte_end":50379,"line_start":28,"line_end":28,"column_start":1,"column_end":44}},{"value":"/ We will have a default Composer called `StandardComposer`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":50380,"byte_end":50441,"line_start":29,"line_end":29,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":2028},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":51418,"byte_end":51431,"line_start":61,"line_end":61,"column_start":9,"column_end":22},"name":"public_inputs","qualname":"::constraint_system::composer::StandardComposer::public_inputs","value":"std::vec::Vec<dusk_bls12_381::BlsScalar>","parent":{"krate":0,"index":2015},"children":[],"decl_id":null,"docs":" Public inputs vector\n","sig":null,"attributes":[{"value":"/ Public inputs vector","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":51385,"byte_end":51409,"line_start":60,"line_end":60,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52210,"byte_end":52222,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"circuit_size","qualname":"<StandardComposer>::circuit_size","value":"pub fn circuit_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of gates in the circuit\n","sig":null,"attributes":[{"value":"/ Returns the number of gates in the circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52152,"byte_end":52198,"line_start":83,"line_end":83,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52756,"byte_end":52759,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"new","qualname":"<StandardComposer>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generates a new empty `StandardComposer` with all of it's fields\n set to hold an initial capacity of 0.","sig":null,"attributes":[{"value":"/ Generates a new empty `StandardComposer` with all of it's fields","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52385,"byte_end":52453,"line_start":96,"line_end":96,"column_start":5,"column_end":73}},{"value":"/ set to hold an initial capacity of 0.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52458,"byte_end":52499,"line_start":97,"line_end":97,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52504,"byte_end":52507,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52512,"byte_end":52525,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52530,"byte_end":52533,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ The usage of this may cause lots of re-allocations since the `Composer`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52538,"byte_end":52613,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/ holds `Vec` for every polynomial, and these will need to be re-allocated","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52618,"byte_end":52694,"line_start":102,"line_end":102,"column_start":5,"column_end":81}},{"value":"/ each time the circuit grows considerably.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52699,"byte_end":52744,"line_start":103,"line_end":103,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52919,"byte_end":52953,"line_start":109,"line_end":109,"column_start":12,"column_end":46},"name":"add_witness_to_circuit_description","qualname":"<StandardComposer>::add_witness_to_circuit_description","value":"pub fn add_witness_to_circuit_description(&mut Self, BlsScalar) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Fixes a variable in the witness to be a part of the circuit description.\n","sig":null,"attributes":[{"value":"/ Fixes a variable in the witness to be a part of the circuit description.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52831,"byte_end":52907,"line_start":108,"line_end":108,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":53387,"byte_end":53405,"line_start":119,"line_end":119,"column_start":12,"column_end":30},"name":"with_expected_size","qualname":"<StandardComposer>::with_expected_size","value":"pub fn with_expected_size(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new circuit with an expected circuit size.\n This will allow for less reallocations when building the circuit\n since the `Vec`s will already have an appropriate allocation at the\n beginning of the composing stage.\n","sig":null,"attributes":[{"value":"/ Creates a new circuit with an expected circuit size.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":53128,"byte_end":53184,"line_start":115,"line_end":115,"column_start":5,"column_end":61}},{"value":"/ This will allow for less reallocations when building the circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":53189,"byte_end":53257,"line_start":116,"line_end":116,"column_start":5,"column_end":73}},{"value":"/ since the `Vec`s will already have an appropriate allocation at the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":53262,"byte_end":53333,"line_start":117,"line_end":117,"column_start":5,"column_end":76}},{"value":"/ beginning of the composing stage.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":53338,"byte_end":53375,"line_start":118,"line_end":118,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55020,"byte_end":55029,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"add_input","qualname":"<StandardComposer>::add_input","value":"pub fn add_input(&mut Self, BlsScalar) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Add Input first calls the `Permutation` struct\n to generate and allocate a new variable `var`.\n The composer then links the Variable to the BlsScalar\n and returns the Variable for use in the system.\n","sig":null,"attributes":[{"value":"/ Add Input first calls the `Permutation` struct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":54785,"byte_end":54835,"line_start":157,"line_end":157,"column_start":5,"column_end":55}},{"value":"/ to generate and allocate a new variable `var`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":54840,"byte_end":54890,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/ The composer then links the Variable to the BlsScalar","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":54895,"byte_end":54952,"line_start":159,"line_end":159,"column_start":5,"column_end":62}},{"value":"/ and returns the Variable for use in the system.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":54957,"byte_end":55008,"line_start":160,"line_end":160,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55803,"byte_end":55812,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"poly_gate","qualname":"<StandardComposer>::poly_gate","value":"pub fn poly_gate(&mut Self, Variable, Variable, Variable, BlsScalar,\n                 BlsScalar, BlsScalar, BlsScalar, BlsScalar, BlsScalar)\n-> (Variable, Variable, Variable)","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-3 poly gate.\n This gate gives total freedom to the end user to implement the corresponding\n circuits in the most optimized way possible because the under has access to the\n whole set of variables, as well as selector coefficients that take part in the\n computation of the gate equation.","sig":null,"attributes":[{"value":"/ Adds a width-3 poly gate.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55321,"byte_end":55350,"line_start":170,"line_end":170,"column_start":5,"column_end":34}},{"value":"/ This gate gives total freedom to the end user to implement the corresponding","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55355,"byte_end":55435,"line_start":171,"line_end":171,"column_start":5,"column_end":85}},{"value":"/ circuits in the most optimized way possible because the under has access to the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55440,"byte_end":55523,"line_start":172,"line_end":172,"column_start":5,"column_end":88}},{"value":"/ whole set of variables, as well as selector coefficients that take part in the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55528,"byte_end":55610,"line_start":173,"line_end":173,"column_start":5,"column_end":87}},{"value":"/ computation of the gate equation.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55615,"byte_end":55652,"line_start":174,"line_end":174,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55657,"byte_end":55660,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The final constraint added will force the following:","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55665,"byte_end":55721,"line_start":176,"line_end":176,"column_start":5,"column_end":61}},{"value":"/ `(a * b) * q_m + a * q_l + b * q_r + q_c + PI + q_o * c = 0`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":55726,"byte_end":55791,"line_start":177,"line_end":177,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":56985,"byte_end":57006,"line_start":220,"line_end":220,"column_start":12,"column_end":33},"name":"constrain_to_constant","qualname":"<StandardComposer>::constrain_to_constant","value":"pub fn constrain_to_constant(&mut Self, Variable, BlsScalar, BlsScalar)","parent":null,"children":[],"decl_id":null,"docs":" Adds a gate which is designed to constrain a `Variable` to have\n a specific constant value which is sent as a `BlsScalar`.\n","sig":null,"attributes":[{"value":"/ Adds a gate which is designed to constrain a `Variable` to have","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":56840,"byte_end":56907,"line_start":218,"line_end":218,"column_start":5,"column_end":72}},{"value":"/ a specific constant value which is sent as a `BlsScalar`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":56912,"byte_end":56973,"line_start":219,"line_end":219,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":57465,"byte_end":57477,"line_start":236,"line_end":236,"column_start":12,"column_end":24},"name":"assert_equal","qualname":"<StandardComposer>::assert_equal","value":"pub fn assert_equal(&mut Self, Variable, Variable)","parent":null,"children":[],"decl_id":null,"docs":" Asserts that two variables are the same\n","sig":null,"attributes":[{"value":"/ Asserts that two variables are the same","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":57322,"byte_end":57365,"line_start":234,"line_end":234,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":57955,"byte_end":57973,"line_start":254,"line_end":254,"column_start":12,"column_end":30},"name":"conditional_select","qualname":"<StandardComposer>::conditional_select","value":"pub fn conditional_select(&mut Self, Variable, Variable, Variable) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Conditionally selects a Variable based on an input bit\n If:\n     bit == 1 => choice_a,\n     bit == 0 => choice_b,\n","sig":null,"attributes":[{"value":"/ Conditionally selects a Variable based on an input bit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":57805,"byte_end":57863,"line_start":250,"line_end":250,"column_start":5,"column_end":63}},{"value":"/ If:","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":57868,"byte_end":57875,"line_start":251,"line_end":251,"column_start":5,"column_end":12}},{"value":"/     bit == 1 => choice_a,","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":57880,"byte_end":57909,"line_start":252,"line_end":252,"column_start":5,"column_end":34}},{"value":"/     bit == 0 => choice_b,","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":57914,"byte_end":57943,"line_start":253,"line_end":253,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":59240,"byte_end":59261,"line_start":298,"line_end":298,"column_start":12,"column_end":33},"name":"add_dummy_constraints","qualname":"<StandardComposer>::add_dummy_constraints","value":"pub fn add_dummy_constraints(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" This function is used to add a blinding factor to the witness polynomials\n XXX: Split this into two separate functions and document\n XXX: We could add another section to add random witness variables, with selector polynomials all zero\n","sig":null,"attributes":[{"value":"/ This function is used to add a blinding factor to the witness polynomials","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":58976,"byte_end":59053,"line_start":295,"line_end":295,"column_start":5,"column_end":82}},{"value":"/ XXX: Split this into two separate functions and document","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":59058,"byte_end":59118,"line_start":296,"line_end":296,"column_start":5,"column_end":65}},{"value":"/ XXX: We could add another section to add random witness variables, with selector polynomials all zero","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":59123,"byte_end":59228,"line_start":297,"line_end":297,"column_start":5,"column_end":110}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2044},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/cs_errors.rs","byte_start":68921,"byte_end":68938,"line_start":17,"line_end":17,"column_start":5,"column_end":22},"name":"MismatchedPolyLen","qualname":"::constraint_system::cs_errors::PreProcessingError::MismatchedPolyLen","value":"PreProcessingError::MismatchedPolyLen","parent":{"krate":0,"index":2038},"children":[],"decl_id":null,"docs":" This error occurs when an error triggers during the preprocessing\n stage.\n","sig":null,"attributes":[{"value":"/ This error occurs when an error triggers during the preprocessing","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/cs_errors.rs","byte_start":68774,"byte_end":68843,"line_start":14,"line_end":14,"column_start":5,"column_end":74}},{"value":"/ stage.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/cs_errors.rs","byte_start":68848,"byte_end":68858,"line_start":15,"line_end":15,"column_start":5,"column_end":15}},{"value":"error(\"the length of the wires it's not the same\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/cs_errors.rs","byte_start":68863,"byte_end":68916,"line_start":16,"line_end":16,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":2038},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/cs_errors.rs","byte_start":68749,"byte_end":68767,"line_start":13,"line_end":13,"column_start":10,"column_end":28},"name":"PreProcessingError","qualname":"::constraint_system::cs_errors::PreProcessingError","value":"pub enum PreProcessingError { MismatchedPolyLen, }","parent":null,"children":[{"krate":0,"index":2044}],"decl_id":null,"docs":" Represents an error on the Circuit preprocessing stage.\n","sig":null,"attributes":[{"value":"/ Represents an error on the Circuit preprocessing stage.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/cs_errors.rs","byte_start":68656,"byte_end":68715,"line_start":11,"line_end":11,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2046},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69507,"byte_end":69515,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"Variable","qualname":"::constraint_system::variable::Variable","value":"","parent":null,"children":[],"decl_id":null,"docs":" The value is a reference to the actual value that was added to the constraint system\n","sig":null,"attributes":[{"value":"/ The value is a reference to the actual value that was added to the constraint system","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69356,"byte_end":69444,"line_start":11,"line_end":11,"column_start":1,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69973,"byte_end":69977,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Left","qualname":"::constraint_system::variable::WireData::Left","value":"WireData::Left(usize)","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Left Wire of n'th gate\n","sig":null,"attributes":[{"value":"/ Left Wire of n'th gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69942,"byte_end":69968,"line_start":26,"line_end":26,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2068},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":70022,"byte_end":70027,"line_start":29,"line_end":29,"column_start":5,"column_end":10},"name":"Right","qualname":"::constraint_system::variable::WireData::Right","value":"WireData::Right(usize)","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Right Wire of n'th gate\n","sig":null,"attributes":[{"value":"/ Right Wire of n'th gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69990,"byte_end":70017,"line_start":28,"line_end":28,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2071},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":70073,"byte_end":70079,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"Output","qualname":"::constraint_system::variable::WireData::Output","value":"WireData::Output(usize)","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Output Wire of n'th gate\n","sig":null,"attributes":[{"value":"/ Output Wire of n'th gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":70040,"byte_end":70068,"line_start":30,"line_end":30,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2074},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":70125,"byte_end":70131,"line_start":33,"line_end":33,"column_start":5,"column_end":11},"name":"Fourth","qualname":"::constraint_system::variable::WireData::Fourth","value":"WireData::Fourth(usize)","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Fourth Wire of n'th gate\n","sig":null,"attributes":[{"value":"/ Fourth Wire of n'th gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":70092,"byte_end":70120,"line_start":32,"line_end":32,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":2064},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69927,"byte_end":69935,"line_start":25,"line_end":25,"column_start":10,"column_end":18},"name":"WireData","qualname":"::constraint_system::variable::WireData","value":"pub enum WireData { Left(usize), Right(usize), Output(usize), Fourth(usize), }","parent":null,"children":[{"krate":0,"index":2065},{"krate":0,"index":2068},{"krate":0,"index":2071},{"krate":0,"index":2074}],"decl_id":null,"docs":" Stores the data for a specific wire in an arithmetic circuit\n This data is the gate index and the type of wire\n Left(1) signifies that this wire belongs to the first gate and is the left wire\n","sig":null,"attributes":[{"value":"/ Stores the data for a specific wire in an arithmetic circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69671,"byte_end":69735,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/ This data is the gate index and the type of wire","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69736,"byte_end":69788,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/ Left(1) signifies that this wire belongs to the first gate and is the left wire","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69789,"byte_end":69872,"line_start":23,"line_end":23,"column_start":1,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":325},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arithmetic","qualname":"::constraint_system::arithmetic","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":335}],"decl_id":null,"docs":" Simple Arithmetic gates\n","sig":null,"attributes":[{"value":"/ Simple Arithmetic gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":48942,"byte_end":48969,"line_start":15,"line_end":15,"column_start":1,"column_end":28}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":70401,"byte_end":70438,"line_start":7,"line_end":7,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":70766,"byte_end":70774,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"add_gate","qualname":"<StandardComposer>::add_gate","value":"pub fn add_gate(&mut Self, Variable, Variable, Variable, BlsScalar, BlsScalar,\n                BlsScalar, BlsScalar, BlsScalar) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-3 add gate to the circuit, linking the addition of the\n provided inputs, scaled by the selector coefficients with the output\n provided.\n","sig":null,"attributes":[{"value":"/ Adds a width-3 add gate to the circuit, linking the addition of the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":70588,"byte_end":70659,"line_start":14,"line_end":14,"column_start":5,"column_end":76}},{"value":"/ provided inputs, scaled by the selector coefficients with the output","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":70664,"byte_end":70736,"line_start":15,"line_end":15,"column_start":5,"column_end":77}},{"value":"/ provided.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":70741,"byte_end":70754,"line_start":16,"line_end":16,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":71453,"byte_end":71465,"line_start":38,"line_end":38,"column_start":12,"column_end":24},"name":"big_add_gate","qualname":"<StandardComposer>::big_add_gate","value":"pub fn big_add_gate(&mut Self, Variable, Variable, Variable, Option<Variable>,\n                    BlsScalar, BlsScalar, BlsScalar, BlsScalar, BlsScalar,\n                    BlsScalar) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-4 add gate to the circuit and it's corresponding\n constraint.","sig":null,"attributes":[{"value":"/ Adds a width-4 add gate to the circuit and it's corresponding","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":71092,"byte_end":71157,"line_start":31,"line_end":31,"column_start":5,"column_end":70}},{"value":"/ constraint.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":71162,"byte_end":71177,"line_start":32,"line_end":32,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":71182,"byte_end":71185,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we need to have","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":71190,"byte_end":71248,"line_start":34,"line_end":34,"column_start":5,"column_end":63}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":71253,"byte_end":71319,"line_start":35,"line_end":35,"column_start":5,"column_end":71}},{"value":"/ possible. Since it allows the end-user to set every selector coefficient","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":71324,"byte_end":71400,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ as scaling value on the gate eq.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":71405,"byte_end":71441,"line_start":37,"line_end":37,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73004,"byte_end":73012,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"name":"mul_gate","qualname":"<StandardComposer>::mul_gate","value":"pub fn mul_gate(&mut Self, Variable, Variable, Variable, BlsScalar, BlsScalar,\n                BlsScalar, BlsScalar) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-3 add gate to the circuit linking the product of the\n provided inputs scaled by the selector coefficient `q_m` with the output\n provided scaled by `q_o`.","sig":null,"attributes":[{"value":"/ Adds a width-3 add gate to the circuit linking the product of the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":72642,"byte_end":72711,"line_start":85,"line_end":85,"column_start":5,"column_end":74}},{"value":"/ provided inputs scaled by the selector coefficient `q_m` with the output","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":72716,"byte_end":72792,"line_start":86,"line_end":86,"column_start":5,"column_end":81}},{"value":"/ provided scaled by `q_o`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":72797,"byte_end":72826,"line_start":87,"line_end":87,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":72831,"byte_end":72834,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Note that this gate requires to provide the actual result of the gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":72839,"byte_end":72912,"line_start":89,"line_end":89,"column_start":5,"column_end":78}},{"value":"/ (output wire) since it will just add a `mul constraint` to the circuit.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":72917,"byte_end":72992,"line_start":90,"line_end":90,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73963,"byte_end":73975,"line_start":117,"line_end":117,"column_start":12,"column_end":24},"name":"big_mul_gate","qualname":"<StandardComposer>::big_mul_gate","value":"pub fn big_mul_gate(&mut Self, Variable, Variable, Variable, Option<Variable>,\n                    BlsScalar, BlsScalar, BlsScalar, BlsScalar, BlsScalar)\n-> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-4 `big_mul_gate` with the left, right and fourth inputs\n and it's scaling factors, computing & returning the output (result)\n `Variable` and adding the corresponding mul constraint.","sig":null,"attributes":[{"value":"/ Adds a width-4 `big_mul_gate` with the left, right and fourth inputs","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73301,"byte_end":73373,"line_start":104,"line_end":104,"column_start":5,"column_end":77}},{"value":"/ and it's scaling factors, computing & returning the output (result)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73378,"byte_end":73449,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/ `Variable` and adding the corresponding mul constraint.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73454,"byte_end":73513,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73518,"byte_end":73521,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we need to have","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73526,"byte_end":73584,"line_start":108,"line_end":108,"column_start":5,"column_end":63}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73589,"byte_end":73655,"line_start":109,"line_end":109,"column_start":5,"column_end":71}},{"value":"/ possible. Since it allows the end-user to setup all of the selector","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73660,"byte_end":73731,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"/ coefficients.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73736,"byte_end":73753,"line_start":111,"line_end":111,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73758,"byte_end":73761,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Forces `q_m * (w_l * w_r) + w_4 * q_4 + q_c + PI = q_o * w_o`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73766,"byte_end":73832,"line_start":113,"line_end":113,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73837,"byte_end":73840,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ `{w_l, w_r, w_o, w_4} = {a, b, c, d}`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":73845,"byte_end":73886,"line_start":115,"line_end":115,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75736,"byte_end":75739,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"add","qualname":"<StandardComposer>::add","value":"pub fn add(&mut Self, (BlsScalar, Variable), (BlsScalar, Variable), BlsScalar,\n           BlsScalar) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a `big_addition_gate` with the left and right inputs\n and it's scaling factors, computing & returning the output (result)\n `Variable`, and adding the corresponding addition constraint.","sig":null,"attributes":[{"value":"/ Adds a `big_addition_gate` with the left and right inputs","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75150,"byte_end":75211,"line_start":165,"line_end":165,"column_start":5,"column_end":66}},{"value":"/ and it's scaling factors, computing & returning the output (result)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75216,"byte_end":75287,"line_start":166,"line_end":166,"column_start":5,"column_end":76}},{"value":"/ `Variable`, and adding the corresponding addition constraint.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75292,"byte_end":75357,"line_start":167,"line_end":167,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75362,"byte_end":75365,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we don't need to have","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75370,"byte_end":75434,"line_start":169,"line_end":169,"column_start":5,"column_end":69}},{"value":"/ the largest amount of performance as well as the minimum circuit-size","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75439,"byte_end":75512,"line_start":170,"line_end":170,"column_start":5,"column_end":78}},{"value":"/ possible. Since it defaults some of the selector coeffs = 0 in order","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75517,"byte_end":75589,"line_start":171,"line_end":171,"column_start":5,"column_end":77}},{"value":"/ to reduce the verbosity and complexity.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75594,"byte_end":75637,"line_start":172,"line_end":172,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75642,"byte_end":75645,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Forces `q_l * w_l + q_r * w_r + q_c + PI = w_o(computed by the gate)`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75650,"byte_end":75724,"line_start":174,"line_end":174,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76562,"byte_end":76569,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"big_add","qualname":"<StandardComposer>::big_add","value":"pub fn big_add(&mut Self, (BlsScalar, Variable), (BlsScalar, Variable),\n               Option<(BlsScalar, Variable)>, BlsScalar, BlsScalar)\n-> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a `big_addition_gate` with the left, right and fourth inputs\n and it's scaling factors, computing & returning the output (result)\n `Variable` and adding the corresponding addition constraint.","sig":null,"attributes":[{"value":"/ Adds a `big_addition_gate` with the left, right and fourth inputs","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":75964,"byte_end":76033,"line_start":185,"line_end":185,"column_start":5,"column_end":74}},{"value":"/ and it's scaling factors, computing & returning the output (result)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76038,"byte_end":76109,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/ `Variable` and adding the corresponding addition constraint.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76114,"byte_end":76178,"line_start":187,"line_end":187,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76183,"byte_end":76186,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we don't need to have","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76191,"byte_end":76255,"line_start":189,"line_end":189,"column_start":5,"column_end":69}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76260,"byte_end":76326,"line_start":190,"line_end":190,"column_start":5,"column_end":71}},{"value":"/ possible. Since it defaults some of the selector coeffs = 0 in order","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76331,"byte_end":76403,"line_start":191,"line_end":191,"column_start":5,"column_end":77}},{"value":"/ to reduce the verbosity and complexity.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76408,"byte_end":76451,"line_start":192,"line_end":192,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76456,"byte_end":76459,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Forces `q_l * w_l + q_r * w_r + q_4 * w_4 + q_c + PI = w_o(computed by the gate)`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":76464,"byte_end":76550,"line_start":194,"line_end":194,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":77567,"byte_end":77570,"line_start":226,"line_end":226,"column_start":12,"column_end":15},"name":"mul","qualname":"<StandardComposer>::mul","value":"pub fn mul(&mut Self, BlsScalar, Variable, Variable, BlsScalar, BlsScalar)\n-> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a simple and basic addition to the circuit between to `Variable`s\n returning the resulting `Variable`.\n","sig":null,"attributes":[{"value":"/ Adds a simple and basic addition to the circuit between to `Variable`s","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":77437,"byte_end":77511,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/ returning the resulting `Variable`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":77516,"byte_end":77555,"line_start":225,"line_end":225,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78507,"byte_end":78514,"line_start":250,"line_end":250,"column_start":12,"column_end":19},"name":"big_mul","qualname":"<StandardComposer>::big_mul","value":"pub fn big_mul(&mut Self, BlsScalar, Variable, Variable,\n               Option<(BlsScalar, Variable)>, BlsScalar, BlsScalar)\n-> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-4 `big_mul_gate` with the left, right and fourth inputs\n and it's scaling factors, computing & returning the output (result)\n `Variable` and adding the corresponding mul constraint.","sig":null,"attributes":[{"value":"/ Adds a width-4 `big_mul_gate` with the left, right and fourth inputs","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":77782,"byte_end":77854,"line_start":237,"line_end":237,"column_start":5,"column_end":77}},{"value":"/ and it's scaling factors, computing & returning the output (result)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":77859,"byte_end":77930,"line_start":238,"line_end":238,"column_start":5,"column_end":76}},{"value":"/ `Variable` and adding the corresponding mul constraint.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":77935,"byte_end":77994,"line_start":239,"line_end":239,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":77999,"byte_end":78002,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we don't need to have","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78007,"byte_end":78071,"line_start":241,"line_end":241,"column_start":5,"column_end":69}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78076,"byte_end":78142,"line_start":242,"line_end":242,"column_start":5,"column_end":71}},{"value":"/ possible. Since it defaults some of the selector coeffs = 0 in order","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78147,"byte_end":78219,"line_start":243,"line_end":243,"column_start":5,"column_end":77}},{"value":"/ to reduce the verbosity and complexity.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78224,"byte_end":78267,"line_start":244,"line_end":244,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78272,"byte_end":78275,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Forces `q_m * (w_l * w_r) + w_4 * q_4 + q_c + PI = w_o(computed by the gate)`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78280,"byte_end":78362,"line_start":246,"line_end":246,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78367,"byte_end":78370,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ `{w_l, w_r, w_4} = {a, b, d}`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":78375,"byte_end":78408,"line_start":248,"line_end":248,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":344},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boolean","qualname":"::constraint_system::boolean","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354}],"decl_id":null,"docs":" Boolean gate\n","sig":null,"attributes":[{"value":"/ Boolean gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":48990,"byte_end":49006,"line_start":17,"line_end":17,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86466,"byte_end":86478,"line_start":18,"line_end":18,"column_start":12,"column_end":24},"name":"boolean_gate","qualname":"<StandardComposer>::boolean_gate","value":"pub fn boolean_gate(&mut Self, Variable) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a boolean constraint (also known as binary constraint) where\n the gate eq. will enforce that the `Variable` received is either `0`\n or `1` by adding a constraint in the circuit.","sig":null,"attributes":[{"value":"/ Adds a boolean constraint (also known as binary constraint) where","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86082,"byte_end":86151,"line_start":12,"line_end":12,"column_start":5,"column_end":74}},{"value":"/ the gate eq. will enforce that the `Variable` received is either `0`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86156,"byte_end":86228,"line_start":13,"line_end":13,"column_start":5,"column_end":77}},{"value":"/ or `1` by adding a constraint in the circuit.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86233,"byte_end":86282,"line_start":14,"line_end":14,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86287,"byte_end":86290,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Note that using this constraint with whatever `Variable` that is not","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86295,"byte_end":86367,"line_start":16,"line_end":16,"column_start":5,"column_end":77}},{"value":"/ representing a value equalling 0 or 1, will always force the equation to fail.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86372,"byte_end":86454,"line_start":17,"line_end":17,"column_start":5,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":356},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ecc","qualname":"::constraint_system::ecc","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":389},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":2102},{"krate":0,"index":2105},{"krate":0,"index":2107},{"krate":0,"index":2109},{"krate":0,"index":464},{"krate":0,"index":2110},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2117},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":479}],"decl_id":null,"docs":" Elliptic Curve Crypto gates\n","sig":null,"attributes":[{"value":"/ Elliptic Curve Crypto gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49024,"byte_end":49055,"line_start":19,"line_end":19,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":357},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"curve_addition","qualname":"::constraint_system::ecc::curve_addition","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/mod.rs","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":370}],"decl_id":null,"docs":" Curve addition gate\n","sig":null,"attributes":[{"value":"/ Curve addition gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88479,"byte_end":88502,"line_start":7,"line_end":7,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":100613,"byte_end":100621,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"fast_add","qualname":"<Point>::fast_add","value":"pub fn fast_add(&Self, &mut StandardComposer, Point) -> Point","parent":null,"children":[],"decl_id":null,"docs":" Adds two curve points together using a curve addition gate\n Note that since the points are not fixed the generator is not a part of the\n circuit description, however it is less efficient for a program width of 4.\n","sig":null,"attributes":[{"value":"/ Adds two curve points together using a curve addition gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":100371,"byte_end":100433,"line_start":13,"line_end":13,"column_start":5,"column_end":67}},{"value":"/ Note that since the points are not fixed the generator is not a part of the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":100438,"byte_end":100517,"line_start":14,"line_end":14,"column_start":5,"column_end":84}},{"value":"/ circuit description, however it is less efficient for a program width of 4.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":100522,"byte_end":100601,"line_start":15,"line_end":15,"column_start":5,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":389},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar_mul","qualname":"::constraint_system::ecc::scalar_mul","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/mod.rs","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":423}],"decl_id":null,"docs":" Gates related to scalar multiplication\n","sig":null,"attributes":[{"value":"/ Gates related to scalar multiplication","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88527,"byte_end":88569,"line_start":9,"line_end":9,"column_start":1,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":390},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/fixed_base/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fixed_base","qualname":"::constraint_system::ecc::scalar_mul::fixed_base","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/fixed_base/mod.rs","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":422}],"decl_id":null,"docs":" Fixed base scalar multiplication gate\n","sig":null,"attributes":[{"value":"/ Fixed base scalar multiplication gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":104993,"byte_end":105034,"line_start":7,"line_end":7,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":422},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/fixed_base/mod.rs","byte_start":106176,"byte_end":106186,"line_start":26,"line_end":26,"column_start":8,"column_end":18},"name":"scalar_mul","qualname":"::constraint_system::ecc::scalar_mul::fixed_base::scalar_mul","value":"pub fn scalar_mul(&mut StandardComposer, Variable, JubJubExtended)\n-> PointScalar","parent":null,"children":[],"decl_id":null,"docs":" Computes a BlsScalar multiplication with the input scalar and a chosen generator\n","sig":null,"attributes":[{"value":"/ Computes a BlsScalar multiplication with the input scalar and a chosen generator","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/fixed_base/mod.rs","byte_start":106084,"byte_end":106168,"line_start":25,"line_end":25,"column_start":1,"column_end":85}}]},{"kind":"Mod","id":{"krate":0,"index":423},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/variable_base/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"variable_base","qualname":"::constraint_system::ecc::scalar_mul::variable_base","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/variable_base/mod.rs","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":447}],"decl_id":null,"docs":" Variable base scalar multiplication gate\n","sig":null,"attributes":[{"value":"/ Variable base scalar multiplication gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":105055,"byte_end":105099,"line_start":9,"line_end":9,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":441},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/variable_base/mod.rs","byte_start":119139,"byte_end":119163,"line_start":12,"line_end":12,"column_start":8,"column_end":32},"name":"variable_base_scalar_mul","qualname":"::constraint_system::ecc::scalar_mul::variable_base::variable_base_scalar_mul","value":"pub fn variable_base_scalar_mul(&mut StandardComposer, Variable, Point)\n-> PointScalar","parent":null,"children":[],"decl_id":null,"docs":" Computes a BlsScalar multiplication with the input scalar and a chosen generator\n","sig":null,"attributes":[{"value":"/ Computes a BlsScalar multiplication with the input scalar and a chosen generator","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/variable_base/mod.rs","byte_start":119047,"byte_end":119131,"line_start":11,"line_end":11,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2102},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88807,"byte_end":88812,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"name":"Point","qualname":"::constraint_system::ecc::Point","value":"Point {  }","parent":null,"children":[{"krate":0,"index":2103},{"krate":0,"index":2104}],"decl_id":null,"docs":" Represents a JubJub point in the circuit\n","sig":null,"attributes":[{"value":"/ Represents a JubJub point in the circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88721,"byte_end":88765,"line_start":16,"line_end":16,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88921,"byte_end":88922,"line_start":25,"line_end":25,"column_start":12,"column_end":13},"name":"x","qualname":"<Point>::x","value":"pub fn x(&Self) -> &Variable","parent":null,"children":[],"decl_id":null,"docs":" Return the X coordinate of the point\n","sig":null,"attributes":[{"value":"/ Return the X coordinate of the point","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88869,"byte_end":88909,"line_start":24,"line_end":24,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89024,"byte_end":89025,"line_start":30,"line_end":30,"column_start":12,"column_end":13},"name":"y","qualname":"<Point>::y","value":"pub fn y(&Self) -> &Variable","parent":null,"children":[],"decl_id":null,"docs":" Return the Y coordinate of the point\n","sig":null,"attributes":[{"value":"/ Return the Y coordinate of the point","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88972,"byte_end":89012,"line_start":29,"line_end":29,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89116,"byte_end":89124,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"identity","qualname":"<Point>::identity","value":"pub fn identity(&mut StandardComposer) -> Point","parent":null,"children":[],"decl_id":null,"docs":" Returns an identity point\n","sig":null,"attributes":[{"value":"/ Returns an identity point","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89075,"byte_end":89104,"line_start":34,"line_end":34,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89452,"byte_end":89471,"line_start":45,"line_end":45,"column_start":12,"column_end":31},"name":"from_private_affine","qualname":"<Point>::from_private_affine","value":"pub fn from_private_affine(&mut StandardComposer, dusk_jubjub::JubJubAffine)\n-> Point","parent":null,"children":[],"decl_id":null,"docs":" Converts an JubJubAffine into a constraint system Point\n without constraining the values\n","sig":null,"attributes":[{"value":"/ Converts an JubJubAffine into a constraint system Point","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89341,"byte_end":89400,"line_start":43,"line_end":43,"column_start":5,"column_end":64}},{"value":"/ without constraining the values","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89405,"byte_end":89440,"line_start":44,"line_end":44,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89822,"byte_end":89840,"line_start":55,"line_end":55,"column_start":12,"column_end":30},"name":"from_public_affine","qualname":"<Point>::from_public_affine","value":"pub fn from_public_affine(&mut StandardComposer, dusk_jubjub::JubJubAffine)\n-> Point","parent":null,"children":[],"decl_id":null,"docs":" Converts an JubJubAffine into a constraint system Point\n without constraining the values\n","sig":null,"attributes":[{"value":"/ Converts an JubJubAffine into a constraint system Point","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89711,"byte_end":89770,"line_start":53,"line_end":53,"column_start":5,"column_end":64}},{"value":"/ without constraining the values","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":89775,"byte_end":89810,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90347,"byte_end":90365,"line_start":70,"line_end":70,"column_start":12,"column_end":30},"name":"conditional_select","qualname":"<Point>::conditional_select","value":"pub fn conditional_select(&Self, &mut StandardComposer, Variable, Point)\n-> Point","parent":null,"children":[],"decl_id":null,"docs":" Conditionally selects a Point based on an input bit\n If:\n     bit == 1 => self,\n     bit == 0 => point_b,\n","sig":null,"attributes":[{"value":"/ Conditionally selects a Point based on an input bit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90205,"byte_end":90260,"line_start":66,"line_end":66,"column_start":5,"column_end":60}},{"value":"/ If:","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90265,"byte_end":90272,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/     bit == 1 => self,","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90277,"byte_end":90302,"line_start":68,"line_end":68,"column_start":5,"column_end":30}},{"value":"/     bit == 0 => point_b,","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90307,"byte_end":90335,"line_start":69,"line_end":69,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2110},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90753,"byte_end":90764,"line_start":85,"line_end":85,"column_start":12,"column_end":23},"name":"PointScalar","qualname":"::constraint_system::ecc::PointScalar","value":"PointScalar {  }","parent":null,"children":[{"krate":0,"index":2111},{"krate":0,"index":2112}],"decl_id":null,"docs":" The result of a scalar multiplication\n","sig":null,"attributes":[{"value":"/ The result of a scalar multiplication","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90670,"byte_end":90711,"line_start":83,"line_end":83,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90875,"byte_end":90880,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"point","qualname":"<PointScalar>::point","value":"pub fn point(&Self) -> &Point","parent":null,"children":[],"decl_id":null,"docs":" Return the generated point\n","sig":null,"attributes":[{"value":"/ Return the generated point","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90833,"byte_end":90863,"line_start":91,"line_end":91,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90973,"byte_end":90979,"line_start":97,"line_end":97,"column_start":12,"column_end":18},"name":"scalar","qualname":"<PointScalar>::scalar","value":"pub fn scalar(&Self) -> &Variable","parent":null,"children":[],"decl_id":null,"docs":" Return the internal scalar\n","sig":null,"attributes":[{"value":"/ Return the internal scalar","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90931,"byte_end":90961,"line_start":96,"line_end":96,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":91196,"byte_end":91199,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"add","qualname":"<Point>::add","value":"pub fn add(&Self, &mut StandardComposer, Point) -> Point","parent":null,"children":[],"decl_id":null,"docs":" Adds two curve points together\n","sig":null,"attributes":[{"value":"/ Adds two curve points together","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":91150,"byte_end":91184,"line_start":109,"line_end":109,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":91388,"byte_end":91396,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"slow_add","qualname":"<Point>::slow_add","value":"pub fn slow_add(&Self, &mut StandardComposer, Point) -> Point","parent":null,"children":[],"decl_id":null,"docs":" Adds two curve points together using arithmetic gates\n","sig":null,"attributes":[{"value":"/ Adds two curve points together using arithmetic gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":91319,"byte_end":91376,"line_start":114,"line_end":114,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":95305,"byte_end":95330,"line_start":259,"line_end":259,"column_start":12,"column_end":37},"name":"assert_equal_public_point","qualname":"<StandardComposer>::assert_equal_public_point","value":"pub fn assert_equal_public_point(&mut Self, Point, dusk_jubjub::JubJubAffine)","parent":null,"children":[],"decl_id":null,"docs":" Asserts that a point in the circuit is equal to a known public point\n","sig":null,"attributes":[{"value":"/ Asserts that a point in the circuit is equal to a known public point","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":95221,"byte_end":95293,"line_start":258,"line_end":258,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":95706,"byte_end":95724,"line_start":268,"line_end":268,"column_start":12,"column_end":30},"name":"assert_equal_point","qualname":"<StandardComposer>::assert_equal_point","value":"pub fn assert_equal_point(&mut Self, Point, Point)","parent":null,"children":[],"decl_id":null,"docs":" Asserts that a point in the circuit is equal to another point in the circuit\n","sig":null,"attributes":[{"value":"/ Asserts that a point in the circuit is equal to another point in the circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":95614,"byte_end":95694,"line_start":267,"line_end":267,"column_start":5,"column_end":85}}]},{"kind":"Mod","id":{"krate":0,"index":482},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"logic","qualname":"::constraint_system::logic","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":497}],"decl_id":null,"docs":" XOR and AND gates\n","sig":null,"attributes":[{"value":"/ XOR and AND gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49105,"byte_end":49126,"line_start":23,"line_end":23,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138395,"byte_end":138403,"line_start":298,"line_end":298,"column_start":12,"column_end":20},"name":"xor_gate","qualname":"<StandardComposer>::xor_gate","value":"pub fn xor_gate(&mut Self, Variable, Variable, usize) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a logical XOR gate that performs the XOR between two values for the\n specified first `num_bits` returning a `Variable` holding the result.","sig":null,"attributes":[{"value":"/ Adds a logical XOR gate that performs the XOR between two values for the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138135,"byte_end":138211,"line_start":292,"line_end":292,"column_start":5,"column_end":81}},{"value":"/ specified first `num_bits` returning a `Variable` holding the result.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138216,"byte_end":138289,"line_start":293,"line_end":293,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138294,"byte_end":138297,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138302,"byte_end":138314,"line_start":295,"line_end":295,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138319,"byte_end":138322,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ If the `num_bits` specified in the fn params is odd.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138327,"byte_end":138383,"line_start":297,"line_end":297,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138797,"byte_end":138805,"line_start":308,"line_end":308,"column_start":12,"column_end":20},"name":"and_gate","qualname":"<StandardComposer>::and_gate","value":"pub fn and_gate(&mut Self, Variable, Variable, usize) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a logical AND gate that performs the bitwise AND between two values\n for the specified first `num_bits` returning a `Variable` holding the result.","sig":null,"attributes":[{"value":"/ Adds a logical AND gate that performs the bitwise AND between two values","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138529,"byte_end":138605,"line_start":302,"line_end":302,"column_start":5,"column_end":81}},{"value":"/ for the specified first `num_bits` returning a `Variable` holding the result.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138610,"byte_end":138691,"line_start":303,"line_end":303,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138696,"byte_end":138699,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138704,"byte_end":138716,"line_start":305,"line_end":305,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138721,"byte_end":138724,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ If the `num_bits` specified in the fn params is odd.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":138729,"byte_end":138785,"line_start":307,"line_end":307,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":501},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::constraint_system::range","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/range.rs","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":516}],"decl_id":null,"docs":" Range gate\n","sig":null,"attributes":[{"value":"/ Range gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49142,"byte_end":49156,"line_start":25,"line_end":25,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/range.rs","byte_start":143123,"byte_end":143133,"line_start":15,"line_end":15,"column_start":12,"column_end":22},"name":"range_gate","qualname":"<StandardComposer>::range_gate","value":"pub fn range_gate(&mut Self, Variable, usize)","parent":null,"children":[],"decl_id":null,"docs":" Adds a range-constraint gate that checks and constrains a\n `Variable` to be inside of the range [0,num_bits].\n","sig":null,"attributes":[{"value":"/ Adds a range-constraint gate that checks and constrains a","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/range.rs","byte_start":142991,"byte_end":143052,"line_start":13,"line_end":13,"column_start":5,"column_end":66}},{"value":"/ `Variable` to be inside of the range [0,num_bits].","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/range.rs","byte_start":143057,"byte_end":143111,"line_start":14,"line_end":14,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":529},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fft","qualname":"::fft","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/mod.rs","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":611},{"krate":0,"index":684},{"krate":0,"index":688},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":827}],"decl_id":null,"docs":" FFT module contains the tools needed by the Composer backend\n to know and use the logic behind Polynomials. As well as\n the operations that the `Composer` needs to peform with them.\n","sig":null,"attributes":[{"value":"/ FFT module contains the tools needed by the Composer backend","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/mod.rs","byte_start":152851,"byte_end":152915,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ to know and use the logic behind Polynomials. As well as","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/mod.rs","byte_start":152916,"byte_end":152976,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/ the operations that the `Composer` needs to peform with them.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/mod.rs","byte_start":152977,"byte_end":153042,"line_start":9,"line_end":9,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2118},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154441,"byte_end":154457,"line_start":26,"line_end":26,"column_start":12,"column_end":28},"name":"EvaluationDomain","qualname":"::fft::domain::EvaluationDomain","value":"EvaluationDomain { size, log_size_of_group, size_as_field_element, size_inv, group_gen, group_gen_inv, generator_inv }","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125}],"decl_id":null,"docs":" Defines a domain over which finite field (I)FFTs can be performed. Works\n only for fields that have a large multiplicative subgroup of size that is\n a power-of-2.\n","sig":null,"attributes":[{"value":"/ Defines a domain over which finite field (I)FFTs can be performed. Works","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154219,"byte_end":154295,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ only for fields that have a large multiplicative subgroup of size that is","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154296,"byte_end":154373,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ a power-of-2.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154374,"byte_end":154391,"line_start":24,"line_end":24,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2119},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154500,"byte_end":154504,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"name":"size","qualname":"::fft::domain::EvaluationDomain::size","value":"u64","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" The size of the domain.\n","sig":null,"attributes":[{"value":"/ The size of the domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154464,"byte_end":154491,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2120},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154547,"byte_end":154564,"line_start":30,"line_end":30,"column_start":9,"column_end":26},"name":"log_size_of_group","qualname":"::fft::domain::EvaluationDomain::log_size_of_group","value":"u32","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" `log_2(self.size)`.\n","sig":null,"attributes":[{"value":"/ `log_2(self.size)`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154515,"byte_end":154538,"line_start":29,"line_end":29,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2121},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154626,"byte_end":154647,"line_start":32,"line_end":32,"column_start":9,"column_end":30},"name":"size_as_field_element","qualname":"::fft::domain::EvaluationDomain::size_as_field_element","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Size of the domain as a field element.\n","sig":null,"attributes":[{"value":"/ Size of the domain as a field element.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154575,"byte_end":154617,"line_start":31,"line_end":31,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2122},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154710,"byte_end":154718,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"name":"size_inv","qualname":"::fft::domain::EvaluationDomain::size_inv","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Inverse of the size in the field.\n","sig":null,"attributes":[{"value":"/ Inverse of the size in the field.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154664,"byte_end":154701,"line_start":33,"line_end":33,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":2123},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154776,"byte_end":154785,"line_start":36,"line_end":36,"column_start":9,"column_end":18},"name":"group_gen","qualname":"::fft::domain::EvaluationDomain::group_gen","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" A generator of the subgroup.\n","sig":null,"attributes":[{"value":"/ A generator of the subgroup.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154735,"byte_end":154767,"line_start":35,"line_end":35,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":2124},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154856,"byte_end":154869,"line_start":38,"line_end":38,"column_start":9,"column_end":22},"name":"group_gen_inv","qualname":"::fft::domain::EvaluationDomain::group_gen_inv","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Inverse of the generator of the subgroup.\n","sig":null,"attributes":[{"value":"/ Inverse of the generator of the subgroup.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154802,"byte_end":154847,"line_start":37,"line_end":37,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2125},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154944,"byte_end":154957,"line_start":40,"line_end":40,"column_start":9,"column_end":22},"name":"generator_inv","qualname":"::fft::domain::EvaluationDomain::generator_inv","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" Multiplicative generator of the finite field.\n","sig":null,"attributes":[{"value":"/ Multiplicative generator of the finite field.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154886,"byte_end":154935,"line_start":39,"line_end":39,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":155308,"byte_end":155311,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<EvaluationDomain>::new","value":"pub fn new(usize) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a domain that is large enough for evaluations of a polynomial\n having `num_coeffs` coefficients.\n","sig":null,"attributes":[{"value":"/ Construct a domain that is large enough for evaluations of a polynomial","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":155179,"byte_end":155254,"line_start":50,"line_end":50,"column_start":5,"column_end":80}},{"value":"/ having `num_coeffs` coefficients.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":155259,"byte_end":155296,"line_start":51,"line_end":51,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":156576,"byte_end":156598,"line_start":87,"line_end":87,"column_start":12,"column_end":34},"name":"compute_size_of_domain","qualname":"<EvaluationDomain>::compute_size_of_domain","value":"pub fn compute_size_of_domain(usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the size of a domain that is large enough for evaluations of a\n polynomial having `num_coeffs` coefficients.\n","sig":null,"attributes":[{"value":"/ Return the size of a domain that is large enough for evaluations of a","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":156438,"byte_end":156511,"line_start":85,"line_end":85,"column_start":5,"column_end":78}},{"value":"/ polynomial having `num_coeffs` coefficients.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":156516,"byte_end":156564,"line_start":86,"line_end":86,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":156857,"byte_end":156861,"line_start":97,"line_end":97,"column_start":12,"column_end":16},"name":"size","qualname":"<EvaluationDomain>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the size of `self`.\n","sig":null,"attributes":[{"value":"/ Return the size of `self`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":156815,"byte_end":156845,"line_start":96,"line_end":96,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":156948,"byte_end":156951,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"fft","qualname":"<EvaluationDomain>::fft","value":"pub fn fft(&Self, &[BlsScalar]) -> Vec<BlsScalar>","parent":null,"children":[],"decl_id":null,"docs":" Compute a FFT.\n","sig":null,"attributes":[{"value":"/ Compute a FFT.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":156918,"byte_end":156936,"line_start":101,"line_end":101,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":157170,"byte_end":157182,"line_start":109,"line_end":109,"column_start":12,"column_end":24},"name":"fft_in_place","qualname":"<EvaluationDomain>::fft_in_place","value":"pub fn fft_in_place(&Self, &mut Vec<BlsScalar>)","parent":null,"children":[],"decl_id":null,"docs":" Compute a FFT, modifying the vector in place.\n","sig":null,"attributes":[{"value":"/ Compute a FFT, modifying the vector in place.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":157109,"byte_end":157158,"line_start":108,"line_end":108,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":157384,"byte_end":157388,"line_start":115,"line_end":115,"column_start":12,"column_end":16},"name":"ifft","qualname":"<EvaluationDomain>::ifft","value":"pub fn ifft(&Self, &[BlsScalar]) -> Vec<BlsScalar>","parent":null,"children":[],"decl_id":null,"docs":" Compute an IFFT.\n","sig":null,"attributes":[{"value":"/ Compute an IFFT.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":157352,"byte_end":157372,"line_start":114,"line_end":114,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":157619,"byte_end":157632,"line_start":123,"line_end":123,"column_start":12,"column_end":25},"name":"ifft_in_place","qualname":"<EvaluationDomain>::ifft_in_place","value":"pub fn ifft_in_place(&Self, &mut Vec<BlsScalar>)","parent":null,"children":[],"decl_id":null,"docs":" Compute an IFFT, modifying the vector in place.\n","sig":null,"attributes":[{"value":"/ Compute an IFFT, modifying the vector in place.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":157542,"byte_end":157593,"line_start":121,"line_end":121,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":157598,"byte_end":157607,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158214,"byte_end":158223,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"coset_fft","qualname":"<EvaluationDomain>::coset_fft","value":"pub fn coset_fft(&Self, &[BlsScalar]) -> Vec<BlsScalar>","parent":null,"children":[],"decl_id":null,"docs":" Compute a FFT over a coset of the domain.\n","sig":null,"attributes":[{"value":"/ Compute a FFT over a coset of the domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158157,"byte_end":158202,"line_start":138,"line_end":138,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158489,"byte_end":158507,"line_start":147,"line_end":147,"column_start":12,"column_end":30},"name":"coset_fft_in_place","qualname":"<EvaluationDomain>::coset_fft_in_place","value":"pub fn coset_fft_in_place(&Self, &mut Vec<BlsScalar>)","parent":null,"children":[],"decl_id":null,"docs":" Compute a FFT over a coset of the domain, modifying the input vector\n in place.\n","sig":null,"attributes":[{"value":"/ Compute a FFT over a coset of the domain, modifying the input vector","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158387,"byte_end":158459,"line_start":145,"line_end":145,"column_start":5,"column_end":77}},{"value":"/ in place.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158464,"byte_end":158477,"line_start":146,"line_end":146,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158703,"byte_end":158713,"line_start":153,"line_end":153,"column_start":12,"column_end":22},"name":"coset_ifft","qualname":"<EvaluationDomain>::coset_ifft","value":"pub fn coset_ifft(&Self, &[BlsScalar]) -> Vec<BlsScalar>","parent":null,"children":[],"decl_id":null,"docs":" Compute an IFFT over a coset of the domain.\n","sig":null,"attributes":[{"value":"/ Compute an IFFT over a coset of the domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158644,"byte_end":158691,"line_start":152,"line_end":152,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158977,"byte_end":158996,"line_start":161,"line_end":161,"column_start":12,"column_end":31},"name":"coset_ifft_in_place","qualname":"<EvaluationDomain>::coset_ifft_in_place","value":"pub fn coset_ifft_in_place(&Self, &mut Vec<BlsScalar>)","parent":null,"children":[],"decl_id":null,"docs":" Compute an IFFT over a coset of the domain, modifying the input vector in\n place.\n","sig":null,"attributes":[{"value":"/ Compute an IFFT over a coset of the domain, modifying the input vector in","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158873,"byte_end":158950,"line_start":159,"line_end":159,"column_start":5,"column_end":82}},{"value":"/ place.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":158955,"byte_end":158965,"line_start":160,"line_end":160,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":159286,"byte_end":159320,"line_start":169,"line_end":169,"column_start":12,"column_end":46},"name":"evaluate_all_lagrange_coefficients","qualname":"<EvaluationDomain>::evaluate_all_lagrange_coefficients","value":"pub fn evaluate_all_lagrange_coefficients(&Self, BlsScalar) -> Vec<BlsScalar>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate all the lagrange polynomials defined by this domain at the\n point `tau`.\n","sig":null,"attributes":[{"value":"allow(clippy :: needless_range_loop)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":159140,"byte_end":159177,"line_start":166,"line_end":166,"column_start":5,"column_end":42}},{"value":"/ Evaluate all the lagrange polynomials defined by this domain at the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":159182,"byte_end":159253,"line_start":167,"line_end":167,"column_start":5,"column_end":76}},{"value":"/ point `tau`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":159258,"byte_end":159274,"line_start":168,"line_end":168,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":160710,"byte_end":160739,"line_start":212,"line_end":212,"column_start":12,"column_end":41},"name":"evaluate_vanishing_polynomial","qualname":"<EvaluationDomain>::evaluate_vanishing_polynomial","value":"pub fn evaluate_vanishing_polynomial(&Self, &BlsScalar) -> BlsScalar","parent":null,"children":[],"decl_id":null,"docs":" This evaluates the vanishing polynomial for this domain at tau.\n For multiplicative subgroups, this polynomial is `z(X) = X^self.size -\n 1`.\n","sig":null,"attributes":[{"value":"/ This evaluates the vanishing polynomial for this domain at tau.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":160540,"byte_end":160607,"line_start":209,"line_end":209,"column_start":5,"column_end":72}},{"value":"/ For multiplicative subgroups, this polynomial is `z(X) = X^self.size -","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":160612,"byte_end":160686,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/ 1`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":160691,"byte_end":160698,"line_start":211,"line_end":211,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":161020,"byte_end":161053,"line_start":219,"line_end":219,"column_start":12,"column_end":45},"name":"compute_vanishing_poly_over_coset","qualname":"<EvaluationDomain>::compute_vanishing_poly_over_coset","value":"pub fn compute_vanishing_poly_over_coset(&Self, u64) -> Evaluations","parent":null,"children":[],"decl_id":null,"docs":" Given that the domain size is `D`  \n This function computes the `D` evaluation points for\n the vanishing polynomial of degree `n` over a coset\n","sig":null,"attributes":[{"value":"/ Given that the domain size is `D`  ","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":160848,"byte_end":160887,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/ This function computes the `D` evaluation points for","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":160892,"byte_end":160948,"line_start":217,"line_end":217,"column_start":5,"column_end":61}},{"value":"/ the vanishing polynomial of degree `n` over a coset","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":160953,"byte_end":161008,"line_start":218,"line_end":218,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":161672,"byte_end":161680,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"elements","qualname":"<EvaluationDomain>::elements","value":"pub fn elements(&Self) -> Elements","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the elements of the domain.\n","sig":null,"attributes":[{"value":"/ Return an iterator over the elements of the domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":161605,"byte_end":161660,"line_start":234,"line_end":234,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":161977,"byte_end":162019,"line_start":246,"line_end":246,"column_start":12,"column_end":54},"name":"divide_by_vanishing_poly_on_coset_in_place","qualname":"<EvaluationDomain>::divide_by_vanishing_poly_on_coset_in_place","value":"pub fn divide_by_vanishing_poly_on_coset_in_place(&Self, &mut [BlsScalar])","parent":null,"children":[],"decl_id":null,"docs":" The target polynomial is the zero polynomial in our\n evaluation domain, so we must perform division over\n a coset.\n","sig":null,"attributes":[{"value":"/ The target polynomial is the zero polynomial in our","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":161833,"byte_end":161888,"line_start":243,"line_end":243,"column_start":5,"column_end":60}},{"value":"/ evaluation domain, so we must perform division over","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":161893,"byte_end":161948,"line_start":244,"line_end":244,"column_start":5,"column_end":60}},{"value":"/ a coset.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":161953,"byte_end":161965,"line_start":245,"line_end":245,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":162538,"byte_end":162558,"line_start":261,"line_end":261,"column_start":12,"column_end":32},"name":"reindex_by_subdomain","qualname":"<EvaluationDomain>::reindex_by_subdomain","value":"pub fn reindex_by_subdomain(&Self, Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Given an index which assumes the first elements of this domain are the\n elements of another (sub)domain with size size_s,\n this returns the actual index into this domain.","sig":null,"attributes":[{"value":"/ Given an index which assumes the first elements of this domain are the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":162246,"byte_end":162320,"line_start":255,"line_end":255,"column_start":5,"column_end":79}},{"value":"/ elements of another (sub)domain with size size_s,","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":162325,"byte_end":162378,"line_start":256,"line_end":256,"column_start":5,"column_end":58}},{"value":"/ this returns the actual index into this domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":162383,"byte_end":162434,"line_start":257,"line_end":257,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":162439,"byte_end":162442,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":162447,"byte_end":162459,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/ When the index of self is smaller than the other provided.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":162464,"byte_end":162526,"line_start":260,"line_end":260,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":164143,"byte_end":164179,"line_start":292,"line_end":292,"column_start":12,"column_end":48},"name":"mul_polynomials_in_evaluation_domain","qualname":"<EvaluationDomain>::mul_polynomials_in_evaluation_domain","value":"pub fn mul_polynomials_in_evaluation_domain(&Self, &[BlsScalar], &[BlsScalar])\n-> Vec<BlsScalar>","parent":null,"children":[],"decl_id":null,"docs":" Perform O(n) multiplication of two polynomials that are presented by\n their evaluations in the domain.\n Returns the evaluations of the product over the domain.","sig":null,"attributes":[{"value":"/ Perform O(n) multiplication of two polynomials that are presented by","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":163814,"byte_end":163886,"line_start":285,"line_end":285,"column_start":5,"column_end":77}},{"value":"/ their evaluations in the domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":163891,"byte_end":163927,"line_start":286,"line_end":286,"column_start":5,"column_end":41}},{"value":"/ Returns the evaluations of the product over the domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":163932,"byte_end":163991,"line_start":287,"line_end":287,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":163996,"byte_end":163999,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Assumes that the domain is large enough to allow for successful","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":164004,"byte_end":164071,"line_start":289,"line_end":289,"column_start":5,"column_end":72}},{"value":"/ interpolation after multiplication.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":164076,"byte_end":164115,"line_start":290,"line_end":290,"column_start":5,"column_end":44}},{"value":"must_use","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":164120,"byte_end":164131,"line_start":291,"line_end":291,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2136},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":165725,"byte_end":165733,"line_start":360,"line_end":360,"column_start":12,"column_end":20},"name":"Elements","qualname":"::fft::domain::Elements","value":"Elements {  }","parent":null,"children":[{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139}],"decl_id":null,"docs":" An iterator over the elements of the domain.\n","sig":null,"attributes":[{"value":"/ An iterator over the elements of the domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":165648,"byte_end":165696,"line_start":358,"line_end":358,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2142},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167484,"byte_end":167495,"line_start":16,"line_end":16,"column_start":12,"column_end":23},"name":"Evaluations","qualname":"::fft::evaluations::Evaluations","value":"Evaluations { evals }","parent":null,"children":[{"krate":0,"index":2143},{"krate":0,"index":2144}],"decl_id":null,"docs":" Stores a polynomial in evaluation form.\n","sig":null,"attributes":[{"value":"/ Stores a polynomial in evaluation form.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167390,"byte_end":167433,"line_start":14,"line_end":14,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2143},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167566,"byte_end":167571,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"evals","qualname":"::fft::evaluations::Evaluations::evals","value":"std::vec::Vec<dusk_bls12_381::BlsScalar>","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" The evaluations of a polynomial over the domain `D`\n","sig":null,"attributes":[{"value":"/ The evaluations of a polynomial over the domain `D`","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167502,"byte_end":167557,"line_start":17,"line_end":17,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167727,"byte_end":167746,"line_start":25,"line_end":25,"column_start":12,"column_end":31},"name":"from_vec_and_domain","qualname":"<Evaluations>::from_vec_and_domain","value":"pub fn from_vec_and_domain(Vec<BlsScalar>, EvaluationDomain) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct `Self` from evaluations and a domain.\n","sig":null,"attributes":[{"value":"/ Construct `Self` from evaluations and a domain.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167664,"byte_end":167715,"line_start":24,"line_end":24,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167915,"byte_end":167933,"line_start":30,"line_end":30,"column_start":12,"column_end":30},"name":"interpolate_by_ref","qualname":"<Evaluations>::interpolate_by_ref","value":"pub fn interpolate_by_ref(&Self) -> Polynomial","parent":null,"children":[],"decl_id":null,"docs":" Interpolate a polynomial from a list of evaluations\n","sig":null,"attributes":[{"value":"/ Interpolate a polynomial from a list of evaluations","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167848,"byte_end":167903,"line_start":29,"line_end":29,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":168108,"byte_end":168119,"line_start":35,"line_end":35,"column_start":12,"column_end":23},"name":"interpolate","qualname":"<Evaluations>::interpolate","value":"pub fn interpolate(Self) -> Polynomial","parent":null,"children":[],"decl_id":null,"docs":" Interpolate a polynomial from a list of evaluations\n","sig":null,"attributes":[{"value":"/ Interpolate a polynomial from a list of evaluations","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":168041,"byte_end":168096,"line_start":34,"line_end":34,"column_start":5,"column_end":60}}]},{"kind":"StructVariant","id":{"krate":0,"index":2162},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/fft_errors.rs","byte_start":171210,"byte_end":171231,"line_start":23,"line_end":23,"column_start":5,"column_end":26},"name":"InvalidEvalDomainSize","qualname":"::fft::fft_errors::FFTErrors::InvalidEvalDomainSize","value":"FFTErrors::InvalidEvalDomainSize { log_size_of_group, adacity }","parent":{"krate":0,"index":2156},"children":[],"decl_id":null,"docs":" This error occurs when an error triggers on any of the fft module\n functions.\n","sig":null,"attributes":[{"value":"/ This error occurs when an error triggers on any of the fft module","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/fft_errors.rs","byte_start":170953,"byte_end":171022,"line_start":15,"line_end":15,"column_start":5,"column_end":74}},{"value":"/ functions.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/fft_errors.rs","byte_start":171027,"byte_end":171041,"line_start":16,"line_end":16,"column_start":5,"column_end":19}},{"value":"error(\"Log-size of the EvaluationDomain group > TWO_ADACITY\\\n    Size: {:?} > TWO_ADACITY = {:?}\",\n        log_size_of_group, adacity)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/fft_errors.rs","byte_start":171046,"byte_end":171205,"line_start":17,"line_end":22,"column_start":5,"column_end":7}}]},{"kind":"Enum","id":{"krate":0,"index":2156},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/fft_errors.rs","byte_start":170937,"byte_end":170946,"line_start":14,"line_end":14,"column_start":10,"column_end":19},"name":"FFTErrors","qualname":"::fft::fft_errors::FFTErrors","value":"pub enum FFTErrors {\n    InvalidEvalDomainSize {\n        log_size_of_group: u32,\n        adacity: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":2162}],"decl_id":null,"docs":" Defines all of the possible FFTError types that we could have when\n we are working with the `fft` module.\n","sig":null,"attributes":[{"value":"/ Defines all of the possible FFTError types that we could have when","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/fft_errors.rs","byte_start":170791,"byte_end":170861,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ we are working with the `fft` module.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/fft_errors.rs","byte_start":170862,"byte_end":170903,"line_start":12,"line_end":12,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2165},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172197,"byte_end":172207,"line_start":21,"line_end":21,"column_start":12,"column_end":22},"name":"Polynomial","qualname":"::fft::polynomial::Polynomial","value":"Polynomial { coeffs }","parent":null,"children":[{"krate":0,"index":2166}],"decl_id":null,"docs":" Polynomial represents a polynomial in coeffiient form.\n","sig":null,"attributes":[{"value":"/ Polynomial represents a polynomial in coeffiient form.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172127,"byte_end":172185,"line_start":20,"line_end":20,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2166},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172295,"byte_end":172301,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"coeffs","qualname":"::fft::polynomial::Polynomial::coeffs","value":"std::vec::Vec<dusk_bls12_381::BlsScalar>","parent":{"krate":0,"index":2165},"children":[],"decl_id":null,"docs":" The coefficient of `x^i` is stored at location `i` in `self.coeffs`.\n","sig":null,"attributes":[{"value":"/ The coefficient of `x^i` is stored at location `i` in `self.coeffs`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172214,"byte_end":172286,"line_start":22,"line_end":22,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172631,"byte_end":172635,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"zero","qualname":"<Polynomial>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the zero polynomial.\n","sig":null,"attributes":[{"value":"/ Returns the zero polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172587,"byte_end":172619,"line_start":41,"line_end":41,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172750,"byte_end":172757,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Polynomial>::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the given polynomial is zero.\n","sig":null,"attributes":[{"value":"/ Checks if the given polynomial is zero.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172695,"byte_end":172738,"line_start":46,"line_end":46,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":173019,"byte_end":173042,"line_start":56,"line_end":56,"column_start":12,"column_end":35},"name":"from_coefficients_slice","qualname":"<Polynomial>::from_coefficients_slice","value":"pub fn from_coefficients_slice(&[BlsScalar]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new polynomial from a list of coefficients.\n","sig":null,"attributes":[{"value":"/ Constructs a new polynomial from a list of coefficients.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172947,"byte_end":173007,"line_start":55,"line_end":55,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":173283,"byte_end":173304,"line_start":64,"line_end":64,"column_start":12,"column_end":33},"name":"from_coefficients_vec","qualname":"<Polynomial>::from_coefficients_vec","value":"pub fn from_coefficients_vec(Vec<BlsScalar>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new polynomial from a list of coefficients.","sig":null,"attributes":[{"value":"/ Constructs a new polynomial from a list of coefficients.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":173139,"byte_end":173199,"line_start":60,"line_end":60,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":173204,"byte_end":173207,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":173212,"byte_end":173224,"line_start":62,"line_end":62,"column_start":5,"column_end":17}},{"value":"/ When the length of the coeffs is zero.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":173229,"byte_end":173271,"line_start":63,"line_end":63,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":173821,"byte_end":173827,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"degree","qualname":"<Polynomial>::degree","value":"pub fn degree(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the degree of the polynomial.\n","sig":null,"attributes":[{"value":"/ Returns the degree of the polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":173768,"byte_end":173809,"line_start":78,"line_end":78,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":174356,"byte_end":174364,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<Polynomial>::evaluate","value":"pub fn evaluate(&Self, &BlsScalar) -> BlsScalar","parent":null,"children":[],"decl_id":null,"docs":" Evaluates `self` at the given `point` in the field.\n","sig":null,"attributes":[{"value":"/ Evaluates `self` at the given `point` in the field.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":174289,"byte_end":174344,"line_start":99,"line_end":99,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":175008,"byte_end":175012,"line_start":122,"line_end":122,"column_start":12,"column_end":16},"name":"rand","qualname":"<Polynomial>::rand","value":"pub fn rand<R: Rng>(usize, &mut R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Outputs a polynomial of degree `d` where each coefficient is sampled\n uniformly at random from the field `F`.\n","sig":null,"attributes":[{"value":"/ Outputs a polynomial of degree `d` where each coefficient is sampled","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":174876,"byte_end":174948,"line_start":120,"line_end":120,"column_start":5,"column_end":77}},{"value":"/ uniformly at random from the field `F`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":174953,"byte_end":174996,"line_start":121,"line_end":121,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":181409,"byte_end":181416,"line_start":331,"line_end":331,"column_start":12,"column_end":19},"name":"ruffini","qualname":"<Polynomial>::ruffini","value":"pub fn ruffini(&Self, BlsScalar) -> Polynomial","parent":null,"children":[],"decl_id":null,"docs":" Divides `self` by x-z using Ruffinis method\n","sig":null,"attributes":[{"value":"/ Divides `self` by x-z using Ruffinis method","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":181350,"byte_end":181397,"line_start":330,"line_end":330,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":930},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":982}],"decl_id":null,"docs":" Collection of functions needed to use plonk library.","sig":null,"attributes":[{"value":"/ Collection of functions needed to use plonk library.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226425,"byte_end":226481,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226482,"byte_end":226485,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Use this as the only import that you need to interact","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226486,"byte_end":226543,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/ with the principal data structures of the plonk library.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226544,"byte_end":226604,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":226605,"byte_end":226608,"line_start":11,"line_end":11,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":982},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227175,"byte_end":227187,"line_start":31,"line_end":31,"column_start":9,"column_end":21},"name":"plonk_errors","qualname":"::prelude::plonk_errors","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":986},{"krate":0,"index":989},{"krate":0,"index":992}],"decl_id":null,"docs":" Collection of errors that the library exposes/uses.\n","sig":null,"attributes":[{"value":"/ Collection of errors that the library exposes/uses.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/prelude.rs","byte_start":227111,"byte_end":227166,"line_start":30,"line_end":30,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":995},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof_system","qualname":"::proof_system","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":1037},{"krate":0,"index":1095},{"krate":0,"index":1188},{"krate":0,"index":1192},{"krate":0,"index":1271},{"krate":0,"index":1300},{"krate":0,"index":1344},{"krate":0,"index":1744},{"krate":0,"index":1747},{"krate":0,"index":1750},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1757}],"decl_id":null,"docs":" proving system\n","sig":null,"attributes":[{"value":"/ proving system","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":227700,"byte_end":227718,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2186},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":228896,"byte_end":228912,"line_start":20,"line_end":20,"column_start":12,"column_end":28},"name":"ProofEvaluations","qualname":"::proof_system::linearisation_poly::ProofEvaluations","value":"ProofEvaluations { a_eval, b_eval, c_eval, d_eval, a_next_eval, b_next_eval, d_next_eval, q_arith_eval, q_c_eval, q_l_eval, q_r_eval, left_sigma_eval, right_sigma_eval, out_sigma_eval, lin_poly_eval, perm_eval }","parent":null,"children":[{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2202}],"decl_id":null,"docs":" Proof Evaluations is a subset of all of the evaluations. These evaluations will be added to the proof\n","sig":null,"attributes":[{"value":"/ Proof Evaluations is a subset of all of the evaluations. These evaluations will be added to the proof","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":228740,"byte_end":228845,"line_start":18,"line_end":18,"column_start":1,"column_end":106}}]},{"kind":"Field","id":{"krate":0,"index":2187},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":228992,"byte_end":228998,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"name":"a_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::a_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2188},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229089,"byte_end":229095,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"name":"b_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::b_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2189},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229187,"byte_end":229193,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"name":"c_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::c_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229285,"byte_end":229291,"line_start":28,"line_end":28,"column_start":9,"column_end":15},"name":"d_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::d_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2191},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229319,"byte_end":229330,"line_start":30,"line_end":30,"column_start":9,"column_end":20},"name":"a_next_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::a_next_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229358,"byte_end":229369,"line_start":32,"line_end":32,"column_start":9,"column_end":20},"name":"b_next_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::b_next_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2193},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229477,"byte_end":229488,"line_start":34,"line_end":34,"column_start":9,"column_end":20},"name":"d_next_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::d_next_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2194},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229572,"byte_end":229584,"line_start":36,"line_end":36,"column_start":9,"column_end":21},"name":"q_arith_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::q_arith_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2195},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229612,"byte_end":229620,"line_start":38,"line_end":38,"column_start":9,"column_end":17},"name":"q_c_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::q_c_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2196},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229648,"byte_end":229656,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"name":"q_l_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::q_l_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2197},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229684,"byte_end":229692,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"name":"q_r_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::q_r_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2198},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229767,"byte_end":229782,"line_start":44,"line_end":44,"column_start":9,"column_end":24},"name":"left_sigma_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::left_sigma_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2199},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229858,"byte_end":229874,"line_start":46,"line_end":46,"column_start":9,"column_end":25},"name":"right_sigma_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::right_sigma_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2200},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":229948,"byte_end":229962,"line_start":48,"line_end":48,"column_start":9,"column_end":23},"name":"out_sigma_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::out_sigma_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2201},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":230047,"byte_end":230060,"line_start":51,"line_end":51,"column_start":9,"column_end":22},"name":"lin_poly_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::lin_poly_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2202},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":230163,"byte_end":230172,"line_start":54,"line_end":54,"column_start":9,"column_end":18},"name":"perm_eval","qualname":"::proof_system::linearisation_poly::ProofEvaluations::perm_eval","value":"dusk_bls12_381::BlsScalar","parent":{"krate":0,"index":2186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":230277,"byte_end":230285,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<ProofEvaluations>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serialises a Proof Evaluation struct to bytes\n","sig":null,"attributes":[{"value":"/ Serialises a Proof Evaluation struct to bytes","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":230216,"byte_end":230265,"line_start":58,"line_end":58,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":231686,"byte_end":231696,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<ProofEvaluations>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Result<ProofEvaluations, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialises a slice of bytes into a proof Evaluation struct\n","sig":null,"attributes":[{"value":"/ Deserialises a slice of bytes into a proof Evaluation struct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":231610,"byte_end":231674,"line_start":81,"line_end":81,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":233297,"byte_end":233312,"line_start":127,"line_end":127,"column_start":18,"column_end":33},"name":"serialised_size","qualname":"<ProofEvaluations>::serialised_size","value":"pub const fn serialised_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":242141,"byte_end":242158,"line_start":96,"line_end":96,"column_start":12,"column_end":29},"name":"preprocess_prover","qualname":"<StandardComposer>::preprocess_prover","value":"pub fn preprocess_prover(&mut Self, &CommitKey, &mut Transcript)\n-> Result<widget::ProverKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" These are the parts of preprocessing that the prover must compute\n Although the prover does not need the verification key, he must compute the commitments\n in order to seed the transcript, allowing both the prover and verifier to have the same view\n","sig":null,"attributes":[{"value":"/ These are the parts of preprocessing that the prover must compute","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":241863,"byte_end":241932,"line_start":93,"line_end":93,"column_start":5,"column_end":74}},{"value":"/ Although the prover does not need the verification key, he must compute the commitments","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":241937,"byte_end":242028,"line_start":94,"line_end":94,"column_start":5,"column_end":96}},{"value":"/ in order to seed the transcript, allowing both the prover and verifier to have the same view","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":242033,"byte_end":242129,"line_start":95,"line_end":95,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":247416,"byte_end":247435,"line_start":210,"line_end":210,"column_start":12,"column_end":31},"name":"preprocess_verifier","qualname":"<StandardComposer>::preprocess_verifier","value":"pub fn preprocess_verifier(&mut Self, &CommitKey, &mut Transcript)\n-> Result<widget::VerifierKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" The verifier only requires the commitments in order to verify a proof\n We can therefore speed up preprocessing for the verifier by skipping the FFTs\n needed to compute the 4n evaluations\n","sig":null,"attributes":[{"value":"/ The verifier only requires the commitments in order to verify a proof","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":247200,"byte_end":247273,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/ We can therefore speed up preprocessing for the verifier by skipping the FFTs","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":247278,"byte_end":247359,"line_start":208,"line_end":208,"column_start":5,"column_end":86}},{"value":"/ needed to compute the 4n evaluations","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":247364,"byte_end":247404,"line_start":209,"line_end":209,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1095},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof","qualname":"::proof_system::proof","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1135},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":2214},{"krate":0,"index":2227},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2241},{"krate":0,"index":1161},{"krate":0,"index":1176},{"krate":0,"index":1177}],"decl_id":null,"docs":" Represents a PLONK Proof\n A Proof stores the commitments to all of the elements that\n are needed to univocally identify a prove of some statement.","sig":null,"attributes":[{"value":"/ Represents a PLONK Proof","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":227772,"byte_end":227800,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"/ A Proof stores the commitments to all of the elements that","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":255069,"byte_end":255131,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/ are needed to univocally identify a prove of some statement.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":255132,"byte_end":255196,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":255197,"byte_end":255200,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This module contains the implementation of the `StandardComposer`s","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":255201,"byte_end":255271,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ `Proof` structure and it's methods.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":255272,"byte_end":255311,"line_start":11,"line_end":11,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":1160},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":255973,"byte_end":255983,"line_start":29,"line_end":29,"column_start":11,"column_end":21},"name":"PROOF_SIZE","qualname":"::proof_system::proof::PROOF_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Byte-size of a serialised `Proof`.\n","sig":null,"attributes":[{"value":"/ Byte-size of a serialised `Proof`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":255924,"byte_end":255962,"line_start":28,"line_end":28,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256421,"byte_end":256426,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Proof","qualname":"::proof_system::proof::Proof","value":"Proof { a_comm, b_comm, c_comm, d_comm, z_comm, t_1_comm, t_2_comm, t_3_comm, t_4_comm, w_z_comm, w_zw_comm, evaluations }","parent":null,"children":[{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2226}],"decl_id":null,"docs":" A Proof is a composition of `Commitments` to the witness, permutation,\n quotient, shifted and opening polynomials as well as the\n `ProofEvaluations`.","sig":null,"attributes":[{"value":"/ A Proof is a composition of `Commitments` to the witness, permutation,","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256020,"byte_end":256094,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/ quotient, shifted and opening polynomials as well as the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256095,"byte_end":256155,"line_start":32,"line_end":32,"column_start":1,"column_end":61}},{"value":"/ `ProofEvaluations`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256156,"byte_end":256179,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256180,"byte_end":256183,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ It's main goal is to have a `verify()` method attached which contains the","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256184,"byte_end":256261,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ logic of the operations that the `Verifier` will need to do in order to","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256262,"byte_end":256337,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ formally verify the `Proof`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256338,"byte_end":256370,"line_start":37,"line_end":37,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2215},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256502,"byte_end":256508,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"name":"a_comm","qualname":"::proof_system::proof::Proof::a_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the witness polynomial for the left wires.\n","sig":null,"attributes":[{"value":"/ Commitment to the witness polynomial for the left wires.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256433,"byte_end":256493,"line_start":40,"line_end":40,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2216},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256596,"byte_end":256602,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"name":"b_comm","qualname":"::proof_system::proof::Proof::b_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the witness polynomial for the right wires.\n","sig":null,"attributes":[{"value":"/ Commitment to the witness polynomial for the right wires.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256526,"byte_end":256587,"line_start":42,"line_end":42,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2217},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256691,"byte_end":256697,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"name":"c_comm","qualname":"::proof_system::proof::Proof::c_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the witness polynomial for the output wires.\n","sig":null,"attributes":[{"value":"/ Commitment to the witness polynomial for the output wires.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256620,"byte_end":256682,"line_start":44,"line_end":44,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":2218},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256786,"byte_end":256792,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"d_comm","qualname":"::proof_system::proof::Proof::d_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the witness polynomial for the fourth wires.\n","sig":null,"attributes":[{"value":"/ Commitment to the witness polynomial for the fourth wires.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256715,"byte_end":256777,"line_start":46,"line_end":46,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":2219},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256865,"byte_end":256871,"line_start":50,"line_end":50,"column_start":9,"column_end":15},"name":"z_comm","qualname":"::proof_system::proof::Proof::z_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the permutation polynomial.\n","sig":null,"attributes":[{"value":"/ Commitment to the permutation polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256811,"byte_end":256856,"line_start":49,"line_end":49,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2220},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256941,"byte_end":256949,"line_start":53,"line_end":53,"column_start":9,"column_end":17},"name":"t_1_comm","qualname":"::proof_system::proof::Proof::t_1_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the quotient polynomial.\n","sig":null,"attributes":[{"value":"/ Commitment to the quotient polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256890,"byte_end":256932,"line_start":52,"line_end":52,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2221},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257018,"byte_end":257026,"line_start":55,"line_end":55,"column_start":9,"column_end":17},"name":"t_2_comm","qualname":"::proof_system::proof::Proof::t_2_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the quotient polynomial.\n","sig":null,"attributes":[{"value":"/ Commitment to the quotient polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":256967,"byte_end":257009,"line_start":54,"line_end":54,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2222},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257095,"byte_end":257103,"line_start":57,"line_end":57,"column_start":9,"column_end":17},"name":"t_3_comm","qualname":"::proof_system::proof::Proof::t_3_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the quotient polynomial.\n","sig":null,"attributes":[{"value":"/ Commitment to the quotient polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257044,"byte_end":257086,"line_start":56,"line_end":56,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2223},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257172,"byte_end":257180,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"name":"t_4_comm","qualname":"::proof_system::proof::Proof::t_4_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the quotient polynomial.\n","sig":null,"attributes":[{"value":"/ Commitment to the quotient polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257121,"byte_end":257163,"line_start":58,"line_end":58,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2224},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257249,"byte_end":257257,"line_start":62,"line_end":62,"column_start":9,"column_end":17},"name":"w_z_comm","qualname":"::proof_system::proof::Proof::w_z_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the opening polynomial.\n","sig":null,"attributes":[{"value":"/ Commitment to the opening polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257199,"byte_end":257240,"line_start":61,"line_end":61,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2225},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257333,"byte_end":257342,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"name":"w_zw_comm","qualname":"::proof_system::proof::Proof::w_zw_comm","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Commitment to the shifted opening polynomial.\n","sig":null,"attributes":[{"value":"/ Commitment to the shifted opening polynomial.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257275,"byte_end":257324,"line_start":63,"line_end":63,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2226},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257425,"byte_end":257436,"line_start":66,"line_end":66,"column_start":9,"column_end":20},"name":"evaluations","qualname":"::proof_system::proof::Proof::evaluations","value":"proof_system::linearisation_poly::ProofEvaluations","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" Subset of all of the evaluations added to the proof.\n","sig":null,"attributes":[{"value":"/ Subset of all of the evaluations added to the proof.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":257360,"byte_end":257416,"line_start":65,"line_end":65,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":258116,"byte_end":258124,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<Proof>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Serialises a Proof struct\n","sig":null,"attributes":[{"value":"/ Serialises a Proof struct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":258075,"byte_end":258104,"line_start":93,"line_end":93,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":259202,"byte_end":259212,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Proof>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Result<Proof, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialises a Proof struct\n","sig":null,"attributes":[{"value":"/ Deserialises a Proof struct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":259159,"byte_end":259190,"line_start":112,"line_end":112,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":260378,"byte_end":260393,"line_start":148,"line_end":148,"column_start":18,"column_end":33},"name":"serialised_size","qualname":"<Proof>::serialised_size","value":"pub const fn serialised_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the serialised size of a [`Proof`] object.\n","sig":null,"attributes":[{"value":"/ Returns the serialised size of a [`Proof`] object.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":260306,"byte_end":260360,"line_start":147,"line_end":147,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2259},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276405,"byte_end":276427,"line_start":17,"line_end":17,"column_start":5,"column_end":27},"name":"ProofVerificationError","qualname":"::proof_system::proof_system_errors::ProofErrors::ProofVerificationError","value":"ProofErrors::ProofVerificationError","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" This error occurs when the verification of a `Proof` fails.\n","sig":null,"attributes":[{"value":"/ This error occurs when the verification of a `Proof` fails.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276295,"byte_end":276358,"line_start":15,"line_end":15,"column_start":5,"column_end":68}},{"value":"error(\"proof verification failed\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276363,"byte_end":276400,"line_start":16,"line_end":16,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2261},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276618,"byte_end":276644,"line_start":21,"line_end":21,"column_start":5,"column_end":31},"name":"CircuitAlreadyPreprocessed","qualname":"::proof_system::proof_system_errors::ProofErrors::CircuitAlreadyPreprocessed","value":"ProofErrors::CircuitAlreadyPreprocessed","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" This error occurrs when the Prover structure already contains a\n preprocessed circuit inside, but you call preprocess again.\n","sig":null,"attributes":[{"value":"/ This error occurrs when the Prover structure already contains a","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276433,"byte_end":276500,"line_start":18,"line_end":18,"column_start":5,"column_end":72}},{"value":"/ preprocessed circuit inside, but you call preprocess again.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276505,"byte_end":276568,"line_start":19,"line_end":19,"column_start":5,"column_end":68}},{"value":"error(\"circuit already preprocessed\")","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276573,"byte_end":276613,"line_start":20,"line_end":20,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":2253},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276277,"byte_end":276288,"line_start":14,"line_end":14,"column_start":10,"column_end":21},"name":"ProofErrors","qualname":"::proof_system::proof_system_errors::ProofErrors","value":"pub enum ProofErrors { ProofVerificationError, CircuitAlreadyPreprocessed, }","parent":null,"children":[{"krate":0,"index":2259},{"krate":0,"index":2261}],"decl_id":null,"docs":" Defines all of the possible ProofError types that we could have when\n we are working with the `proof_system` module.\n","sig":null,"attributes":[{"value":"/ Defines all of the possible ProofError types that we could have when","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276120,"byte_end":276192,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ we are working with the `proof_system` module.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof_system_errors.rs","byte_start":276193,"byte_end":276243,"line_start":12,"line_end":12,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":1192},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prover","qualname":"::proof_system::prover","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1249},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1258}],"decl_id":null,"docs":" Represents a PLONK Prover\n","sig":null,"attributes":[{"value":"/ Represents a PLONK Prover","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":227852,"byte_end":227881,"line_start":15,"line_end":15,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1249},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277518,"byte_end":277524,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Prover","qualname":"::proof_system::prover::Prover","value":"Prover { prover_key, preprocessed_transcript }","parent":null,"children":[{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252}],"decl_id":null,"docs":" Prover composes a circuit and builds a proof\n","sig":null,"attributes":[{"value":"/ Prover composes a circuit and builds a proof","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277418,"byte_end":277466,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277467,"byte_end":277506,"line_start":20,"line_end":20,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1250},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277615,"byte_end":277625,"line_start":23,"line_end":23,"column_start":9,"column_end":19},"name":"prover_key","qualname":"::proof_system::prover::Prover::prover_key","value":"std::option::Option<proof_system::widget::ProverKey>","parent":{"krate":0,"index":1249},"children":[],"decl_id":null,"docs":" ProverKey which is used to create proofs about a specific PLONK circuit\n","sig":null,"attributes":[{"value":"/ ProverKey which is used to create proofs about a specific PLONK circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277531,"byte_end":277606,"line_start":22,"line_end":22,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1252},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277810,"byte_end":277833,"line_start":28,"line_end":28,"column_start":9,"column_end":32},"name":"preprocessed_transcript","qualname":"::proof_system::prover::Prover::preprocessed_transcript","value":"merlin::Transcript","parent":{"krate":0,"index":1249},"children":[],"decl_id":null,"docs":" Store the messages exchanged during the preprocessing stage\n This is copied each time, we make a proof\n","sig":null,"attributes":[{"value":"/ Store the messages exchanged during the preprocessing stage","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277688,"byte_end":277751,"line_start":26,"line_end":26,"column_start":5,"column_end":68}},{"value":"/ This is copied each time, we make a proof","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277756,"byte_end":277801,"line_start":27,"line_end":27,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277933,"byte_end":277939,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"mut_cs","qualname":"<Prover>::mut_cs","value":"pub fn mut_cs(&mut Self) -> &mut StandardComposer","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable copy of the underlying composer\n","sig":null,"attributes":[{"value":"/ Returns a mutable copy of the underlying composer","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277868,"byte_end":277921,"line_start":32,"line_end":32,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278070,"byte_end":278080,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"preprocess","qualname":"<Prover>::preprocess","value":"pub fn preprocess(&mut Self, &CommitKey) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Preprocesses the underlying constraint system\n","sig":null,"attributes":[{"value":"/ Preprocesses the underlying constraint system","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278009,"byte_end":278058,"line_start":36,"line_end":36,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278593,"byte_end":278596,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Prover>::new","value":"pub fn new(&'static [u8]) -> Prover","parent":null,"children":[],"decl_id":null,"docs":" Creates a new prover object\n","sig":null,"attributes":[{"value":"/ Creates a new prover object","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278550,"byte_end":278581,"line_start":56,"line_end":56,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278869,"byte_end":278887,"line_start":66,"line_end":66,"column_start":12,"column_end":30},"name":"with_expected_size","qualname":"<Prover>::with_expected_size","value":"pub fn with_expected_size(&'static [u8], usize) -> Prover","parent":null,"children":[],"decl_id":null,"docs":" Creates a new prover object with some expected size.\n","sig":null,"attributes":[{"value":"/ Creates a new prover object with some expected size.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278801,"byte_end":278857,"line_start":65,"line_end":65,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":279182,"byte_end":279194,"line_start":75,"line_end":75,"column_start":12,"column_end":24},"name":"circuit_size","qualname":"<Prover>::circuit_size","value":"pub fn circuit_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of gates in the circuit\n","sig":null,"attributes":[{"value":"/ Returns the number of gates in the circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":279124,"byte_end":279170,"line_start":74,"line_end":74,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":280840,"byte_end":280853,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"clear_witness","qualname":"<Prover>::clear_witness","value":"pub fn clear_witness(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Resets the witnesses in the prover object.\n This function is used when the user wants to make multiple proofs with the same circuit.\n","sig":null,"attributes":[{"value":"/ Resets the witnesses in the prover object.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":280685,"byte_end":280731,"line_start":117,"line_end":117,"column_start":5,"column_end":51}},{"value":"/ This function is used when the user wants to make multiple proofs with the same circuit.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":280736,"byte_end":280828,"line_start":118,"line_end":118,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281094,"byte_end":281099,"line_start":126,"line_end":126,"column_start":12,"column_end":17},"name":"clear","qualname":"<Prover>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears all data in the Prover\n This function is used when the user wants to use the same Prover to\n make a proof regarding a different circuit.\n","sig":null,"attributes":[{"value":"/ Clears all data in the Prover","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":280921,"byte_end":280954,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ This function is used when the user wants to use the same Prover to","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":280959,"byte_end":281030,"line_start":124,"line_end":124,"column_start":5,"column_end":76}},{"value":"/ make a proof regarding a different circuit.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281035,"byte_end":281082,"line_start":125,"line_end":125,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281369,"byte_end":281383,"line_start":134,"line_end":134,"column_start":12,"column_end":26},"name":"key_transcript","qualname":"<Prover>::key_transcript","value":"pub fn key_transcript(&mut Self, &'static [u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Keys the transcript with additional seed information\n Wrapper around transcript.append_message\n","sig":null,"attributes":[{"value":"/ Keys the transcript with additional seed information","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281252,"byte_end":281308,"line_start":132,"line_end":132,"column_start":5,"column_end":61}},{"value":"/ Wrapper around transcript.append_message","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281313,"byte_end":281357,"line_start":133,"line_end":133,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281759,"byte_end":281782,"line_start":141,"line_end":141,"column_start":12,"column_end":35},"name":"prove_with_preprocessed","qualname":"<Prover>::prove_with_preprocessed","value":"pub fn prove_with_preprocessed(&Self, &CommitKey, &ProverKey)\n-> Result<Proof, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a Proof that a circuit is satisfied\n Note that if you intend to make multiple proofs, after calling this method, the user should then\n call `clear_witness`. This is automatically done when `prove` is called\n","sig":null,"attributes":[{"value":"/ Creates a Proof that a circuit is satisfied","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281515,"byte_end":281562,"line_start":138,"line_end":138,"column_start":5,"column_end":52}},{"value":"/ Note that if you intend to make multiple proofs, after calling this method, the user should then","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281567,"byte_end":281667,"line_start":139,"line_end":139,"column_start":5,"column_end":105}},{"value":"/ call `clear_witness`. This is automatically done when `prove` is called","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":281672,"byte_end":281747,"line_start":140,"line_end":140,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":290928,"byte_end":290933,"line_start":365,"line_end":365,"column_start":12,"column_end":17},"name":"prove","qualname":"<Prover>::prove","value":"pub fn prove(&mut Self, &CommitKey) -> Result<Proof, Error>","parent":null,"children":[],"decl_id":null,"docs":" Proves a circuit is satisfied, then clears the witness variables\n If the circuit is not pre-processed, then the preprocessed circuit will\n also be computed\n","sig":null,"attributes":[{"value":"/ Proves a circuit is satisfied, then clears the witness variables","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":290743,"byte_end":290811,"line_start":362,"line_end":362,"column_start":5,"column_end":73}},{"value":"/ If the circuit is not pre-processed, then the preprocessed circuit will","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":290816,"byte_end":290891,"line_start":363,"line_end":363,"column_start":5,"column_end":80}},{"value":"/ also be computed","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":290896,"byte_end":290916,"line_start":364,"line_end":364,"column_start":5,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":1300},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"verifier","qualname":"::proof_system::verifier","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1305},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1314},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1321},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1327},{"krate":0,"index":1330},{"krate":0,"index":1334},{"krate":0,"index":1336}],"decl_id":null,"docs":" Represents a PLONK Verifier\n","sig":null,"attributes":[{"value":"/ Represents a PLONK Verifier","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":227928,"byte_end":227959,"line_start":18,"line_end":18,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1330},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":298986,"byte_end":298994,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"Verifier","qualname":"::proof_system::verifier::Verifier","value":"Verifier { verifier_key, preprocessed_transcript }","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333}],"decl_id":null,"docs":" Verifier verifies a proof\n","sig":null,"attributes":[{"value":"/ Verifier verifies a proof","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":298905,"byte_end":298934,"line_start":14,"line_end":14,"column_start":1,"column_end":30}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":298935,"byte_end":298974,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1331},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299078,"byte_end":299090,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"verifier_key","qualname":"::proof_system::verifier::Verifier::verifier_key","value":"std::option::Option<proof_system::widget::VerifierKey>","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" VerificationKey which is used to verify a specific PLONK circuit\n","sig":null,"attributes":[{"value":"/ VerificationKey which is used to verify a specific PLONK circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299001,"byte_end":299069,"line_start":17,"line_end":17,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1333},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299501,"byte_end":299524,"line_start":25,"line_end":25,"column_start":9,"column_end":32},"name":"preprocessed_transcript","qualname":"::proof_system::verifier::Verifier::preprocessed_transcript","value":"merlin::Transcript","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" Store the messages exchanged during the preprocessing stage\n This is copied each time, we make a proof, so that we can use the same verifier to\n Verify multiple proofs from the same circuit. If this is not copied, then the verification procedure will modify\n the transcript, making it unusable for future proofs.\n","sig":null,"attributes":[{"value":"/ Store the messages exchanged during the preprocessing stage","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299155,"byte_end":299218,"line_start":21,"line_end":21,"column_start":5,"column_end":68}},{"value":"/ This is copied each time, we make a proof, so that we can use the same verifier to","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299223,"byte_end":299309,"line_start":22,"line_end":22,"column_start":5,"column_end":91}},{"value":"/ Verify multiple proofs from the same circuit. If this is not copied, then the verification procedure will modify","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299314,"byte_end":299430,"line_start":23,"line_end":23,"column_start":5,"column_end":121}},{"value":"/ the transcript, making it unusable for future proofs.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299435,"byte_end":299492,"line_start":24,"line_end":24,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299706,"byte_end":299709,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Verifier>::new","value":"pub fn new(&'static [u8]) -> Verifier","parent":null,"children":[],"decl_id":null,"docs":" Creates a new verifier object\n","sig":null,"attributes":[{"value":"/ Creates a new verifier object","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299661,"byte_end":299694,"line_start":35,"line_end":35,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299990,"byte_end":300008,"line_start":45,"line_end":45,"column_start":12,"column_end":30},"name":"with_expected_size","qualname":"<Verifier>::with_expected_size","value":"pub fn with_expected_size(&'static [u8], usize) -> Verifier","parent":null,"children":[],"decl_id":null,"docs":" Creates a new verifier object with some expected size.\n","sig":null,"attributes":[{"value":"/ Creates a new verifier object with some expected size.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299920,"byte_end":299978,"line_start":44,"line_end":44,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300309,"byte_end":300321,"line_start":54,"line_end":54,"column_start":12,"column_end":24},"name":"circuit_size","qualname":"<Verifier>::circuit_size","value":"pub fn circuit_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of gates in the circuit\n","sig":null,"attributes":[{"value":"/ Returns the number of gates in the circuit","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300251,"byte_end":300297,"line_start":53,"line_end":53,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300447,"byte_end":300453,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"mut_cs","qualname":"<Verifier>::mut_cs","value":"pub fn mut_cs(&mut Self) -> &mut StandardComposer","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable copy of the underlying composer\n","sig":null,"attributes":[{"value":"/ Returns a mutable copy of the underlying composer","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300382,"byte_end":300435,"line_start":58,"line_end":58,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300558,"byte_end":300568,"line_start":64,"line_end":64,"column_start":12,"column_end":22},"name":"preprocess","qualname":"<Verifier>::preprocess","value":"pub fn preprocess(&mut Self, &CommitKey) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Preprocess a proof\n","sig":null,"attributes":[{"value":"/ Preprocess a proof","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300524,"byte_end":300546,"line_start":63,"line_end":63,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300929,"byte_end":300943,"line_start":75,"line_end":75,"column_start":12,"column_end":26},"name":"key_transcript","qualname":"<Verifier>::key_transcript","value":"pub fn key_transcript(&mut Self, &'static [u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Keys the transcript with additional seed information\n Wrapper around transcript.append_message\n","sig":null,"attributes":[{"value":"/ Keys the transcript with additional seed information","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300812,"byte_end":300868,"line_start":73,"line_end":73,"column_start":5,"column_end":61}},{"value":"/ Wrapper around transcript.append_message","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":300873,"byte_end":300917,"line_start":74,"line_end":74,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":301107,"byte_end":301113,"line_start":80,"line_end":80,"column_start":12,"column_end":18},"name":"verify","qualname":"<Verifier>::verify","value":"pub fn verify(&Self, &Proof, &OpeningKey, &[BlsScalar]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Verifies a proof\n","sig":null,"attributes":[{"value":"/ Verifies a proof","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":301075,"byte_end":301095,"line_start":79,"line_end":79,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2263},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322459,"byte_end":322468,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"ProverKey","qualname":"::proof_system::widget::arithmetic::proverkey::ProverKey","value":"ProverKey { q_m, q_l, q_r, q_o, q_c, q_4, q_arith }","parent":null,"children":[{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2264},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322479,"byte_end":322482,"line_start":12,"line_end":12,"column_start":9,"column_end":12},"name":"q_m","qualname":"::proof_system::widget::arithmetic::proverkey::ProverKey::q_m","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2263},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2265},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322519,"byte_end":322522,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"name":"q_l","qualname":"::proof_system::widget::arithmetic::proverkey::ProverKey::q_l","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2263},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2266},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322559,"byte_end":322562,"line_start":14,"line_end":14,"column_start":9,"column_end":12},"name":"q_r","qualname":"::proof_system::widget::arithmetic::proverkey::ProverKey::q_r","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2263},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2267},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322599,"byte_end":322602,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"q_o","qualname":"::proof_system::widget::arithmetic::proverkey::ProverKey::q_o","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2263},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2268},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322639,"byte_end":322642,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"name":"q_c","qualname":"::proof_system::widget::arithmetic::proverkey::ProverKey::q_c","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2263},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2269},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322679,"byte_end":322682,"line_start":17,"line_end":17,"column_start":9,"column_end":12},"name":"q_4","qualname":"::proof_system::widget::arithmetic::proverkey::ProverKey::q_4","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2263},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2270},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322719,"byte_end":322726,"line_start":18,"line_end":18,"column_start":9,"column_end":16},"name":"q_arith","qualname":"::proof_system::widget::arithmetic::proverkey::ProverKey::q_arith","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2263},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2282},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325227,"byte_end":325238,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"VerifierKey","qualname":"::proof_system::widget::arithmetic::verifierkey::VerifierKey","value":"VerifierKey { q_m, q_l, q_r, q_o, q_c, q_4, q_arith }","parent":null,"children":[{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2289}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2283},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325249,"byte_end":325252,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"name":"q_m","qualname":"::proof_system::widget::arithmetic::verifierkey::VerifierKey::q_m","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2284},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325274,"byte_end":325277,"line_start":14,"line_end":14,"column_start":9,"column_end":12},"name":"q_l","qualname":"::proof_system::widget::arithmetic::verifierkey::VerifierKey::q_l","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2285},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325299,"byte_end":325302,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"q_r","qualname":"::proof_system::widget::arithmetic::verifierkey::VerifierKey::q_r","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2286},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325324,"byte_end":325327,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"name":"q_o","qualname":"::proof_system::widget::arithmetic::verifierkey::VerifierKey::q_o","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2287},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325349,"byte_end":325352,"line_start":17,"line_end":17,"column_start":9,"column_end":12},"name":"q_c","qualname":"::proof_system::widget::arithmetic::verifierkey::VerifierKey::q_c","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2288},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325374,"byte_end":325377,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"name":"q_4","qualname":"::proof_system::widget::arithmetic::verifierkey::VerifierKey::q_4","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2289},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325399,"byte_end":325406,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"name":"q_arith","qualname":"::proof_system::widget::arithmetic::verifierkey::VerifierKey::q_arith","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2302},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/curve_addition/proverkey.rs","byte_start":327309,"byte_end":327318,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"ProverKey","qualname":"::proof_system::widget::ecc::curve_addition::proverkey::ProverKey","value":"ProverKey { q_variable_group_add }","parent":null,"children":[{"krate":0,"index":2303}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2303},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/curve_addition/proverkey.rs","byte_start":327329,"byte_end":327349,"line_start":13,"line_end":13,"column_start":9,"column_end":29},"name":"q_variable_group_add","qualname":"::proof_system::widget::ecc::curve_addition::proverkey::ProverKey::q_variable_group_add","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2302},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2315},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/curve_addition/verifierkey.rs","byte_start":330912,"byte_end":330923,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"VerifierKey","qualname":"::proof_system::widget::ecc::curve_addition::verifierkey::VerifierKey","value":"VerifierKey { q_variable_group_add }","parent":null,"children":[{"krate":0,"index":2316}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2316},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/curve_addition/verifierkey.rs","byte_start":330934,"byte_end":330954,"line_start":14,"line_end":14,"column_start":9,"column_end":29},"name":"q_variable_group_add","qualname":"::proof_system::widget::ecc::curve_addition::verifierkey::VerifierKey::q_variable_group_add","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2329},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":334389,"byte_end":334398,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"ProverKey","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::proverkey::ProverKey","value":"ProverKey { q_l, q_r, q_c, q_fixed_group_add }","parent":null,"children":[{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2330},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":334409,"byte_end":334412,"line_start":14,"line_end":14,"column_start":9,"column_end":12},"name":"q_l","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::proverkey::ProverKey::q_l","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2331},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":334449,"byte_end":334452,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"q_r","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::proverkey::ProverKey::q_r","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2332},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":334489,"byte_end":334492,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"name":"q_c","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::proverkey::ProverKey::q_c","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2333},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":334529,"byte_end":334546,"line_start":17,"line_end":17,"column_start":9,"column_end":26},"name":"q_fixed_group_add","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::proverkey::ProverKey::q_fixed_group_add","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2345},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/verifierkey.rs","byte_start":339461,"byte_end":339472,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"VerifierKey","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::verifierkey::VerifierKey","value":"VerifierKey { q_l, q_r, q_fixed_group_add }","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2346},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/verifierkey.rs","byte_start":339483,"byte_end":339486,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"q_l","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::verifierkey::VerifierKey::q_l","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2345},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2347},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/verifierkey.rs","byte_start":339508,"byte_end":339511,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"name":"q_r","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::verifierkey::VerifierKey::q_r","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2345},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2348},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/verifierkey.rs","byte_start":339533,"byte_end":339550,"line_start":17,"line_end":17,"column_start":9,"column_end":26},"name":"q_fixed_group_add","qualname":"::proof_system::widget::ecc::scalar_mul::fixed_base::verifierkey::VerifierKey::q_fixed_group_add","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2345},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2361},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/proverkey.rs","byte_start":343817,"byte_end":343826,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"ProverKey","qualname":"::proof_system::widget::logic::proverkey::ProverKey","value":"ProverKey { q_c, q_logic }","parent":null,"children":[{"krate":0,"index":2362},{"krate":0,"index":2363}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2362},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/proverkey.rs","byte_start":343837,"byte_end":343840,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"q_c","qualname":"::proof_system::widget::logic::proverkey::ProverKey::q_c","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2363},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/proverkey.rs","byte_start":343877,"byte_end":343884,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"name":"q_logic","qualname":"::proof_system::widget::logic::proverkey::ProverKey::q_logic","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2375},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/verifierkey.rs","byte_start":346670,"byte_end":346681,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"VerifierKey","qualname":"::proof_system::widget::logic::verifierkey::VerifierKey","value":"VerifierKey { q_c, q_logic }","parent":null,"children":[{"krate":0,"index":2376},{"krate":0,"index":2377}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2376},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/verifierkey.rs","byte_start":346692,"byte_end":346695,"line_start":14,"line_end":14,"column_start":9,"column_end":12},"name":"q_c","qualname":"::proof_system::widget::logic::verifierkey::VerifierKey::q_c","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2377},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/verifierkey.rs","byte_start":346717,"byte_end":346724,"line_start":15,"line_end":15,"column_start":9,"column_end":16},"name":"q_logic","qualname":"::proof_system::widget::logic::verifierkey::VerifierKey::q_logic","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2390},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/proverkey.rs","byte_start":348663,"byte_end":348672,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"ProverKey","qualname":"::proof_system::widget::permutation::proverkey::ProverKey","value":"ProverKey { left_sigma, right_sigma, out_sigma, fourth_sigma, linear_evaluations }","parent":null,"children":[{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2391},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/proverkey.rs","byte_start":348683,"byte_end":348693,"line_start":14,"line_end":14,"column_start":9,"column_end":19},"name":"left_sigma","qualname":"::proof_system::widget::permutation::proverkey::ProverKey::left_sigma","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2390},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2392},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/proverkey.rs","byte_start":348730,"byte_end":348741,"line_start":15,"line_end":15,"column_start":9,"column_end":20},"name":"right_sigma","qualname":"::proof_system::widget::permutation::proverkey::ProverKey::right_sigma","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2390},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2393},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/proverkey.rs","byte_start":348778,"byte_end":348787,"line_start":16,"line_end":16,"column_start":9,"column_end":18},"name":"out_sigma","qualname":"::proof_system::widget::permutation::proverkey::ProverKey::out_sigma","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2390},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2394},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/proverkey.rs","byte_start":348824,"byte_end":348836,"line_start":17,"line_end":17,"column_start":9,"column_end":21},"name":"fourth_sigma","qualname":"::proof_system::widget::permutation::proverkey::ProverKey::fourth_sigma","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2390},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2395},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/proverkey.rs","byte_start":348873,"byte_end":348891,"line_start":18,"line_end":18,"column_start":9,"column_end":27},"name":"linear_evaluations","qualname":"::proof_system::widget::permutation::proverkey::ProverKey::linear_evaluations","value":"fft::evaluations::Evaluations","parent":{"krate":0,"index":2390},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2407},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/verifierkey.rs","byte_start":356742,"byte_end":356753,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"VerifierKey","qualname":"::proof_system::widget::permutation::verifierkey::VerifierKey","value":"VerifierKey { left_sigma, right_sigma, out_sigma, fourth_sigma }","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2411}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2408},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/verifierkey.rs","byte_start":356764,"byte_end":356774,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"left_sigma","qualname":"::proof_system::widget::permutation::verifierkey::VerifierKey::left_sigma","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2407},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2409},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/verifierkey.rs","byte_start":356796,"byte_end":356807,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"name":"right_sigma","qualname":"::proof_system::widget::permutation::verifierkey::VerifierKey::right_sigma","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2407},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/verifierkey.rs","byte_start":356829,"byte_end":356838,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"name":"out_sigma","qualname":"::proof_system::widget::permutation::verifierkey::VerifierKey::out_sigma","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2407},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2411},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/verifierkey.rs","byte_start":356860,"byte_end":356872,"line_start":19,"line_end":19,"column_start":9,"column_end":21},"name":"fourth_sigma","qualname":"::proof_system::widget::permutation::verifierkey::VerifierKey::fourth_sigma","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2407},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2424},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/range/proverkey.rs","byte_start":359920,"byte_end":359929,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"ProverKey","qualname":"::proof_system::widget::range::proverkey::ProverKey","value":"ProverKey { q_range }","parent":null,"children":[{"krate":0,"index":2425}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/range/proverkey.rs","byte_start":359940,"byte_end":359947,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"name":"q_range","qualname":"::proof_system::widget::range::proverkey::ProverKey::q_range","value":"(fft::polynomial::Polynomial, fft::evaluations::Evaluations)","parent":{"krate":0,"index":2424},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2437},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/range/verifierkey.rs","byte_start":362462,"byte_end":362473,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"VerifierKey","qualname":"::proof_system::widget::range::verifierkey::VerifierKey","value":"VerifierKey { q_range }","parent":null,"children":[{"krate":0,"index":2438}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2438},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/range/verifierkey.rs","byte_start":362484,"byte_end":362491,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"q_range","qualname":"::proof_system::widget::range::verifierkey::VerifierKey::q_range","value":"commitment_scheme::kzg10::Commitment","parent":{"krate":0,"index":2437},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2451},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302189,"byte_end":302198,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"ProverKey","qualname":"::proof_system::widget::ProverKey","value":"ProverKey { n, arithmetic, logic, range, fixed_base, permutation, variable_base }","parent":null,"children":[{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2458},{"krate":0,"index":2459}],"decl_id":null,"docs":" PLONK circuit proving key\n","sig":null,"attributes":[{"value":"/ PLONK circuit proving key","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302109,"byte_end":302138,"line_start":20,"line_end":20,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2452},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302230,"byte_end":302231,"line_start":24,"line_end":24,"column_start":9,"column_end":10},"name":"n","qualname":"::proof_system::widget::ProverKey::n","value":"usize","parent":{"krate":0,"index":2451},"children":[],"decl_id":null,"docs":" Circuit size\n","sig":null,"attributes":[{"value":"/ Circuit size","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302205,"byte_end":302221,"line_start":23,"line_end":23,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2453},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302286,"byte_end":302296,"line_start":26,"line_end":26,"column_start":9,"column_end":19},"name":"arithmetic","qualname":"::proof_system::widget::ProverKey::arithmetic","value":"proof_system::widget::arithmetic::proverkey::ProverKey","parent":{"krate":0,"index":2451},"children":[],"decl_id":null,"docs":" ProverKey for arithmetic gate\n","sig":null,"attributes":[{"value":"/ ProverKey for arithmetic gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302244,"byte_end":302277,"line_start":25,"line_end":25,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":2454},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302362,"byte_end":302367,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"logic","qualname":"::proof_system::widget::ProverKey::logic","value":"proof_system::widget::logic::proverkey::ProverKey","parent":{"krate":0,"index":2451},"children":[],"decl_id":null,"docs":" ProverKey for logic gate\n","sig":null,"attributes":[{"value":"/ ProverKey for logic gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302325,"byte_end":302353,"line_start":27,"line_end":27,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2455},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302428,"byte_end":302433,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"name":"range","qualname":"::proof_system::widget::ProverKey::range","value":"proof_system::widget::range::proverkey::ProverKey","parent":{"krate":0,"index":2451},"children":[],"decl_id":null,"docs":" ProverKey for range gate\n","sig":null,"attributes":[{"value":"/ ProverKey for range gate","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302391,"byte_end":302419,"line_start":29,"line_end":29,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2456},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302515,"byte_end":302525,"line_start":32,"line_end":32,"column_start":9,"column_end":19},"name":"fixed_base","qualname":"::proof_system::widget::ProverKey::fixed_base","value":"proof_system::widget::ecc::scalar_mul::fixed_base::proverkey::ProverKey","parent":{"krate":0,"index":2451},"children":[],"decl_id":null,"docs":" ProverKey for fixed base curve addition gates\n","sig":null,"attributes":[{"value":"/ ProverKey for fixed base curve addition gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302457,"byte_end":302506,"line_start":31,"line_end":31,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2457},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302616,"byte_end":302627,"line_start":34,"line_end":34,"column_start":9,"column_end":20},"name":"permutation","qualname":"::proof_system::widget::ProverKey::permutation","value":"proof_system::widget::permutation::proverkey::ProverKey","parent":{"krate":0,"index":2451},"children":[],"decl_id":null,"docs":" ProverKey for permutation checks\n","sig":null,"attributes":[{"value":"/ ProverKey for permutation checks","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302571,"byte_end":302607,"line_start":33,"line_end":33,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2458},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302718,"byte_end":302731,"line_start":36,"line_end":36,"column_start":9,"column_end":22},"name":"variable_base","qualname":"::proof_system::widget::ProverKey::variable_base","value":"proof_system::widget::ecc::curve_addition::proverkey::ProverKey","parent":{"krate":0,"index":2451},"children":[],"decl_id":null,"docs":" ProverKey for variable base curve addition gates\n","sig":null,"attributes":[{"value":"/ ProverKey for variable base curve addition gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":302657,"byte_end":302709,"line_start":35,"line_end":35,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":2471},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303213,"byte_end":303224,"line_start":46,"line_end":46,"column_start":12,"column_end":23},"name":"VerifierKey","qualname":"::proof_system::widget::VerifierKey","value":"VerifierKey { n, arithmetic, logic, range, fixed_base, variable_base, permutation }","parent":null,"children":[{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478}],"decl_id":null,"docs":" PLONK circuit verification key\n","sig":null,"attributes":[{"value":"/ PLONK circuit verification key","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303122,"byte_end":303156,"line_start":44,"line_end":44,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2472},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303256,"byte_end":303257,"line_start":48,"line_end":48,"column_start":9,"column_end":10},"name":"n","qualname":"::proof_system::widget::VerifierKey::n","value":"usize","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" Circuit size\n","sig":null,"attributes":[{"value":"/ Circuit size","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303231,"byte_end":303247,"line_start":47,"line_end":47,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2473},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303315,"byte_end":303325,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"arithmetic","qualname":"::proof_system::widget::VerifierKey::arithmetic","value":"proof_system::widget::arithmetic::verifierkey::VerifierKey","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" VerifierKey for arithmetic gates\n","sig":null,"attributes":[{"value":"/ VerifierKey for arithmetic gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303270,"byte_end":303306,"line_start":49,"line_end":49,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2474},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303396,"byte_end":303401,"line_start":52,"line_end":52,"column_start":9,"column_end":14},"name":"logic","qualname":"::proof_system::widget::VerifierKey::logic","value":"proof_system::widget::logic::verifierkey::VerifierKey","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" VerifierKey for logic gates\n","sig":null,"attributes":[{"value":"/ VerifierKey for logic gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303356,"byte_end":303387,"line_start":51,"line_end":51,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2475},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303467,"byte_end":303472,"line_start":54,"line_end":54,"column_start":9,"column_end":14},"name":"range","qualname":"::proof_system::widget::VerifierKey::range","value":"proof_system::widget::range::verifierkey::VerifierKey","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" VerifierKey for range gates\n","sig":null,"attributes":[{"value":"/ VerifierKey for range gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303427,"byte_end":303458,"line_start":53,"line_end":53,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2476},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303558,"byte_end":303568,"line_start":56,"line_end":56,"column_start":9,"column_end":19},"name":"fixed_base","qualname":"::proof_system::widget::VerifierKey::fixed_base","value":"proof_system::widget::ecc::scalar_mul::fixed_base::verifierkey::VerifierKey","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" VerifierKey for fixed base curve addition gates\n","sig":null,"attributes":[{"value":"/ VerifierKey for fixed base curve addition gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303498,"byte_end":303549,"line_start":55,"line_end":55,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":2477},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303679,"byte_end":303692,"line_start":58,"line_end":58,"column_start":9,"column_end":22},"name":"variable_base","qualname":"::proof_system::widget::VerifierKey::variable_base","value":"proof_system::widget::ecc::curve_addition::verifierkey::VerifierKey","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" VerifierKey for variable base curve addition gates\n","sig":null,"attributes":[{"value":"/ VerifierKey for variable base curve addition gates","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303616,"byte_end":303670,"line_start":57,"line_end":57,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2478},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303779,"byte_end":303790,"line_start":60,"line_end":60,"column_start":9,"column_end":20},"name":"permutation","qualname":"::proof_system::widget::VerifierKey::permutation","value":"proof_system::widget::permutation::verifierkey::VerifierKey","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" VerifierKey for permutation checks\n","sig":null,"attributes":[{"value":"/ VerifierKey for permutation checks","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303732,"byte_end":303770,"line_start":59,"line_end":59,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303944,"byte_end":303952,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<VerifierKey>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Serialises a VerifierKey to bytes\n","sig":null,"attributes":[{"value":"/ Serialises a VerifierKey to bytes","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303895,"byte_end":303932,"line_start":67,"line_end":67,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":305462,"byte_end":305472,"line_start":108,"line_end":108,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<VerifierKey>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Result<VerifierKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialise a slice of bytes into a VerifierKey\n","sig":null,"attributes":[{"value":"/ Deserialise a slice of bytes into a VerifierKey","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":305399,"byte_end":305450,"line_start":107,"line_end":107,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":309209,"byte_end":309217,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<ProverKey>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Serialises a ProverKey struct into bytes\n","sig":null,"attributes":[{"value":"/ Serialises a ProverKey struct into bytes","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":309153,"byte_end":309197,"line_start":211,"line_end":211,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":311845,"byte_end":311855,"line_start":276,"line_end":276,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<ProverKey>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Result<ProverKey, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialises a slice of bytes into a ProverKey\n","sig":null,"attributes":[{"value":"/ Deserialises a slice of bytes into a ProverKey","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":311783,"byte_end":311833,"line_start":275,"line_end":275,"column_start":5,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":1815},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"transcript","qualname":"::transcript","value":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","parent":null,"children":[{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1830}],"decl_id":null,"docs":" This is an extension over the [Merlin Transcript](https://docs.rs/merlin/1.0.3/merlin/struct.Transcript.html)\n which adds a few extra functionalities.\n","sig":null,"attributes":[{"value":"/ This is an extension over the [Merlin Transcript](https://docs.rs/merlin/1.0.3/merlin/struct.Transcript.html)","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":371835,"byte_end":371948,"line_start":7,"line_end":7,"column_start":1,"column_end":114}},{"value":"/ which adds a few extra functionalities.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":371949,"byte_end":371992,"line_start":8,"line_end":8,"column_start":1,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":1825},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372190,"byte_end":372208,"line_start":15,"line_end":15,"column_start":11,"column_end":29},"name":"TranscriptProtocol","qualname":"::transcript::TranscriptProtocol","value":"TranscriptProtocol","parent":null,"children":[{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829}],"decl_id":null,"docs":" Transcript adds an abstraction over the Merlin transcript\n For convenience\n","sig":null,"attributes":[{"value":"/ Transcript adds an abstraction over the Merlin transcript","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372098,"byte_end":372159,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/ For convenience","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372160,"byte_end":372179,"line_start":14,"line_end":14,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372272,"byte_end":372289,"line_start":17,"line_end":17,"column_start":8,"column_end":25},"name":"append_commitment","qualname":"::transcript::TranscriptProtocol::append_commitment","value":"pub fn append_commitment(&mut Self, &'static [u8], &Commitment)","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" Append a `commitment` with the given `label`.\n","sig":null,"attributes":[{"value":"/ Append a `commitment` with the given `label`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372215,"byte_end":372264,"line_start":16,"line_end":16,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372404,"byte_end":372417,"line_start":20,"line_end":20,"column_start":8,"column_end":21},"name":"append_scalar","qualname":"::transcript::TranscriptProtocol::append_scalar","value":"pub fn append_scalar(&mut Self, &'static [u8], &BlsScalar)","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" Append a `BlsScalar` with the given `label`.\n","sig":null,"attributes":[{"value":"/ Append a `BlsScalar` with the given `label`.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372348,"byte_end":372396,"line_start":19,"line_end":19,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372523,"byte_end":372539,"line_start":23,"line_end":23,"column_start":8,"column_end":24},"name":"challenge_scalar","qualname":"::transcript::TranscriptProtocol::challenge_scalar","value":"pub fn challenge_scalar(&mut Self, &'static [u8]) -> BlsScalar","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" Compute a `label`ed challenge variable.\n","sig":null,"attributes":[{"value":"/ Compute a `label`ed challenge variable.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372472,"byte_end":372515,"line_start":22,"line_end":22,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372649,"byte_end":372667,"line_start":26,"line_end":26,"column_start":8,"column_end":26},"name":"circuit_domain_sep","qualname":"::transcript::TranscriptProtocol::circuit_domain_sep","value":"pub fn circuit_domain_sep(&mut Self, u64)","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" Append domain separator for the circuit size.\n","sig":null,"attributes":[{"value":"/ Append domain separator for the circuit size.","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372592,"byte_end":372641,"line_start":25,"line_end":25,"column_start":5,"column_end":54}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9085,"byte_end":9096,"line_start":28,"line_end":28,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27704,"byte_end":27713,"line_start":40,"line_end":40,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":141},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":33810,"byte_end":33820,"line_start":200,"line_end":200,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":168},{"krate":0,"index":173},{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44184,"byte_end":44200,"line_start":33,"line_end":33,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21913,"byte_end":21927,"line_start":44,"line_end":44,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":23987,"byte_end":23997,"line_start":96,"line_end":96,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24493,"byte_end":24503,"line_start":112,"line_end":112,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52129,"byte_end":52145,"line_start":82,"line_end":82,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52282,"byte_end":52298,"line_start":89,"line_end":89,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52362,"byte_end":52378,"line_start":95,"line_end":95,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69573,"byte_end":69581,"line_start":15,"line_end":15,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":70565,"byte_end":70581,"line_start":13,"line_end":13,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86059,"byte_end":86075,"line_start":11,"line_end":11,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":98815,"byte_end":98831,"line_start":37,"line_end":37,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":100359,"byte_end":100364,"line_start":12,"line_end":12,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88857,"byte_end":88862,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90815,"byte_end":90826,"line_start":90,"line_end":90,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":91059,"byte_end":91064,"line_start":102,"line_end":102,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":91138,"byte_end":91143,"line_start":108,"line_end":108,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":95198,"byte_end":95214,"line_start":257,"line_end":257,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":124647,"byte_end":124663,"line_start":12,"line_end":12,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/range.rs","byte_start":142968,"byte_end":142984,"line_start":12,"line_end":12,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154993,"byte_end":155009,"line_start":43,"line_end":43,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":155156,"byte_end":155172,"line_start":49,"line_end":49,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":165830,"byte_end":165838,"line_start":366,"line_end":366,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167646,"byte_end":167657,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":168311,"byte_end":168322,"line_start":42,"line_end":42,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":168729,"byte_end":168740,"line_start":61,"line_end":61,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":169294,"byte_end":169305,"line_start":83,"line_end":83,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":169859,"byte_end":169870,"line_start":105,"line_end":105,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":170176,"byte_end":170187,"line_start":116,"line_end":116,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172337,"byte_end":172347,"line_start":26,"line_end":26,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172468,"byte_end":172478,"line_start":34,"line_end":34,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172570,"byte_end":172580,"line_start":40,"line_end":40,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":175309,"byte_end":175319,"line_start":133,"line_end":133,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":177364,"byte_end":177374,"line_start":205,"line_end":205,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":178126,"byte_end":178136,"line_start":226,"line_end":226,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":178938,"byte_end":178948,"line_start":248,"line_end":248,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":180161,"byte_end":180171,"line_start":292,"line_end":292,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":181055,"byte_end":181065,"line_start":317,"line_end":317,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/permutation/permutation.rs","byte_start":187958,"byte_end":187969,"line_start":25,"line_end":25,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":230193,"byte_end":230209,"line_start":57,"line_end":57,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1024},{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":239870,"byte_end":239886,"line_start":39,"line_end":39,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":258063,"byte_end":258068,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277855,"byte_end":277861,"line_start":31,"line_end":31,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278455,"byte_end":278461,"line_start":49,"line_end":49,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278537,"byte_end":278543,"line_start":55,"line_end":55,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299558,"byte_end":299566,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299646,"byte_end":299654,"line_start":34,"line_end":34,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322763,"byte_end":322772,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325428,"byte_end":325439,"line_start":22,"line_end":22,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/curve_addition/proverkey.rs","byte_start":327386,"byte_end":327395,"line_start":16,"line_end":16,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/curve_addition/verifierkey.rs","byte_start":330976,"byte_end":330987,"line_start":17,"line_end":17,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":334583,"byte_end":334592,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/verifierkey.rs","byte_start":339572,"byte_end":339583,"line_start":20,"line_end":20,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/proverkey.rs","byte_start":343921,"byte_end":343930,"line_start":19,"line_end":19,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1510},{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/verifierkey.rs","byte_start":346746,"byte_end":346757,"line_start":18,"line_end":18,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1534}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/proverkey.rs","byte_start":349050,"byte_end":349059,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/verifierkey.rs","byte_start":356894,"byte_end":356905,"line_start":22,"line_end":22,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1605}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/range/proverkey.rs","byte_start":359984,"byte_end":359993,"line_start":16,"line_end":16,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/range/verifierkey.rs","byte_start":362513,"byte_end":362524,"line_start":17,"line_end":17,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303877,"byte_end":303888,"line_start":66,"line_end":66,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1695},{"krate":0,"index":1703},{"krate":0,"index":1711},{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":309137,"byte_end":309146,"line_start":210,"line_end":210,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1717},{"krate":0,"index":1728},{"krate":0,"index":1739},{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372719,"byte_end":372729,"line_start":29,"line_end":29,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2733,"byte_end":2748,"line_start":61,"line_end":61,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2758,"byte_end":2775,"line_start":62,"line_end":62,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":71}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/mod.rs","byte_start":20238,"byte_end":20243,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":74}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20574,"byte_end":20580,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":75}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20590,"byte_end":20593,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":79}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":20603,"byte_end":20606,"line_start":10,"line_end":10,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":184}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2785,"byte_end":2802,"line_start":63,"line_end":63,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":287}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":48978,"byte_end":48988,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":325}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49015,"byte_end":49022,"line_start":18,"line_end":18,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":344}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49064,"byte_end":49067,"line_start":20,"line_end":20,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":356}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88511,"byte_end":88525,"line_start":8,"line_end":8,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":357}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88578,"byte_end":88588,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":389}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":105043,"byte_end":105053,"line_start":8,"line_end":8,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":390}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":105108,"byte_end":105121,"line_start":10,"line_end":10,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":423}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49135,"byte_end":49140,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":482}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/mod.rs","byte_start":49165,"byte_end":49170,"line_start":26,"line_end":26,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":501}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2812,"byte_end":2815,"line_start":64,"line_end":64,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":529}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2842,"byte_end":2849,"line_start":66,"line_end":66,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":930}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2859,"byte_end":2871,"line_start":67,"line_end":67,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":995}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":227809,"byte_end":227814,"line_start":13,"line_end":13,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1095}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":227890,"byte_end":227896,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1192}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/mod.rs","byte_start":227968,"byte_end":227976,"line_start":19,"line_end":19,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1300}},{"kind":"Mod","span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/lib.rs","byte_start":2900,"byte_end":2910,"line_start":69,"line_end":69,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1815}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/circuit_builder.rs","byte_start":9085,"byte_end":9096,"line_start":28,"line_end":28,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1904},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":27704,"byte_end":27713,"line_start":40,"line_end":40,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1961},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/key.rs","byte_start":33810,"byte_end":33820,"line_start":200,"line_end":200,"column_start":6,"column_end":16},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/srs.rs","byte_start":44184,"byte_end":44200,"line_start":33,"line_end":33,"column_start":6,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":21913,"byte_end":21927,"line_start":44,"line_end":44,"column_start":6,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":23987,"byte_end":23997,"line_start":96,"line_end":96,"column_start":6,"column_end":16},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/commitment_scheme/kzg10/mod.rs","byte_start":24493,"byte_end":24503,"line_start":112,"line_end":112,"column_start":18,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2000},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52129,"byte_end":52145,"line_start":82,"line_end":82,"column_start":6,"column_end":22},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52282,"byte_end":52298,"line_start":89,"line_end":89,"column_start":18,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2015},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/composer.rs","byte_start":52362,"byte_end":52378,"line_start":95,"line_end":95,"column_start":6,"column_end":22},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/variable.rs","byte_start":69573,"byte_end":69581,"line_start":15,"line_end":15,"column_start":38,"column_end":46},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2046},"to":{"krate":2,"index":2892}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/arithmetic.rs","byte_start":70565,"byte_end":70581,"line_start":13,"line_end":13,"column_start":6,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/boolean.rs","byte_start":86059,"byte_end":86075,"line_start":11,"line_end":11,"column_start":6,"column_end":22},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":98815,"byte_end":98831,"line_start":37,"line_end":37,"column_start":6,"column_end":22},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":100359,"byte_end":100364,"line_start":12,"line_end":12,"column_start":6,"column_end":11},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":88857,"byte_end":88862,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":90815,"byte_end":90826,"line_start":90,"line_end":90,"column_start":6,"column_end":17},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":91059,"byte_end":91064,"line_start":102,"line_end":102,"column_start":28,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2102},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":91138,"byte_end":91143,"line_start":108,"line_end":108,"column_start":6,"column_end":11},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/ecc/mod.rs","byte_start":95198,"byte_end":95214,"line_start":257,"line_end":257,"column_start":6,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/logic.rs","byte_start":124647,"byte_end":124663,"line_start":12,"line_end":12,"column_start":6,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/constraint_system/range.rs","byte_start":142968,"byte_end":142984,"line_start":12,"line_end":12,"column_start":6,"column_end":22},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":154993,"byte_end":155009,"line_start":43,"line_end":43,"column_start":21,"column_end":37},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2118},"to":{"krate":2,"index":9295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":155156,"byte_end":155172,"line_start":49,"line_end":49,"column_start":6,"column_end":22},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/domain.rs","byte_start":165830,"byte_end":165838,"line_start":366,"line_end":366,"column_start":19,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2136},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":167646,"byte_end":167657,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":168311,"byte_end":168322,"line_start":42,"line_end":42,"column_start":23,"column_end":34},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2142},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":168729,"byte_end":168740,"line_start":61,"line_end":61,"column_start":41,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2142},"to":{"krate":2,"index":3095}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":169294,"byte_end":169305,"line_start":83,"line_end":83,"column_start":41,"column_end":52},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2142},"to":{"krate":2,"index":3087}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":169859,"byte_end":169870,"line_start":105,"line_end":105,"column_start":41,"column_end":52},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2142},"to":{"krate":2,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/evaluations.rs","byte_start":170176,"byte_end":170187,"line_start":116,"line_end":116,"column_start":41,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2142},"to":{"krate":2,"index":3099}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172337,"byte_end":172347,"line_start":26,"line_end":26,"column_start":16,"column_end":26},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2165},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172468,"byte_end":172478,"line_start":34,"line_end":34,"column_start":19,"column_end":29},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2165},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":172570,"byte_end":172580,"line_start":40,"line_end":40,"column_start":6,"column_end":16},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":175309,"byte_end":175319,"line_start":133,"line_end":133,"column_start":14,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2165},"to":{"krate":2,"index":7338}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":177364,"byte_end":177374,"line_start":205,"line_end":205,"column_start":44,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2165},"to":{"krate":2,"index":3087}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":178126,"byte_end":178136,"line_start":226,"line_end":226,"column_start":57,"column_end":67},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2165},"to":{"krate":2,"index":3087}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":178938,"byte_end":178948,"line_start":248,"line_end":248,"column_start":14,"column_end":24},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2165},"to":{"krate":2,"index":3083}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":180161,"byte_end":180171,"line_start":292,"line_end":292,"column_start":44,"column_end":54},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2165},"to":{"krate":2,"index":3091}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/fft/polynomial.rs","byte_start":181055,"byte_end":181065,"line_start":317,"line_end":317,"column_start":6,"column_end":16},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/permutation/permutation.rs","byte_start":187958,"byte_end":187969,"line_start":25,"line_end":25,"column_start":6,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/linearisation_poly.rs","byte_start":230193,"byte_end":230209,"line_start":57,"line_end":57,"column_start":6,"column_end":22},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/preprocess.rs","byte_start":239870,"byte_end":239886,"line_start":39,"line_end":39,"column_start":6,"column_end":22},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/proof.rs","byte_start":258063,"byte_end":258068,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":277855,"byte_end":277861,"line_start":31,"line_end":31,"column_start":6,"column_end":12},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278455,"byte_end":278461,"line_start":49,"line_end":49,"column_start":18,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1249},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/prover.rs","byte_start":278537,"byte_end":278543,"line_start":55,"line_end":55,"column_start":6,"column_end":12},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299558,"byte_end":299566,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/verifier.rs","byte_start":299646,"byte_end":299654,"line_start":34,"line_end":34,"column_start":6,"column_end":14},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":322763,"byte_end":322772,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":325428,"byte_end":325439,"line_start":22,"line_end":22,"column_start":6,"column_end":17},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/curve_addition/proverkey.rs","byte_start":327386,"byte_end":327395,"line_start":16,"line_end":16,"column_start":6,"column_end":15},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/curve_addition/verifierkey.rs","byte_start":330976,"byte_end":330987,"line_start":17,"line_end":17,"column_start":6,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":334583,"byte_end":334592,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/ecc/scalar_mul/fixed_base/verifierkey.rs","byte_start":339572,"byte_end":339583,"line_start":20,"line_end":20,"column_start":6,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/proverkey.rs","byte_start":343921,"byte_end":343930,"line_start":19,"line_end":19,"column_start":6,"column_end":15},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/logic/verifierkey.rs","byte_start":346746,"byte_end":346757,"line_start":18,"line_end":18,"column_start":6,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/proverkey.rs","byte_start":349050,"byte_end":349059,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/permutation/verifierkey.rs","byte_start":356894,"byte_end":356905,"line_start":22,"line_end":22,"column_start":6,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/range/proverkey.rs","byte_start":359984,"byte_end":359993,"line_start":16,"line_end":16,"column_start":6,"column_end":15},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/range/verifierkey.rs","byte_start":362513,"byte_end":362524,"line_start":17,"line_end":17,"column_start":6,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":303877,"byte_end":303888,"line_start":66,"line_end":66,"column_start":6,"column_end":17},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/proof_system/widget/mod.rs","byte_start":309137,"byte_end":309146,"line_start":210,"line_end":210,"column_start":6,"column_end":15},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kroos/.cargo/git/checkouts/plonk-467b67aebb59bf10/36ee6cb/src/transcript.rs","byte_start":372719,"byte_end":372729,"line_start":29,"line_end":29,"column_start":29,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":42,"index":140},"to":{"krate":0,"index":1825}}]}